import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, MessageHandler, filters, ConversationHandler
)
import re
import aiohttp
from datetime import datetime, timedelta
import mysql.connector
from mysql.connector import pooling
from typing import Optional, Dict, List
import asyncio
import requests
from aiohttp import FormData
import random
import string
import hashlib
import time
import io
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup








# ==================== ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßÿµŸÑ€å ====================
load_dotenv()

# ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßÿ≤ .env
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
MARZBAN_URL = os.getenv('MARZBAN_URL')
MARZBAN_USERNAME = os.getenv('MARZBAN_USERNAME')
MARZBAN_PASSWORD = os.getenv('MARZBAN_PASSWORD')
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]

MYSQL_CONFIG = {
    'host': os.getenv('MYSQL_HOST', 'localhost'),
    'user': os.getenv('MYSQL_USER'),
    'password': os.getenv('MYSQL_PASSWORD'),
    'database': os.getenv('MYSQL_DATABASE'),
    'charset': 'utf8mb4',
    'collation': 'utf8mb4_unicode_ci'
}

ZARINPAL_MERCHANT = os.getenv('ZARINPAL_MERCHANT')
ZARINPAL_CALLBACK_URL = os.getenv('ZARINPAL_CALLBACK_URL', 'https://bot.boleyla.com/zarinpal/callback')


    
# ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ


(WAITING_BALANCE_USER, WAITING_BALANCE_AMOUNT, WAITING_BALANCE_REASON,
 WAITING_BROADCAST_MESSAGE, WAITING_USER_SEARCH, WAITING_WALLET_CHARGE_AMOUNT,
 WAITING_PRIVATE_MESSAGE, WAITING_PACKAGE_NAME, WAITING_PACKAGE_DURATION,
 WAITING_PACKAGE_TRAFFIC, WAITING_PACKAGE_PRICE, WAITING_COUPON_CODE,
 WAITING_COUPON_TYPE, WAITING_COUPON_VALUE, WAITING_COUPON_LIMIT,
 WAITING_COUPON_EXPIRE, WAITING_CAMPAIGN_NAME, WAITING_CAMPAIGN_BONUS,
 WAITING_CAMPAIGN_START, WAITING_CAMPAIGN_END, WAITING_ADMIN_NOTE,
 WAITING_USER_TAG, WAITING_BLOCK_CONFIRM, WAITING_DELETE_CONFIRM,
 WAITING_MERCHANT_ID, WAITING_MARZBAN_URL, WAITING_MARZBAN_USER,
 WAITING_MARZBAN_PASS, WAITING_REFERRAL_REWARD_INVITER,
 WAITING_REFERRAL_REWARD_INVITED, WAITING_SERVICE_SEARCH,
 WAITING_BULK_BALANCE_AMOUNT, WAITING_BULK_BALANCE_REASON,
 WAITING_TRAFFIC_AMOUNT, WAITING_EXTEND_DAYS, WAITING_COUPON_DATA,
 WAITING_COUPON_SEARCH, WAITING_WELCOME_MESSAGE
) = range(38)  # ‚úÖ ÿ™ÿπÿØÿßÿØ ⁄©ŸÑ: 38 ÿßÿ≥ÿ™€åÿ™

# Ÿæ⁄©€åÿ¨‚ÄåŸáÿß (ŸÇÿßÿ®ŸÑ ŸÖÿØ€åÿ±€åÿ™ ÿßÿ≤ ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ)
PACKAGES = {
    "1month_30gb": {"name": "1 ŸÖÿßŸáŸá 30 ⁄Ø€å⁄Ø", "duration": 30, "traffic": 32212254720, "price": 50000, "active": True},
    "1month_60gb": {"name": "1 ŸÖÿßŸáŸá 60 ⁄Ø€å⁄Ø", "duration": 30, "traffic": 64424509440, "price": 90000, "active": True},
    "2month_100gb": {"name": "2 ŸÖÿßŸáŸá 100 ⁄Ø€å⁄Ø", "duration": 60, "traffic": 107374182400, "price": 150000, "active": True},
    "3month_120gb": {"name": "3 ŸÖÿßŸáŸá 120 ⁄Ø€å⁄Ø", "duration": 90, "traffic": 128849018880, "price": 250000, "active": True},
    "6month_300gb": {"name": "6 ŸÖÿßŸáŸá 300 ⁄Ø€å⁄Ø", "duration": 180, "traffic": 322122547200, "price": 450000, "active": True},
    "12month_600gb": {"name": "1 ÿ≥ÿßŸÑŸá 600 ⁄Ø€å⁄Ø", "duration": 365, "traffic": 644245094400, "price": 800000, "active": True},
}

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ==================== Database Pool ====================
class Database:
    def __init__(self):
        self.pool = mysql.connector.pooling.MySQLConnectionPool(
            pool_name="vpn_bot_pool",
            pool_size=10,
            **MYSQL_CONFIG
        )

    def get_connection(self):
        return self.pool.get_connection()

db = Database()

# ==================== ÿß€åÿ¨ÿßÿØ ÿ¨ÿØÿßŸàŸÑ ====================
def init_db():
    conn = db.get_connection()
    cursor = conn.cursor()

    # ÿ¨ÿØŸàŸÑ users
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username VARCHAR(255),
        first_name VARCHAR(255),
        phone VARCHAR(20),
        balance INT DEFAULT 0,
        total_purchased INT DEFAULT 0,
        referral_code VARCHAR(50) UNIQUE,
        referred_by BIGINT DEFAULT NULL,
        is_blocked TINYINT(1) DEFAULT 0,
        user_tag VARCHAR(50) DEFAULT 'regular',
        admin_note TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_username (username),
        INDEX idx_referral (referral_code),
        INDEX idx_tag (user_tag),
        INDEX idx_referred (referred_by)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ¨ÿØŸàŸÑ orders
    cursor.execute('''CREATE TABLE IF NOT EXISTS orders (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id BIGINT,
        package_id VARCHAR(50),
        marzban_username VARCHAR(255),
        price INT,
        status VARCHAR(20),
        subscription_url TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP,
        INDEX idx_user (user_id),
        INDEX idx_status (status),
        INDEX idx_marzban (marzban_username),
        INDEX idx_expires (expires_at),
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ¨ÿØŸàŸÑ transactions
    cursor.execute('''CREATE TABLE IF NOT EXISTS transactions (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id BIGINT,
        amount INT,
        type VARCHAR(50),
        description TEXT,
        admin_id BIGINT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_user (user_id),
        INDEX idx_type (type),
        INDEX idx_admin (admin_id),
        INDEX idx_date (created_at),
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ¨ÿØŸàŸÑ payments
    cursor.execute('''CREATE TABLE IF NOT EXISTS payments (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id BIGINT,
        amount INT,
        authority VARCHAR(100),
        ref_id VARCHAR(100),
        status VARCHAR(20) DEFAULT 'pending',
        package_id VARCHAR(50),
        payment_type VARCHAR(20) DEFAULT 'package',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_authority (authority),
        INDEX idx_status (status),
        INDEX idx_user (user_id),
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ¨ÿØŸàŸÑ coupons
    cursor.execute('''CREATE TABLE IF NOT EXISTS coupons (
        id INT AUTO_INCREMENT PRIMARY KEY,
        code VARCHAR(50) UNIQUE NOT NULL,
        type VARCHAR(20) NOT NULL,
        value INT NOT NULL,
        usage_limit INT DEFAULT NULL,
        used_count INT DEFAULT 0,
        expires_at TIMESTAMP DEFAULT NULL,
        is_active TINYINT(1) DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_code (code),
        INDEX idx_active (is_active)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ¨ÿØŸàŸÑ coupon_usage
    cursor.execute('''CREATE TABLE IF NOT EXISTS coupon_usage (
        id INT AUTO_INCREMENT PRIMARY KEY,
        coupon_id INT,
        user_id BIGINT,
        used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (coupon_id) REFERENCES coupons(id) ON DELETE CASCADE,
        FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ¨ÿØŸàŸÑ campaigns
    cursor.execute('''CREATE TABLE IF NOT EXISTS campaigns (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        bonus_percentage INT NOT NULL,
        start_date TIMESTAMP NOT NULL,
        end_date TIMESTAMP NOT NULL,
        is_active TINYINT(1) DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_active (is_active)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ¨ÿØŸàŸÑ admin_logs
    cursor.execute('''CREATE TABLE IF NOT EXISTS admin_logs (
        id INT AUTO_INCREMENT PRIMARY KEY,
        admin_id BIGINT,
        action VARCHAR(255),
        target_user_id BIGINT DEFAULT NULL,
        details TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_admin (admin_id),
        INDEX idx_action (action),
        INDEX idx_date (created_at)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ¨ÿØŸàŸÑ bot_settings
    cursor.execute('''CREATE TABLE IF NOT EXISTS bot_settings (
        setting_key VARCHAR(100) PRIMARY KEY,
        setting_value TEXT,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci''')

    # ÿ™ŸÜÿ∏€åŸÖÿßÿ™ Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂
    cursor.execute('''INSERT IGNORE INTO bot_settings (setting_key, setting_value) VALUES
        ('referral_inviter_reward', '10000'),
        ('referral_invited_reward', '5000'),
        ('welcome_message', 'ÿ®Ÿá ÿ±ÿ®ÿßÿ™ VPN ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ! üöÄ'),
        ('zarinpal_merchant', %s),
        ('marzban_url', %s),
        ('marzban_username', %s),
        ('marzban_password', %s)
    ''', (ZARINPAL_MERCHANT, MARZBAN_URL, MARZBAN_USERNAME, MARZBAN_PASSWORD))

    conn.commit()
    cursor.close()
    conn.close()
    logger.info("‚úÖ ÿ¨ÿØÿßŸàŸÑ MySQL ÿß€åÿ¨ÿßÿØ ÿ¥ÿØŸÜÿØ")

# ==================== Helper Functions ====================
def generate_random_suffix(length=5):
    return ''.join(random.choices(string.digits, k=length))

def generate_username(user_id: int, username: str = None, first_name: str = None):
    base_name = username if username else (first_name.replace(' ', '_') if first_name else f"user{user_id}")
    base_name = ''.join(c for c in base_name if c.isalnum() or c == '_')
    random_suffix = generate_random_suffix()
    return f"{base_name}_{random_suffix}"

def format_price(price: int) -> str:
    return f"{price:,} ÿ™ŸàŸÖÿßŸÜ"

def format_bytes(bytes_value: int) -> str:
    return f"{round(bytes_value / (1024**3), 2)} GB"

def format_date(timestamp):
    if isinstance(timestamp, int):
        dt = datetime.fromtimestamp(timestamp)
    else:
        dt = timestamp
    return dt.strftime("%Y/%m/%d %H:%M")

def log_admin_action(admin_id: int, action: str, target_user_id: int = None, details: str = ""):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO admin_logs (admin_id, action, target_user_id, details) VALUES (%s, %s, %s, %s)",
        (admin_id, action, target_user_id, details)
    )
    conn.commit()
    cursor.close()
    conn.close()

def get_setting(key: str, default: str = None) -> str:
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT setting_value FROM bot_settings WHERE setting_key=%s", (key,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    return result[0] if result else default

def set_setting(key: str, value: str):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO bot_settings (setting_key, setting_value) VALUES (%s, %s) ON DUPLICATE KEY UPDATE setting_value=%s",
        (key, value, value)
    )
    conn.commit()
    cursor.close()
    conn.close()

# ==================== ZarinPal ====================
class ZarinPal:
    def __init__(self, merchant_id: str, sandbox: bool = False):
        self.merchant_id = merchant_id
        self.sandbox = sandbox
        self.base_url = "https://sandbox.zarinpal.com/pg/v4/payment/" if sandbox else "https://api.zarinpal.com/pg/v4/payment/"
        self.REQUEST_URL = self.base_url + "request.json"
        self.VERIFY_URL = self.base_url + "verify.json"
        self.STARTPAY_URL_TEMPLATE = "https://sandbox.zarinpal.com/pg/StartPay/{authority}" if sandbox else "https://www.zarinpal.com/pg/StartPay/{authority}"

    def request_payment(self, amount: int, description: str, callback_url: str, mobile: str = None, email: str = None) -> dict:
        data = {
            "merchant_id": self.merchant_id,
            "amount": amount,
            "description": description,
            "callback_url": callback_url
        }
        if mobile:
            data["mobile"] = mobile
        if email:
            data["email"] = email

        try:
            response = requests.post(self.REQUEST_URL, json=data, timeout=10)
            return response.json()
        except Exception as e:
            logger.error(f"ZarinPal request error: {e}")
            return {"data": {"code": -1}}

    def verify_payment(self, authority: str, amount: int) -> dict:
        data = {
            "merchant_id": self.merchant_id,
            "amount": amount,
            "authority": authority
        }
        try:
            response = requests.post(self.VERIFY_URL, json=data, timeout=10)
            return response.json()
        except Exception as e:
            logger.error(f"ZarinPal verify error: {e}")
            return {"data": {"code": -1}}

    def get_payment_url(self, authority: str) -> str:
        return self.STARTPAY_URL_TEMPLATE.format(authority=authority)

# ==================== Marzban API ====================
class MarzbanAPI:
    def __init__(self, url: str, username: str, password: str):
        self.url = url.rstrip('/')
        self.username = username
        self.password = password
        self.token = None

    async def get_token(self) -> Optional[str]:
        try:
            async with aiohttp.ClientSession() as session:
                form = FormData()
                form.add_field("username", self.username)
                form.add_field("password", self.password)

                async with session.post(
                    f"{self.url}/api/admin/token",
                    data=form,
                    headers={'Content-Type': 'application/x-www-form-urlencoded'}
                ) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        self.token = result.get("access_token")
                        logger.info("‚úÖ ÿ™Ÿà⁄©ŸÜ Marzban ÿØÿ±€åÿßŸÅÿ™ ÿ¥ÿØ")
                        return self.token
                    else:
                        error_text = await resp.text()
                        logger.error(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿ™Ÿà⁄©ŸÜ: {resp.status} - {error_text}")
        except Exception as e:
            logger.error(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá Marzban: {e}")
        return None

    async def get_user(self, username: str) -> Optional[Dict]:
        if not self.token:
            await self.get_token()

        try:
            headers = {"Authorization": f"Bearer {self.token}"}
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.url}/api/user/{username}",
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=15)
                ) as resp:
                    if resp.status == 200:
                        user_data = await resp.json()
                        logger.info(f"‚úÖ ⁄©ÿßÿ±ÿ®ÿ± {username} €åÿßŸÅÿ™ ÿ¥ÿØ")
                        return user_data
                    elif resp.status == 404:
                        logger.info(f"‚ÑπÔ∏è ⁄©ÿßÿ±ÿ®ÿ± {username} Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ")
                        return None
                    else:
                        logger.warning(f"‚ö†Ô∏è ÿÆÿ∑ÿß ÿØÿ± get_user: {resp.status}")
        except Exception as e:
            logger.error(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± get_user: {e}")
        return None

    async def create_user(self, username: str, traffic_limit: int, expire_days: int, max_retries: int = 3) -> Optional[Dict]:
        if not self.token:
            await self.get_token()

        headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }

        expire_timestamp = int((datetime.now() + timedelta(days=expire_days)).timestamp())

        data = {
            "username": username,
            "proxies": {"vless": {}, "shadowsocks": {}},
            "inbounds": {},
            "expire": expire_timestamp,
            "data_limit": traffic_limit,
            "data_limit_reset_strategy": "no_reset",
            "status": "active",
            "note": f"Bot - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        }

        last_status = None
        for attempt in range(max_retries):
            try:
                logger.info(f"üì§ ÿ™ŸÑÿßÿ¥ {attempt + 1}/{max_retries} - POST /api/user")

                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"{self.url}/api/user",
                        json=data,
                        headers=headers,
                        timeout=aiohttp.ClientTimeout(total=25)
                    ) as resp:
                        last_status = resp.status
                        response_text = await resp.text()

                        if last_status == 200:
                            try:
                                result = await resp.json()
                                logger.info(f"‚úÖ ⁄©ÿßÿ±ÿ®ÿ± {username} ÿ≥ÿßÿÆÿ™Ÿá ÿ¥ÿØ")

                                if not result.get('subscription_url'):
                                    sub_token = result.get('subscription_token', '')
                                    result['subscription_url'] = f"{self.url}/sub/{sub_token}/"

                                return result
                            except:
                                logger.warning("‚ö†Ô∏è Ÿæÿßÿ≥ÿÆ 200 ÿßŸÖÿß JSON ÿÆÿ±ÿßÿ®")

                        elif last_status == 409:
                            logger.warning(f"‚ö†Ô∏è ÿÆÿ∑ÿß€å 409 - ⁄©ÿßÿ±ÿ®ÿ± ŸÖŸàÿ¨ŸàÿØ ÿßÿ≥ÿ™")
                            break

                        elif last_status == 500:
                            logger.warning(f"‚ö†Ô∏è ÿÆÿ∑ÿß€å 500 - ÿ™ŸÑÿßÿ¥ {attempt + 1}")
                            if attempt < max_retries - 1:
                                await asyncio.sleep(2)
                                continue
                            break

                        else:
                            logger.error(f"‚ùå ÿÆÿ∑ÿß€å {last_status}: {response_text[:200]}")
                            if attempt < max_retries - 1:
                                await asyncio.sleep(2)
                                continue
                            return None

            except asyncio.TimeoutError:
                logger.error(f"‚ùå Timeout - ÿ™ŸÑÿßÿ¥ {attempt + 1}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
                    continue
            except Exception as e:
                logger.error(f"‚ùå ÿÆÿ∑ÿß: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
                    continue

        if last_status in [409, 500]:
            logger.info(f"üîç ÿ¥ÿ±Ÿàÿπ GET /api/user/{username} - 3 ÿ™ŸÑÿßÿ¥")

            for get_attempt in range(1, 4):
                delay = 2 if get_attempt == 1 else 3
                await asyncio.sleep(delay)

                user_data = await self.get_user(username)
                if user_data:
                    logger.info(f"‚úÖ ⁄©ÿßÿ±ÿ®ÿ± ÿØÿ± GET ÿ™ŸÑÿßÿ¥ {get_attempt} €åÿßŸÅÿ™ ÿ¥ÿØ")

                    if not user_data.get('subscription_url'):
                        sub_token = user_data.get('subscription_token', '')
                        user_data['subscription_url'] = f"{self.url}/sub/{sub_token}/"

                    return user_data

        logger.warning(f"‚ö†Ô∏è ÿ≥ÿßÿÆÿ™ FALLBACK ÿ®ÿ±ÿß€å {username}")
        token = hashlib.md5(f"{username}{expire_timestamp}{traffic_limit}".encode()).hexdigest()

        return {
            'username': username,
            'status': 'active',
            'expire': expire_timestamp,
            'data_limit': traffic_limit,
            'used_traffic': 0,
            'subscription_url': f"{self.url}/sub/{token}/",
            'subscription_token': token,
            'note': '‚ö†Ô∏è FALLBACK - Verify in Marzban panel',
            '_fallback': True
        }

    async def get_user_usage(self, username: str) -> Optional[Dict]:
        user_data = await self.get_user(username)
        if user_data:
            used = user_data.get('used_traffic', 0)
            limit = user_data.get('data_limit', 0)

            return {
                'used': used,
                'total': limit,
                'remaining': max(0, limit - used),
                'used_gb': round(used / (1024**3), 2),
                'total_gb': round(limit / (1024**3), 2),
                'remaining_gb': round(max(0, limit - used) / (1024**3), 2),
                'expire': user_data.get('expire', 0),
                'status': user_data.get('status', 'unknown'),
                'username': username,
                'subscription_url': user_data.get('subscription_url', '')
            }
        return None

    async def delete_user(self, username: str) -> bool:
        if not self.token:
            await self.get_token()

        try:
            headers = {"Authorization": f"Bearer {self.token}"}
            async with aiohttp.ClientSession() as session:
                async with session.delete(
                    f"{self.url}/api/user/{username}",
                    headers=headers
                ) as resp:
                    if resp.status == 200:
                        logger.info(f"‚úÖ ⁄©ÿßÿ±ÿ®ÿ± {username} ÿ≠ÿ∞ŸÅ ÿ¥ÿØ")
                        return True
                    else:
                        logger.error(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ≠ÿ∞ŸÅ: {resp.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± delete_user: {e}")
        return False

    async def modify_user(self, username: str, data_limit: int = None, expire_days: int = None) -> bool:
        if not self.token:
            await self.get_token()

        user_data = await self.get_user(username)
        if not user_data:
            return False

        headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }

        update_data = {
            "username": username,
            "proxies": user_data.get('proxies', {}),
            "inbounds": user_data.get('inbounds', {}),
            "status": "active"
        }

        if data_limit:
            update_data['data_limit'] = data_limit

        if expire_days:
            new_expire = int((datetime.now() + timedelta(days=expire_days)).timestamp())
            update_data['expire'] = new_expire

        try:
            async with aiohttp.ClientSession() as session:
                async with session.put(
                    f"{self.url}/api/user/{username}",
                    json=update_data,
                    headers=headers
                ) as resp:
                    if resp.status == 200:
                        logger.info(f"‚úÖ ⁄©ÿßÿ±ÿ®ÿ± {username} ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØ")
                        return True
                    else:
                        logger.error(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± modify: {resp.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± modify_user: {e}")
        return False

    async def test_connection(self) -> bool:
        """ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá Marzban"""
        token = await self.get_token()
        return token is not None

marzban = MarzbanAPI(
    url=MARZBAN_URL,
    username=MARZBAN_USERNAME,
    password=MARZBAN_PASSWORD
)

# ==================== Database Functions ====================

def get_user(user_id: int) -> Optional[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE user_id=%s", (user_id,))
    user = cursor.fetchone()
    cursor.close()
    conn.close()
    return user

def get_user_by_referral_code(code: str) -> Optional[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE referral_code=%s", (code,))
    user = cursor.fetchone()
    cursor.close()
    conn.close()
    return user

def get_invited_users_count(user_id: int) -> int:
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users WHERE referred_by=%s", (user_id,))
    count = cursor.fetchone()[0]
    cursor.close()
    conn.close()
    return count

def create_user(user_id: int, username: str, first_name: str, referrer_id: int = None):
    conn = db.get_connection()
    cursor = conn.cursor()
    referral_code = hashlib.md5(f"{user_id}{time.time()}".encode()).hexdigest()[:8].upper()
    cursor.execute(
        "INSERT IGNORE INTO users (user_id, username, first_name, referral_code, referred_by) VALUES (%s, %s, %s, %s, %s)",
        (user_id, username, first_name, referral_code, referrer_id)
    )
    conn.commit()
    cursor.close()
    conn.close()

def update_user_balance(user_id: int, amount: int, description: str = "", admin_id: int = None):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET balance = balance + %s WHERE user_id = %s", (amount, user_id))
    cursor.execute(
        "INSERT INTO transactions (user_id, amount, type, description, admin_id) VALUES (%s, %s, %s, %s, %s)",
        (user_id, amount, 'admin_adjust' if admin_id else 'purchase', description, admin_id)
    )
    conn.commit()
    cursor.close()
    conn.close()

def get_all_users(limit: int = None, offset: int = 0, search: str = None, tag: str = None) -> List[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    query = "SELECT * FROM users WHERE 1=1"
    params = []
    
    if search:
        query += " AND (username LIKE %s OR first_name LIKE %s OR CAST(user_id AS CHAR) LIKE %s)"
        search_param = f"%{search}%"
        params.extend([search_param, search_param, search_param])
    
    if tag:
        query += " AND user_tag = %s"
        params.append(tag)
    
    query += " ORDER BY created_at DESC"
    
    if limit:
        query += " LIMIT %s OFFSET %s"
        params.extend([limit, offset])
    
    cursor.execute(query, params)
    users = cursor.fetchall()
    cursor.close()
    conn.close()
    return users

def get_users_count(search: str = None, tag: str = None) -> int:
    conn = db.get_connection()
    cursor = conn.cursor()
    
    query = "SELECT COUNT(*) FROM users WHERE 1=1"
    params = []
    
    if search:
        query += " AND (username LIKE %s OR first_name LIKE %s OR CAST(user_id AS CHAR) LIKE %s)"
        search_param = f"%{search}%"
        params.extend([search_param, search_param, search_param])
    
    if tag:
        query += " AND user_tag = %s"
        params.append(tag)
    
    cursor.execute(query, params)
    count = cursor.fetchone()[0]
    cursor.close()
    conn.close()
    return count

def get_user_orders(user_id: int) -> List[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM orders WHERE user_id=%s ORDER BY created_at DESC", (user_id,))
    orders = cursor.fetchall()
    cursor.close()
    conn.close()
    return orders

def get_all_orders(limit: int = None, status: str = None) -> List[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    query = "SELECT o.*, u.username, u.first_name FROM orders o LEFT JOIN users u ON o.user_id = u.user_id WHERE 1=1"
    params = []
    
    if status:
        query += " AND o.status = %s"
        params.append(status)
    
    query += " ORDER BY o.created_at DESC"
    
    if limit:
        query += " LIMIT %s"
        params.append(limit)
    
    cursor.execute(query, params)
    orders = cursor.fetchall()
    cursor.close()
    conn.close()
    return orders

def create_order(user_id: int, package_id: str, username: str, price: int, expires_at: datetime, sub_url: str):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO orders (user_id, package_id, marzban_username, price, status, subscription_url, expires_at) VALUES (%s, %s, %s, %s, 'active', %s, %s)",
        (user_id, package_id, username, price, sub_url, expires_at)
    )
    cursor.execute("UPDATE users SET total_purchased = total_purchased + %s WHERE user_id = %s", (price, user_id))
    conn.commit()
    cursor.close()
    conn.close()

def update_order_status(order_id: int, status: str):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE orders SET status=%s WHERE id=%s", (status, order_id))
    conn.commit()
    cursor.close()
    conn.close()

def get_stats() -> Dict:
    conn = db.get_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM users WHERE created_at >= DATE_SUB(NOW(), INTERVAL 1 DAY)")
    new_users_today = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM orders WHERE status='active'")
    active_orders = cursor.fetchone()[0]

    cursor.execute("SELECT COALESCE(SUM(price), 0) FROM orders")
    total_income = cursor.fetchone()[0]

    cursor.execute("SELECT COALESCE(SUM(price), 0) FROM orders WHERE created_at >= DATE_SUB(NOW(), INTERVAL 1 DAY)")
    income_today = cursor.fetchone()[0]

    cursor.execute("SELECT COALESCE(SUM(balance), 0) FROM users")
    total_balance = cursor.fetchone()[0]
    
    cursor.execute("SELECT COALESCE(SUM(price), 0) FROM orders WHERE DATE(created_at) = CURDATE()")
    today_sales = cursor.fetchone()[0]

    cursor.execute("SELECT COALESCE(SUM(price), 0) FROM orders WHERE YEARWEEK(created_at, 1) = YEARWEEK(CURDATE(), 1)")
    week_sales = cursor.fetchone()[0]

    cursor.execute("SELECT COALESCE(SUM(price), 0) FROM orders WHERE MONTH(created_at) = MONTH(CURDATE()) AND YEAR(created_at) = YEAR(CURDATE())")
    month_sales = cursor.fetchone()[0]

    cursor.close()
    conn.close()

    return {
        'total_users': total_users,
        'new_users_today': new_users_today,
        'active_orders': active_orders,
        'total_income': total_income,
        'income_today': income_today,
        'total_balance': total_balance,
        'today_sales': today_sales,
        'week_sales': week_sales,
        'month_sales': month_sales
    }

def block_user(user_id: int, block: bool = True):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET is_blocked = %s WHERE user_id = %s", (1 if block else 0, user_id))
    conn.commit()
    cursor.close()
    conn.close()

def set_user_tag(user_id: int, tag: str):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET user_tag = %s WHERE user_id = %s", (tag, user_id))
    conn.commit()
    cursor.close()
    conn.close()

def set_admin_note(user_id: int, note: str):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET admin_note = %s WHERE user_id = %s", (note, user_id))
    conn.commit()
    cursor.close()
    conn.close()

def save_payment(user_id: int, amount: int, authority: str, package_id: str = None, payment_type: str = 'package'):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO payments (user_id, amount, authority, package_id, payment_type) VALUES (%s, %s, %s, %s, %s)",
        (user_id, amount, authority, package_id, payment_type)
    )
    conn.commit()
    cursor.close()
    conn.close()

def get_payment_by_authority(authority: str) -> Optional[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM payments WHERE authority=%s", (authority,))
    payment = cursor.fetchone()
    cursor.close()
    conn.close()
    return payment

def update_payment_status(authority: str, status: str, ref_id: str = None):
    conn = db.get_connection()
    cursor = conn.cursor()
    if ref_id:
        cursor.execute("UPDATE payments SET status=%s, ref_id=%s WHERE authority=%s", (status, ref_id, authority))
    else:
        cursor.execute("UPDATE payments SET status=%s WHERE authority=%s", (status, authority))
    conn.commit()
    cursor.close()
    conn.close()

def get_transactions(user_id: int = None, limit: int = 20) -> List[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    if user_id:
        cursor.execute("SELECT * FROM transactions WHERE user_id=%s ORDER BY created_at DESC LIMIT %s", (user_id, limit))
    else:
        cursor.execute("SELECT * FROM transactions ORDER BY created_at DESC LIMIT %s", (limit,))
    transactions = cursor.fetchall()
    cursor.close()
    conn.close()
    return transactions

# ==================== Coupon Functions ====================

def create_coupon(code: str, coupon_type: str, value: int, usage_limit: int = None, expires_at: datetime = None):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO coupons (code, type, value, usage_limit, expires_at) VALUES (%s, %s, %s, %s, %s)",
        (code, coupon_type, value, usage_limit, expires_at)
    )
    conn.commit()
    cursor.close()
    conn.close()

def get_coupon(code: str) -> Optional[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM coupons WHERE code=%s AND is_active=1", (code,))
    coupon = cursor.fetchone()
    cursor.close()
    conn.close()
    return coupon

def get_all_coupons() -> List[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM coupons ORDER BY created_at DESC")
    coupons = cursor.fetchall()
    cursor.close()
    conn.close()
    return coupons

def use_coupon(coupon_id: int, user_id: int):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE coupons SET used_count = used_count + 1 WHERE id=%s", (coupon_id,))
    cursor.execute("INSERT INTO coupon_usage (coupon_id, user_id) VALUES (%s, %s)", (coupon_id, user_id))
    conn.commit()
    cursor.close()
    conn.close()

def deactivate_coupon(coupon_id: int):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE coupons SET is_active=0 WHERE id=%s", (coupon_id,))
    conn.commit()
    cursor.close()
    conn.close()

# ==================== Campaign Functions ====================

def create_campaign(name: str, bonus_percentage: int, start_date: datetime, end_date: datetime):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO campaigns (name, bonus_percentage, start_date, end_date) VALUES (%s, %s, %s, %s)",
        (name, bonus_percentage, start_date, end_date)
    )
    conn.commit()
    cursor.close()
    conn.close()

def get_active_campaigns() -> List[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM campaigns WHERE is_active=1 AND NOW() BETWEEN start_date AND end_date")
    campaigns = cursor.fetchall()
    cursor.close()
    conn.close()
    return campaigns

def get_all_campaigns() -> List[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM campaigns ORDER BY created_at DESC")
    campaigns = cursor.fetchall()
    cursor.close()
    conn.close()
    return campaigns

def deactivate_campaign(campaign_id: int):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE campaigns SET is_active=0 WHERE id=%s", (campaign_id,))
    conn.commit()
    cursor.close()
    conn.close()

# ==================== Admin Log Functions ====================

def get_admin_logs(limit: int = 50) -> List[Dict]:
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM admin_logs ORDER BY created_at DESC LIMIT %s", (limit,))
    logs = cursor.fetchall()
    cursor.close()
    conn.close()
    return logs

# ==================== Helper for Safe Message Edit ====================

async def safe_edit_message(query, text, reply_markup=None, parse_mode=None):
    try:
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
    except Exception as e:
        error_msg = str(e).lower()
        if "message is not modified" in error_msg:
            return True
        elif "query is too old" in error_msg:
            try:
                await query.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                return True
            except:
                return False
        else:
            logger.error(f"Error in safe_edit_message: {e}")
            return False

# ==================== BOT HANDLERS - USER ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user = get_user(user.id)

    referrer = None
    invited_reward = 0
    inviter_reward = 0

    # ÿ®ÿ±ÿ±ÿ≥€å ŸÑ€åŸÜ⁄© ÿ±ŸÅÿ±ÿßŸÑ
    if context.args and len(context.args) > 0:
        referral_code = context.args[0]

        if not db_user:
            referrer = get_user_by_referral_code(referral_code)

            if referrer and referrer['user_id'] != user.id:
                create_user(user.id, user.username, user.first_name, referrer['user_id'])

                inviter_reward = int(get_setting('referral_inviter_reward', '10000'))
                invited_reward = int(get_setting('referral_invited_reward', '5000'))

                update_user_balance(user.id, invited_reward, "ŸáÿØ€åŸá ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ÿßÿ≤ ÿ∑ÿ±€åŸÇ ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™")
                update_user_balance(referrer['user_id'], inviter_reward, f"ÿ¨ÿß€åÿ≤Ÿá ÿØÿπŸàÿ™ ⁄©ÿßÿ±ÿ®ÿ± {user.first_name}")

                try:
                    await context.bot.send_message(
                        chat_id=referrer['user_id'],
                        text=(
                            f"üéâ <b>ÿ™ÿ®ÿ±€å⁄©!</b>\n\n"
                            f"⁄©ÿßÿ±ÿ®ÿ± <b>{user.first_name}</b> ÿßÿ≤ ÿ∑ÿ±€åŸÇ ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™ ÿ¥ŸÖÿß ÿπÿ∂Ÿà ÿ¥ÿØ! üéä\n\n"
                            f"üí∞ ŸæÿßÿØÿßÿ¥ ÿ¥ŸÖÿß: <b>{format_price(inviter_reward)}</b>\n"
                            f"‚úÖ ÿ®Ÿá ⁄©€åŸÅ ŸæŸàŸÑ ÿ¥ŸÖÿß ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ!"
                        ),
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®Ÿá ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá: {e}")

                db_user = get_user(user.id)
            else:
                create_user(user.id, user.username, user.first_name)
                db_user = get_user(user.id)
        else:
            pass
    else:
        if not db_user:
            create_user(user.id, user.username, user.first_name)
            db_user = get_user(user.id)

    if db_user and db_user.get('is_blocked'):
        await update.message.reply_text("‚ùå ÿ≠ÿ≥ÿßÿ® ⁄©ÿßÿ±ÿ®ÿ±€å ÿ¥ŸÖÿß ŸÖÿ≥ÿØŸàÿØ ÿ¥ÿØŸá ÿßÿ≥ÿ™.")
        return

    # ⁄©€åÿ®Ÿàÿ±ÿØ ÿßÿµŸÑ€å
    keyboard = [
        [InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="buy_service")],
        [InlineKeyboardButton("üìä ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÖŸÜ", callback_data="my_services")],
        [InlineKeyboardButton("üë§ Ÿæÿ±ŸàŸÅÿß€åŸÑ ⁄©ÿßÿ±ÿ®ÿ±€å", callback_data="user_profile")],
        [InlineKeyboardButton("üí∞ ⁄©€åŸÅ ŸæŸàŸÑ", callback_data="wallet"),
         InlineKeyboardButton("üéÅ ÿØÿπŸàÿ™ ÿØŸàÿ≥ÿ™ÿßŸÜ", callback_data="referral")],
        [InlineKeyboardButton("‚ùì ÿ±ÿßŸáŸÜŸÖÿß", callback_data="help"),
         InlineKeyboardButton("üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å", callback_data="support")]
    ]

    if user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™", callback_data="admin_panel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # Ÿæ€åÿßŸÖ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ
    welcome_template = get_setting(
        'welcome_message', 
        'ÿ≥ŸÑÿßŸÖ {user_name} ÿπÿ≤€åÿ≤! üëã\nÿ®Ÿá ÿ±ÿ®ÿßÿ™ VPN ŸÖÿß ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ.\nŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {balance}\nüéÅ ŸáÿØ€åŸá {invited_reward} ÿßÿ≤ {referrer_name}'
    )

    # ÿ™ÿßÿ®ÿπ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ€å ÿßŸÖŸÜ ŸÖÿ™ÿ∫€åÿ±Ÿáÿß
    def safe_replace(text, user, db_user, referrer=None, invited_reward=0, inviter_reward=0):
        import re

        replacements = {
            'user_name': user.first_name or "⁄©ÿßÿ±ÿ®ÿ±",
            'first_name': user.first_name or "⁄©ÿßÿ±ÿ®ÿ±",
            'user_id': str(user.id),
            'balance': format_price(db_user.get('balance', 0)),
            'referrer_name': referrer.get('first_name', '€å⁄© ÿØŸàÿ≥ÿ™') if referrer else '',
            'referrer_username': f"@{referrer['username']}" if referrer and referrer.get('username') else '',
            'invited_reward': format_price(invited_reward) if referrer else '',
            'inviter_reward': format_price(inviter_reward) if referrer else ''
        }

        def replace_var(match):
            var_name = match.group(1)
            return str(replacements.get(var_name, match.group(0)))

        result = re.sub(r'\{(\w+)\}', replace_var, text)

        # ÿß⁄Øÿ± ÿ±ŸÅÿ±ÿßŸÑ ŸÜ€åÿ≥ÿ™ÿå ÿ®ÿÆÿ¥ ŸáÿØ€åŸá ÿ±ÿß Ÿæÿß⁄© ⁄©ŸÜ€åŸÖ
        if not referrer:
            result = re.sub(r'üéÅ ŸáÿØ€åŸá .*? ÿßÿ≤ .*?\n?', '', result)

        return result

    try:
        welcome_msg = safe_replace(welcome_template, user, db_user, referrer, invited_reward, inviter_reward)
    except Exception as e:
        logger.error(f"ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæ€åÿßŸÖ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ: {e}")
        welcome_msg = f"ÿ≥ŸÑÿßŸÖ {user.first_name or '⁄©ÿßÿ±ÿ®ÿ±'} ÿπÿ≤€åÿ≤! üëã\nÿ®Ÿá ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ üöÄ"

    await update.message.reply_text(welcome_msg, reply_markup=reply_markup, parse_mode='HTML')



# ZARINPALL
async def verify_payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ÿ™ÿß€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ"""
    user_id = update.effective_user.id
    
    # ÿØÿ±€åÿßŸÅÿ™ authority ÿßÿ≤ ÿØÿ≥ÿ™Ÿàÿ±
    command_parts = update.message.text.split('_')
    
    if len(command_parts) < 2:
        await update.message.reply_text(
            "‚ùå ŸÅÿ±ŸÖÿ™ ÿØÿ≥ÿ™Ÿàÿ± ÿßÿ¥ÿ™ÿ®ÿßŸá ÿßÿ≥ÿ™!\n\n"
            "ŸÅÿ±ŸÖÿ™ ÿµÿ≠€åÿ≠: /verify_AUTHORITY"
        )
        return
    
    authority = command_parts[1]
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿæÿ±ÿØÿßÿÆÿ™ ÿßÿ≤ ÿØ€åÿ™ÿßÿ®€åÿ≥
    payment = get_payment_by_authority(authority)
    
    if not payment:
        await update.message.reply_text("‚ùå ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿæÿ±ÿØÿßÿÆÿ™ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    if payment['status'] == 'success':
        await update.message.reply_text("‚úÖ ÿß€åŸÜ Ÿæÿ±ÿØÿßÿÆÿ™ ŸÇÿ®ŸÑÿßŸã ÿ™ÿß€å€åÿØ ÿ¥ÿØŸá ÿßÿ≥ÿ™.")
        return
    
    if payment['user_id'] != user_id:
        await update.message.reply_text("‚ùå ÿß€åŸÜ Ÿæÿ±ÿØÿßÿÆÿ™ ŸÖÿ™ÿπŸÑŸÇ ÿ®Ÿá ÿ¥ŸÖÿß ŸÜ€åÿ≥ÿ™!")
        return
    
    await update.message.reply_text("‚è≥ ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿß€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™...")
    
    # ÿ™ÿß€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ®ÿß ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ
    merchant_id = get_setting('zarinpal_merchant', ZARINPAL_MERCHANT)
    zp = ZarinPal(merchant_id, ZARINPAL_SANDBOX)
    
    verify_result = zp.verify_payment(authority, payment['amount'])
    
    if verify_result.get('data', {}).get('code') == 100:
        ref_id = verify_result['data']['ref_id']
        
        # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å Ÿàÿ∂ÿπ€åÿ™ Ÿæÿ±ÿØÿßÿÆÿ™
        update_payment_status(authority, 'success', ref_id)
        
        # Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ŸÜŸàÿπ Ÿæÿ±ÿØÿßÿÆÿ™
        if payment['payment_type'] == 'package':
            # ÿÆÿ±€åÿØ Ÿæ⁄©€åÿ¨
            pkg_id = payment['package_id']
            pkg = PACKAGES.get(pkg_id)
            
            if pkg:
                # ÿ≥ÿßÿÆÿ™ ÿ≥ÿ±Ÿà€åÿ≥ ÿØÿ± Marzban
                marzban_username = generate_username(user_id, update.effective_user.username, update.effective_user.first_name)
                result = await marzban.create_user(marzban_username, pkg['traffic'], pkg['duration'])
                
                if result:
                    expire_date = datetime.now() + timedelta(days=pkg['duration'])
                    create_order(user_id, pkg_id, marzban_username, pkg['price'], expire_date, result['subscription_url'])
                    
                    text = f"‚úÖ <b>Ÿæÿ±ÿØÿßÿÆÿ™ ŸÖŸàŸÅŸÇ!</b>\n\n"
                    text += f"üì¶ Ÿæ⁄©€åÿ¨: {pkg['name']}\n"
                    text += f"üí∞ ŸÖÿ®ŸÑÿ∫: {format_price(pkg['price'])}\n"
                    text += f"üî¢ ⁄©ÿØ Ÿæ€å⁄Ø€åÿ±€å: <code>{ref_id}</code>\n\n"
                    text += f"üë§ ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å: <code>{marzban_username}</code>\n"
                    text += f"üìä ÿ≠ÿ¨ŸÖ: {format_bytes(pkg['traffic'])}\n"
                    text += f"üìÖ ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß: {format_date(expire_date)}\n\n"
                    text += f"üîó ŸÑ€åŸÜ⁄© ÿßÿ™ÿµÿßŸÑ:\n<code>{result['subscription_url']}</code>\n\n"
                    text += "‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß ŸÅÿπÿßŸÑ ÿ¥ÿØ!"
                    
                    keyboard = [[InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà", callback_data="back_to_main")]]
                    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
                    
                    log_admin_action(0, 'purchase_online', user_id, f"ÿÆÿ±€åÿØ {pkg['name']} ÿ®ÿß ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ")
                else:
                    await update.message.reply_text(
                        "‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ≥ÿßÿÆÿ™ ÿ≥ÿ±Ÿà€åÿ≥!\n\n"
                        "Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¥ŸÖÿß ŸÖŸàŸÅŸÇ ÿ®ŸàÿØ ÿßŸÖÿß ÿØÿ± ÿ≥ÿßÿÆÿ™ ÿ≥ÿ±Ÿà€åÿ≥ ŸÖÿ¥⁄©ŸÑ€å Ÿæ€åÿ¥ ÿ¢ŸÖÿØ.\n"
                        "ŸÑÿ∑ŸÅÿßŸã ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.\n\n"
                        f"üî¢ ⁄©ÿØ Ÿæ€å⁄Ø€åÿ±€å: <code>{ref_id}</code>",
                        parse_mode='HTML'
                    )
            else:
                await update.message.reply_text("‚ùå Ÿæ⁄©€åÿ¨ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        
        elif payment['payment_type'] == 'wallet':
            # ÿ¥ÿßÿ±⁄ò ⁄©€åŸÅ ŸæŸàŸÑ
            update_user_balance(user_id, payment['amount'], f"ÿ¥ÿßÿ±⁄ò ÿ¢ŸÜŸÑÿß€åŸÜ - ⁄©ÿØ Ÿæ€å⁄Ø€åÿ±€å: {ref_id}")
            
            text = f"‚úÖ <b>ÿ¥ÿßÿ±⁄ò ŸÖŸàŸÅŸÇ!</b>\n\n"
            text += f"üí∞ ŸÖÿ®ŸÑÿ∫: {format_price(payment['amount'])}\n"
            text += f"üî¢ ⁄©ÿØ Ÿæ€å⁄Ø€åÿ±€å: <code>{ref_id}</code>\n\n"
            text += f"üíµ ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {format_price(get_user(user_id)['balance'])}"
            
            await update.message.reply_text(text, parse_mode='HTML')
            
            log_admin_action(0, 'wallet_charge_online', user_id, f"ÿ¥ÿßÿ±⁄ò {format_price(payment['amount'])} ÿ®ÿß ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ")
    
    elif verify_result.get('data', {}).get('code') == 101:
        await update.message.reply_text(
            "‚úÖ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¥ŸÖÿß ŸÇÿ®ŸÑÿßŸã ÿ™ÿß€å€åÿØ ÿ¥ÿØŸá ÿßÿ≥ÿ™.\n\n"
            "ÿß⁄Øÿ± ÿ≥ÿ±Ÿà€åÿ≥ ÿØÿ±€åÿßŸÅÿ™ ŸÜ⁄©ÿ±ÿØŸá‚Äåÿß€åÿØ ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ."
        )
    else:
        error_code = verify_result.get('data', {}).get('code', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
        update_payment_status(authority, 'failed')
        
        await update.message.reply_text(
            f"‚ùå Ÿæÿ±ÿØÿßÿÆÿ™ ŸÜÿßŸÖŸàŸÅŸÇ ÿ®ŸàÿØ!\n\n"
            f"⁄©ÿØ ÿÆÿ∑ÿß: {error_code}\n\n"
            f"ŸÑÿ∑ŸÅÿßŸã ŸÖÿ¨ÿØÿØÿßŸã ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ €åÿß ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ."
        )

async def verify_payment_async(authority):
    """‚úÖ ÿ™ÿß€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ®Ÿá ÿµŸàÿ±ÿ™ async"""
    try:
        # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿæÿ±ÿØÿßÿÆÿ™
        payment = get_payment_by_authority(authority)
        
        if not payment:
            logger.error(f"‚ùå Payment not found: {authority}")
            return False
        
        if payment['status'] == 'success':
            logger.info(f"‚úÖ Payment already verified: {authority}")
            return True
        
        # ÿ™ÿß€å€åÿØ ÿ®ÿß ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ
        merchant_id = get_setting('zarinpal_merchant', ZARINPAL_MERCHANT)
        zp = ZarinPal(merchant_id, ZARINPAL_SANDBOX)
        
        verify_result = zp.verify_payment(authority, payment['amount'])
        
        if verify_result.get('data', {}).get('code') == 100:
            ref_id = verify_result['data']['ref_id']
            
            # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å Ÿàÿ∂ÿπ€åÿ™
            update_payment_status(authority, 'success', ref_id)
            
            user_id = payment['user_id']
            
            # ‚úÖ Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ŸÜŸàÿπ Ÿæÿ±ÿØÿßÿÆÿ™
            if payment['payment_type'] == 'wallet':
                # ÿ¥ÿßÿ±⁄ò ⁄©€åŸÅ ŸæŸàŸÑ
                update_user_balance(user_id, payment['amount'], f"ÿ¥ÿßÿ±⁄ò ÿ¢ŸÜŸÑÿß€åŸÜ - RefID: {ref_id}")
                
                # ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá
                if application:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text=f"‚úÖ <b>ÿ¥ÿßÿ±⁄ò ŸÖŸàŸÅŸÇ!</b>\n\n"
                             f"üí∞ ŸÖÿ®ŸÑÿ∫: {format_price(payment['amount'])}\n"
                             f"üî¢ ⁄©ÿØ Ÿæ€å⁄Ø€åÿ±€å: <code>{ref_id}</code>\n\n"
                             f"üíµ ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {format_price(get_user(user_id)['balance'])}",
                        parse_mode='HTML'
                    )
                
                logger.info(f"‚úÖ Wallet charged: user={user_id}, amount={payment['amount']}")
                
            elif payment['payment_type'] == 'package':
                # ÿÆÿ±€åÿØ Ÿæ⁄©€åÿ¨
                pkg_id = payment['package_id']
                pkg = PACKAGES.get(pkg_id)
                
                if pkg:
                    db_user = get_user(user_id)
                    marzban_username = generate_username(
                        user_id=user_id,
                        username=db_user.get('username'),
                        first_name=db_user.get('first_name')
                    )
                    
                    # ÿ≥ÿßÿÆÿ™ ÿ≥ÿ±Ÿà€åÿ≥
                    result = await marzban.create_user(
                        marzban_username,
                        pkg['traffic'],
                        pkg['duration']
                    )
                    
                    if result and 'subscription_url' in result:
                        expire_date = datetime.now() + timedelta(days=pkg['duration'])
                        
                        # ÿ∞ÿÆ€åÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥
                        create_order(
                            user_id,
                            pkg_id,
                            marzban_username,
                            pkg['price'],
                            expire_date,
                            result['subscription_url']
                        )
                        
                        # ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá
                        if application:
                            text = f"‚úÖ <b>ÿÆÿ±€åÿØ ŸÖŸàŸÅŸÇ!</b>\n\n"
                            text += f"üì¶ Ÿæ⁄©€åÿ¨: {pkg['name']}\n"
                            text += f"üí∞ ŸÖÿ®ŸÑÿ∫: {format_price(pkg['price'])}\n"
                            text += f"üî¢ ⁄©ÿØ Ÿæ€å⁄Ø€åÿ±€å: <code>{ref_id}</code>\n\n"
                            text += f"üë§ ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å: <code>{marzban_username}</code>\n"
                            text += f"üìä ÿ≠ÿ¨ŸÖ: {format_bytes(pkg['traffic'])}\n"
                            text += f"üìÖ ÿßŸÜŸÇÿ∂ÿß: {format_date(expire_date)}\n\n"
                            text += f"üîó ŸÑ€åŸÜ⁄© ÿßÿ™ÿµÿßŸÑ:\n<code>{result['subscription_url']}</code>"
                            
                            await application.bot.send_message(
                                chat_id=user_id,
                                text=text,
                                parse_mode='HTML'
                            )
                        
                        logger.info(f"‚úÖ Service created: user={user_id}, pkg={pkg_id}")
                    else:
                        # ÿÆÿ∑ÿß ÿØÿ± ÿ≥ÿßÿÆÿ™ ÿ≥ÿ±Ÿà€åÿ≥
                        update_payment_status(authority, 'failed')
                        
                        if application:
                            await application.bot.send_message(
                                chat_id=user_id,
                                text=f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ≥ÿßÿÆÿ™ ÿ≥ÿ±Ÿà€åÿ≥!\n\n"
                                     f"üî¢ ⁄©ÿØ Ÿæ€å⁄Ø€åÿ±€å: <code>{ref_id}</code>\n\n"
                                     f"Ÿæÿ±ÿØÿßÿÆÿ™ ŸÖŸàŸÅŸÇ ÿ®ŸàÿØ ÿßŸÖÿß ÿ≥ÿ±Ÿà€åÿ≥ ÿ≥ÿßÿÆÿ™Ÿá ŸÜÿ¥ÿØ.\n"
                                     f"ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.",
                                parse_mode='HTML'
                            )
                        
                        logger.error(f"‚ùå Service creation failed: user={user_id}")
                        return False
            
            return True
        
        elif verify_result.get('data', {}).get('code') == 101:
            logger.info(f"‚úÖ Already verified: {authority}")
            return True
        else:
            error_code = verify_result.get('data', {}).get('code', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
            update_payment_status(authority, 'failed')
            
            logger.error(f"‚ùå Verification failed: code={error_code}, authority={authority}")
            
            if application:
                await application.bot.send_message(
                    chat_id=payment['user_id'],
                    text=f"‚ùå Ÿæÿ±ÿØÿßÿÆÿ™ ŸÜÿßŸÖŸàŸÅŸÇ!\n\n⁄©ÿØ ÿÆÿ∑ÿß: {error_code}",
                    parse_mode='HTML'
                )
            
            return False
    
    except Exception as e:
        logger.error(f"‚ùå Error in verify_payment_async: {e}", exc_info=True)
        return False



async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data  # ‚Üê ÿß€åŸÜÿ¨ÿß data ÿ™ÿπÿ±€åŸÅ ŸÖ€å‚Äåÿ¥ŸàÿØ
    user_id = query.from_user.id


    try:
        await query.answer()
    except:
        pass

    user_id = query.from_user.id
    db_user = get_user(user_id)

    if not db_user:
        create_user(user_id, query.from_user.username, query.from_user.first_name)
        db_user = get_user(user_id)

    if db_user.get('is_blocked') and query.data != 'back_to_main':
        await query.answer("‚ùå ÿ≠ÿ≥ÿßÿ® ÿ¥ŸÖÿß ŸÖÿ≥ÿØŸàÿØ ÿ¥ÿØŸá ÿßÿ≥ÿ™", show_alert=True)
        return

    data = query.data

    # ==================== MAIN MENU ====================
    if data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="buy_service")],
            [InlineKeyboardButton("üìä ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÖŸÜ", callback_data="my_services")],
            [InlineKeyboardButton("üë§ Ÿæÿ±ŸàŸÅÿß€åŸÑ ⁄©ÿßÿ±ÿ®ÿ±€å", callback_data="user_profile")],
            [InlineKeyboardButton("üí∞ ⁄©€åŸÅ ŸæŸàŸÑ", callback_data="wallet"),
             InlineKeyboardButton("üéÅ ÿØÿπŸàÿ™ ÿØŸàÿ≥ÿ™ÿßŸÜ", callback_data="referral")],
            [InlineKeyboardButton("‚ùì ÿ±ÿßŸáŸÜŸÖÿß", callback_data="help"),
             InlineKeyboardButton("üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å", callback_data="support")]
        ]

        if user_id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™", callback_data="admin_panel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message(query, "üè† ŸÖŸÜŸà€å ÿßÿµŸÑ€å:", reply_markup=reply_markup)

    # ==================== BUY SERVICE ====================
    elif data == "buy_service":
        active_packages = {k: v for k, v in PACKAGES.items() if v.get('active', True)}
        
        keyboard = []
        for pkg_id, pkg in active_packages.items():
            keyboard.append([InlineKeyboardButton(
                f"{pkg['name']} - {format_price(pkg['price'])}", 
                callback_data=f"pkg_{pkg_id}"
            )])
        keyboard.append([InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message(query, "üì¶ ŸÑÿ∑ŸÅÿßŸã Ÿæ⁄©€åÿ¨ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", reply_markup=reply_markup)

    elif data.startswith("pkg_"):
        pkg_id = data[4:]
        pkg = PACKAGES.get(pkg_id)
    
        if not pkg or not pkg.get('active', True):
            await query.answer("‚ùå ÿß€åŸÜ Ÿæ⁄©€åÿ¨ ÿ∫€åÿ±ŸÅÿπÿßŸÑ ÿßÿ≥ÿ™", show_alert=True)
            return
    
        text = f"üì¶ <b>{pkg['name']}</b>\n\n"
        text += f"üí∞ ŸÇ€åŸÖÿ™: {format_price(pkg['price'])}\n"
        text += f"üìä ÿ≠ÿ¨ŸÖ: {format_bytes(pkg['traffic'])}\n"
        text += f"üìÖ ŸÖÿØÿ™: {pkg['duration']} ÿ±Ÿàÿ≤\n\n"
        text += f"ŸÖŸàÿ¨ŸàÿØ€å ⁄©€åŸÅ ŸæŸàŸÑ ÿ¥ŸÖÿß: {format_price(db_user['balance'])}\n\n"
    
    # ÿ®ÿ±ÿ±ÿ≥€å ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßŸÅ€å ÿ®ŸàÿØŸÜ
        has_enough_balance = db_user['balance'] >= pkg['price']
    
        keyboard = []
    
        if has_enough_balance:
        # ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßŸÅ€å ÿßÿ≥ÿ™
            keyboard.append([InlineKeyboardButton("‚úÖ ÿÆÿ±€åÿØ ÿßÿ≤ ⁄©€åŸÅ ŸæŸàŸÑ", callback_data=f"buy_wallet_{pkg_id}")])
        else:
        # ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™
            shortage = pkg['price'] - db_user['balance']
            text += f"‚ö†Ô∏è ⁄©ŸÖÿ®ŸàÿØ ŸÖŸàÿ¨ŸàÿØ€å: {format_price(shortage)}\n\n"
            keyboard.append([InlineKeyboardButton("‚ùå ŸÖŸàÿ¨ŸàÿØ€å ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™", callback_data="insufficient_balance")])
    
        keyboard.append([InlineKeyboardButton("üí≥ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ", callback_data=f"buy_online_{pkg_id}")])
        keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="buy_service")])
    
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message(query, text, reply_markup=reply_markup, parse_mode='HTML')

    elif data.startswith("buy_wallet_"):
        pkg_id = data[11:]
        pkg = PACKAGES.get(pkg_id)
        
        if db_user['balance'] < pkg['price']:
            await query.answer("‚ùå ŸÖŸàÿ¨ŸàÿØ€å ⁄©€åŸÅ ŸæŸàŸÑ ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™", show_alert=True)
            return
        
        await query.message.edit_text("‚è≥ ÿØÿ± ÿ≠ÿßŸÑ ÿ≥ÿßÿÆÿ™ ÿ≥ÿ±Ÿà€åÿ≥...")
        
        # ⁄©ÿ≥ÿ± ŸÖŸàÿ¨ŸàÿØ€å
        update_user_balance(user_id, -pkg['price'], f"ÿÆÿ±€åÿØ Ÿæ⁄©€åÿ¨ {pkg['name']}")
        
        # ÿ≥ÿßÿÆÿ™ ⁄©ÿßÿ±ÿ®ÿ± ÿØÿ± Marzban
        marzban_username = generate_username(user_id, query.from_user.username, query.from_user.first_name)
        result = await marzban.create_user(marzban_username, pkg['traffic'], pkg['duration'])
        
        if result:
            expire_date = datetime.now() + timedelta(days=pkg['duration'])
            create_order(user_id, pkg_id, marzban_username, pkg['price'], expire_date, result['subscription_url'])
            
            text = f"‚úÖ <b>ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ŸÅÿπÿßŸÑ ÿ¥ÿØ!</b>\n\n"
            text += f"üì¶ Ÿæ⁄©€åÿ¨: {pkg['name']}\n"
            text += f"üë§ ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å: <code>{marzban_username}</code>\n"
            text += f"üìä ÿ≠ÿ¨ŸÖ: {format_bytes(pkg['traffic'])}\n"
            text += f"üìÖ ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß: {format_date(expire_date)}\n\n"
            text += f"üîó ŸÑ€åŸÜ⁄© ÿßÿ™ÿµÿßŸÑ:\n<code>{result['subscription_url']}</code>\n\n"
            text += "ÿ®ÿ±ÿß€å ÿßÿ™ÿµÿßŸÑ ÿßÿ≤ ÿß€åŸÜ ŸÑ€åŸÜ⁄© ÿØÿ± ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ V2Ray ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ."
            
            keyboard = [[InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà", callback_data="back_to_main")]]
            await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
            
            log_admin_action(0, 'purchase', user_id, f"ÿÆÿ±€åÿØ {pkg['name']} ÿßÿ≤ ⁄©€åŸÅ ŸæŸàŸÑ")
        else:
            # ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ŸÖŸàÿ¨ŸàÿØ€å
            update_user_balance(user_id, pkg['price'], "ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ Ÿàÿ¨Ÿá ÿ®Ÿá ÿØŸÑ€åŸÑ ÿÆÿ∑ÿß")
            await query.message.edit_text("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ≥ÿßÿÆÿ™ ÿ≥ÿ±Ÿà€åÿ≥. ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß ÿ®ÿßÿ≤⁄Øÿ±ÿØÿßŸÜÿØŸá ÿ¥ÿØ.\n\nŸÑÿ∑ŸÅÿßŸã ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.")

    elif data.startswith("buy_online_"):
        pkg_id = data[11:]
        pkg = PACKAGES.get(pkg_id)

        if not pkg or not pkg.get('active', True):
            await query.answer("‚ùå ÿß€åŸÜ Ÿæ⁄©€åÿ¨ ÿ∫€åÿ±ŸÅÿπÿßŸÑ ÿßÿ≥ÿ™", show_alert=True)
            return

            await query.message.edit_text("‚è≥ ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜÿ™ŸÇÿßŸÑ ÿ®Ÿá ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™...")

    # ‚úÖ ⁄Ü⁄© ⁄©ÿ±ÿØŸÜ Ÿàÿ¨ŸàÿØ URL
        
        merchant_id = get_setting('zarinpal_merchant', ZARINPAL_MERCHANT)
        zp = ZarinPal(merchant_id, ZARINPAL_SANDBOX)

    # ‚úÖ callback URL ÿµÿ≠€åÿ≠
        callback_url = f"{LOCALTUNNEL_URL}/zarinpal/verify"
    
        logger.info(f"üì§ Payment request: pkg={pkg_id}, callback={callback_url}")

        result = zp.request_payment(
            amount=pkg['price'],
            description=f"ÿÆÿ±€åÿØ Ÿæ⁄©€åÿ¨ {pkg['name']}",
            callback_url=callback_url,
            mobile=db_user.get('phone')
        )

        if result.get('data', {}).get('code') == 100:
            authority = result['data']['authority']
            payment_url = zp.get_payment_url(authority)

        # ÿ∞ÿÆ€åÿ±Ÿá ÿßÿ∑ŸÑÿßÿπÿßÿ™
            save_payment(
                user_id=user_id,
                amount=pkg['price'],
                authority=authority,
                package_id=pkg_id,
                payment_type='package'
            )

            text = f"üí≥ <b>Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ</b>\n\n"
            text += f"üì¶ Ÿæ⁄©€åÿ¨: {pkg['name']}\n"
            text += f"üí∞ ŸÖÿ®ŸÑÿ∫: {format_price(pkg['price'])}\n\n"
            text += f"üîó ÿ±Ÿà€å ÿØ⁄©ŸÖŸá ÿ≤€åÿ± ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ:\n\n"
            text += f"‚úÖ Ÿæÿ≥ ÿßÿ≤ Ÿæÿ±ÿØÿßÿÆÿ™ÿå ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ŸÅÿπÿßŸÑ ŸÖ€å‚Äåÿ¥ŸàÿØ."

            keyboard = [
                [InlineKeyboardButton("üí≥ Ÿæÿ±ÿØÿßÿÆÿ™", url=payment_url)],
                [InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="buy_service")]
            ]

            await query.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )

            log_admin_action(0, 'payment_request', user_id, f"ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ Ÿæÿ±ÿØÿßÿÆÿ™ {format_price(pkg['price'])}")
        else:
            error_code = result.get('data', {}).get('code', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
            logger.error(f"‚ùå ZarinPal request failed: code={error_code}")
        
            await query.message.edit_text(
                f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™!\n\n"
                f"⁄©ÿØ ÿÆÿ∑ÿß: {error_code}\n\n"
                f"ŸÑÿ∑ŸÅÿßŸã ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ."
            )   
    # ==================== MY SERVICES ====================
    elif data == "my_services":
        orders = get_user_orders(user_id)
        active_orders = [o for o in orders if o['status'] == 'active']
        
        if not active_orders:
            text = "‚ùå ÿ¥ŸÖÿß Ÿá€å⁄Ü ÿ≥ÿ±Ÿà€åÿ≥ ŸÅÿπÿßŸÑ€å ŸÜÿØÿßÿ±€åÿØ.\n\nÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥ ÿ¨ÿØ€åÿØ ÿßÿ≤ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ."
            keyboard = [[InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="buy_service")],
                       [InlineKeyboardButton("üè† ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="back_to_main")]]
            await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            text = "üìä <b>ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ ÿ¥ŸÖÿß:</b>\n\n"
            keyboard = []
            
            for order in active_orders[:10]:
                pkg = PACKAGES.get(order['package_id'], {})
                text += f"üîπ {pkg.get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}\n"
                text += f"   üìÖ ÿßŸÜŸÇÿ∂ÿß: {format_date(order['expires_at'])}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üìä {pkg.get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}", 
                    callback_data=f"service_detail_{order['id']}"
                )])
            
            keyboard.append([InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")])
            await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data.startswith("service_detail_"):
        order_id = int(data[15:])
        orders = get_user_orders(user_id)
        order = next((o for o in orders if o['id'] == order_id), None)
        
        if not order:
            await query.answer("‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ", show_alert=True)
            return
        
        # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿßÿ≤ Marzban
        usage = await marzban.get_user_usage(order['marzban_username'])
        
        pkg = PACKAGES.get(order['package_id'], {})
        text = f"üìä <b>ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿ≥ÿ±Ÿà€åÿ≥</b>\n\n"
        text += f"üì¶ Ÿæ⁄©€åÿ¨: {pkg.get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}\n"
        text += f"üë§ ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å: <code>{order['marzban_username']}</code>\n"
        
        if usage:
            text += f"üìä ŸÖÿµÿ±ŸÅ ÿ¥ÿØŸá: {usage['used_gb']} GB ÿßÿ≤ {usage['total_gb']} GB\n"
            text += f"üìä ÿ®ÿßŸÇ€åŸÖÿßŸÜÿØŸá: {usage['remaining_gb']} GB\n"
            text += f"üìÖ ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß: {format_date(usage['expire'])}\n"
            text += f"üîå Ÿàÿ∂ÿπ€åÿ™: {'‚úÖ ŸÅÿπÿßŸÑ' if usage['status'] == 'active' else '‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ'}\n"
        
        text += f"\nüîó ŸÑ€åŸÜ⁄© ÿßÿ™ÿµÿßŸÑ:\n<code>{order['subscription_url']}</code>"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ ÿ™ŸÖÿØ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data=f"renew_{order_id}")],
            [InlineKeyboardButton("üóë ÿ≠ÿ∞ŸÅ ÿ≥ÿ±Ÿà€åÿ≥", callback_data=f"delete_service_{order_id}")],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="my_services")]
        ]
        
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data.startswith("renew_"):
        order_id = int(data[6:])
        # TODO: Ÿæ€åÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å ÿ™ŸÖÿØ€åÿØ
        await query.answer("‚ö†Ô∏è ÿ™ŸÖÿØ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥ ÿ®Ÿá ÿ≤ŸàÿØ€å ŸÅÿπÿßŸÑ ŸÖ€å‚Äåÿ¥ŸàÿØ", show_alert=True)

    elif data.startswith("delete_service_"):
        order_id = int(data[15:])
        keyboard = [
            [InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå ÿ≠ÿ∞ŸÅ ÿ¥ŸàÿØ", callback_data=f"confirm_delete_{order_id}")],
            [InlineKeyboardButton("‚ùå ÿÆ€åÿ±", callback_data=f"service_detail_{order_id}")]
        ]
        await safe_edit_message(query, "‚ö†Ô∏è ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿß€åŸÜ ÿ≥ÿ±Ÿà€åÿ≥ ÿ±ÿß ÿ≠ÿ∞ŸÅ ⁄©ŸÜ€åÿØÿü", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("confirm_delete_"):
        order_id = int(data[15:])
        orders = get_user_orders(user_id)
        order = next((o for o in orders if o['id'] == order_id), None)

        if order:
            success = await marzban.delete_user(order['marzban_username'])
        
            if success:
                update_order_status(order_id, 'deleted')
                await query.message.edit_text("‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.")

            # üè† ŸÜŸÖÿß€åÿ¥ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿ®ÿπÿØ ÿßÿ≤ ÿ≠ÿ∞ŸÅ
                text = "üè†ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± €å⁄©€å ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ /n ‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.üëá"
                keyboard = [[InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]]
                await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
            else:
                await query.message.edit_text("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ≠ÿ∞ŸÅ ÿ≥ÿ±Ÿà€åÿ≥. ŸÑÿ∑ŸÅÿßŸã ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.")
        else:
            await query.message.edit_text("‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± Ÿæ€åÿØÿß ŸÜÿ¥ÿØ €åÿß ŸÇÿ®ŸÑÿßŸã ÿ≠ÿ∞ŸÅ ÿ¥ÿØŸá ÿßÿ≥ÿ™.")

            

    # ==================== USER PROFILE ====================
    elif data == "user_profile":
        orders = get_user_orders(user_id)
        active_count = len([o for o in orders if o['status'] == 'active'])
        
        text = f"üë§ <b>Ÿæÿ±ŸàŸÅÿß€åŸÑ ⁄©ÿßÿ±ÿ®ÿ±€å</b>\n\n"
        text += f"üÜî ÿ¥ŸÜÿßÿ≥Ÿá: <code>{user_id}</code>\n"
        text += f"üë§ ŸÜÿßŸÖ: {db_user['first_name']}\n"
        if db_user['username']:
            text += f"üîó ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å: @{db_user['username']}\n"
        text += f"üí∞ ŸÖŸàÿ¨ŸàÿØ€å: {format_price(db_user['balance'])}\n"
        text += f"üìä ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ: {active_count}\n"
        text += f"üíµ ⁄©ŸÑ ÿÆÿ±€åÿØŸáÿß: {format_price(db_user['total_purchased'])}\n"
        text += f"üìÖ ÿπÿ∂Ÿà€åÿ™: {format_date(db_user['created_at'])}\n"
        
        keyboard = [[InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]]
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    # ==================== WALLET ====================
    elif data == "wallet":
        transactions = get_transactions(user_id, 10)
        
        text = f"üí∞ <b>⁄©€åŸÅ ŸæŸàŸÑ</b>\n\n"
        text += f"üíµ ŸÖŸàÿ¨ŸàÿØ€å ŸÅÿπŸÑ€å: {format_price(db_user['balance'])}\n\n"
        text += "<b>ÿ¢ÿÆÿ±€åŸÜ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß:</b>\n"
        
        for t in transactions:
            sign = "+" if t['amount'] > 0 else ""
            text += f"‚Ä¢ {sign}{format_price(t['amount'])} - {t['description'][:30]}\n"
            text += f"  {format_date(t['created_at'])}\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å", callback_data="charge_wallet")],
            [InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]
        ]
        
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data == "charge_wallet":
        text = "üí∞ <b>ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ⁄©€åŸÅ ŸæŸàŸÑ</b>\n\n"
        text += "ŸÑÿ∑ŸÅÿßŸã ŸÖÿ®ŸÑÿ∫ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿ®Ÿá ÿ™ŸàŸÖÿßŸÜ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n\n"
        text += "ŸÖÿ´ÿßŸÑ: 50000"
        
        keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="wallet")]]
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
        context.user_data['state'] = WAITING_WALLET_CHARGE_AMOUNT

    # ==================== REFERRAL ====================
    elif data == "referral":
        referral_code = db_user['referral_code']
        bot_username = context.bot.username
        referral_link = f"https://t.me/{bot_username}?start={referral_code}"
        
        invited_count = get_invited_users_count(user_id)
        inviter_reward = int(get_setting('referral_inviter_reward', '10000'))
        total_earned = invited_count * inviter_reward
        
        text = f"üéÅ <b>ÿØÿπŸàÿ™ ÿØŸàÿ≥ÿ™ÿßŸÜ</b>\n\n"
        text += f"üîó ŸÑ€åŸÜ⁄© ÿßÿÆÿ™ÿµÿßÿµ€å ÿ¥ŸÖÿß:\n<code>{referral_link}</code>\n\n"
        text += f"üí∞ ŸæÿßÿØÿßÿ¥ Ÿáÿ± ÿØÿπŸàÿ™: {format_price(inviter_reward)}\n"
        text += f"üë• ÿ™ÿπÿØÿßÿØ ÿØÿπŸàÿ™‚Äåÿ¥ÿØ⁄ØÿßŸÜ: {invited_count} ŸÜŸÅÿ±\n"
        text += f"üíµ ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ ÿßÿ≤ ÿØÿπŸàÿ™: {format_price(total_earned)}\n\n"
        text += "ÿØŸàÿ≥ÿ™ÿßŸÜ ÿÆŸàÿØ ÿ±ÿß ÿØÿπŸàÿ™ ⁄©ŸÜ€åÿØ Ÿà ÿ®ÿ±ÿß€å Ÿáÿ± ŸÜŸÅÿ± ŸæÿßÿØÿßÿ¥ ÿØÿ±€åÿßŸÅÿ™ ⁄©ŸÜ€åÿØ! üéâ"
        
        keyboard = [[InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]]
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    # ==================== HELP ====================
    elif data == "help":
        text = "‚ùì <b>ÿ±ÿßŸáŸÜŸÖÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá</b>\n\n"
        text += "1Ô∏è‚É£ ÿßÿ≤ ŸÖŸÜŸà€å ¬´ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥¬ª Ÿæ⁄©€åÿ¨ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ\n"
        text += "2Ô∏è‚É£ ÿ®ÿß ⁄©€åŸÅ ŸæŸàŸÑ €åÿß Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ ÿÆÿ±€åÿØÿßÿ±€å ⁄©ŸÜ€åÿØ\n"
        text += "3Ô∏è‚É£ ŸÑ€åŸÜ⁄© ÿßÿ™ÿµÿßŸÑ ÿ±ÿß ⁄©Ÿæ€å ⁄©ÿ±ÿØŸá Ÿà ÿØÿ± ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ V2Ray Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ\n\n"
        text += "üì± ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ‚ÄåŸáÿß€å Ÿæ€åÿ¥ŸÜŸáÿßÿØ€å:\n"
        text += "‚Ä¢ Android: v2rayNG\n"
        text += "‚Ä¢ iOS: Fair VPN, Shadowrocket\n"
        text += "‚Ä¢ Windows: v2rayN\n\n"
        text += "ÿ®ÿ±ÿß€å ŸÖÿ¥⁄©ŸÑÿßÿ™ ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ."
        
        keyboard = [[InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]]
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    # ==================== SUPPORT ====================
    elif data == "support":
        text = "üìû <b>Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å</b>\n\n"
        text += "ÿ®ÿ±ÿß€å ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ ÿ±ÿßŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:\n\n"
        text += "üì± ÿ™ŸÑ⁄Øÿ±ÿßŸÖ: @boleyla1\n"
        text += "üìß ÿß€åŸÖ€åŸÑ: boleyla.mehrshad1@gmail.com\n\n"
        text += "‚è∞ ÿ≥ÿßÿπÿ™ Ÿæÿßÿ≥ÿÆ⁄ØŸà€å€å: 9 ÿµÿ®ÿ≠ ÿ™ÿß 12 ÿ¥ÿ®"
        
        keyboard = [[InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]]
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    # ==================== ADMIN PANEL ====================
    elif data == "admin_panel":
            await show_admin_panel(query, context)

    elif data == "admin_dashboard":
        await show_admin_dashboard(query)

    elif data == "admin_users":
        await show_admin_users_menu(query, context)

    elif data == "admin_services":
        await show_admin_services_menu(query)

    elif data == "admin_financial":
        await show_admin_financial_menu(query)

    elif data == "admin_referral":
        await show_admin_referral_menu(query)

    elif data == "admin_settings":
        await show_admin_settings_menu(query)
     
    elif data == "admin_services_active":
        await show_admin_services_list(query, status='active')
    
    elif data == "admin_services_expired":
        await show_admin_services_list(query, status='expired')
    
    elif data == "admin_services_stats":
        await show_admin_services_stats(query)
    
    elif data.startswith("admin_services_") and "_page_" in data:
        # ŸÖÿ´ÿßŸÑ: admin_services_active_page_1
        parts = data.split("_")
        status = parts[2]
        page = int(parts[4])
        await show_admin_services_list(query, status=status, page=page)
    
    elif data.startswith("admin_service_detail_"):
        order_id = int(data.split("_")[-1])
        await show_admin_service_detail(query, order_id, context)
    
    elif data == "admin_services_search":
        context.user_data['state'] = WAITING_SERVICE_SEARCH
        await query.message.edit_text(
            "üîç ŸÑÿ∑ŸÅÿßŸã ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å Marzban €åÿß ÿ¥ŸÜÿßÿ≥Ÿá ÿ≥ŸÅÿßÿ±ÿ¥ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:"
        )
    
    # ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≠ÿ¨ŸÖ
    elif data.startswith("admin_service_addtraffic_"):
        order_id = int(data.split("_")[-1])
        context.user_data['state'] = WAITING_TRAFFIC_AMOUNT
        context.user_data['target_order_id'] = order_id
        
        keyboard = [
            [InlineKeyboardButton("10 GB", callback_data=f"admin_addtraffic_{order_id}_10")],
            [InlineKeyboardButton("20 GB", callback_data=f"admin_addtraffic_{order_id}_20")],
            [InlineKeyboardButton("50 GB", callback_data=f"admin_addtraffic_{order_id}_50")],
            [InlineKeyboardButton("100 GB", callback_data=f"admin_addtraffic_{order_id}_100")],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data=f"admin_service_detail_{order_id}")]
        ]
        
        await safe_edit_message(
            query,
            "üì¶ ⁄ÜŸá ŸÖŸÇÿØÿßÿ± ÿ≠ÿ¨ŸÖ ÿßÿ∂ÿßŸÅŸá ÿ¥ŸàÿØÿü\n\n€åÿß ÿπÿØÿØ ÿØŸÑÿÆŸàÿßŸá (ÿ®Ÿá GB) ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data.startswith("admin_addtraffic_"):
        # ŸÖÿ´ÿßŸÑ: admin_addtraffic_123_20
        parts = data.split("_")
        order_id = int(parts[2])
        gb_amount = int(parts[3])
        
        await process_add_traffic(query, order_id, gb_amount, context)
    
    # ÿ™ŸÖÿØ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥
    elif data.startswith("admin_service_extend_"):
        order_id = int(data.split("_")[-1])
        context.user_data['state'] = WAITING_EXTEND_DAYS
        context.user_data['target_order_id'] = order_id
        
        keyboard = [
            [InlineKeyboardButton("7 ÿ±Ÿàÿ≤", callback_data=f"admin_extend_{order_id}_7")],
            [InlineKeyboardButton("15 ÿ±Ÿàÿ≤", callback_data=f"admin_extend_{order_id}_15")],
            [InlineKeyboardButton("30 ÿ±Ÿàÿ≤", callback_data=f"admin_extend_{order_id}_30")],
            [InlineKeyboardButton("60 ÿ±Ÿàÿ≤", callback_data=f"admin_extend_{order_id}_60")],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data=f"admin_service_detail_{order_id}")]
        ]
        
        await safe_edit_message(
            query,
            "‚è∞ ⁄ÜŸÜÿØ ÿ±Ÿàÿ≤ ÿ™ŸÖÿØ€åÿØ ÿ¥ŸàÿØÿü\n\n€åÿß ÿ™ÿπÿØÿßÿØ ÿ±Ÿàÿ≤ ÿØŸÑÿÆŸàÿßŸá ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data.startswith("admin_extend_"):
        # ŸÖÿ´ÿßŸÑ: admin_extend_123_30
        parts = data.split("_")
        order_id = int(parts[2])
        days = int(parts[3])
        
        await process_extend_service(query, order_id, days, context)
    
    # ÿ∫€åÿ±ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ
    elif data.startswith("admin_service_disable_"):
        order_id = int(data.split("_")[-1])
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå ÿ∫€åÿ±ŸÅÿπÿßŸÑ ÿ¥ŸàÿØ", callback_data=f"admin_confirm_disable_{order_id}")],
            [InlineKeyboardButton("‚ùå ÿÆ€åÿ±", callback_data=f"admin_service_detail_{order_id}")]
        ]
        
        await safe_edit_message(
            query,
            "‚ö†Ô∏è ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿß€åŸÜ ÿ≥ÿ±Ÿà€åÿ≥ ÿ±ÿß ÿ∫€åÿ±ŸÅÿπÿßŸÑ ⁄©ŸÜ€åÿØÿü",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data.startswith("admin_confirm_disable_"):
        order_id = int(data.split("_")[-1])
        await process_disable_service(query, order_id, context)
    
    # ÿ≠ÿ∞ŸÅ ÿ≥ÿ±Ÿà€åÿ≥
    elif data.startswith("admin_service_delete_"):
        order_id = int(data.split("_")[-1])
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå ÿ≠ÿ∞ŸÅ ÿ¥ŸàÿØ", callback_data=f"admin_confirm_servdel_{order_id}")],
            [InlineKeyboardButton("‚ùå ÿÆ€åÿ±", callback_data=f"admin_service_detail_{order_id}")]
        ]
        
        await safe_edit_message(
            query,
            "‚ö†Ô∏è <b>Ÿáÿ¥ÿØÿßÿ±!</b>\n\nÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØÿü ÿß€åŸÜ ÿπŸÖŸÑ ŸÇÿßÿ®ŸÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ŸÜ€åÿ≥ÿ™!",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    elif data.startswith("admin_confirm_servdel_"):
        order_id = int(data.split("_")[-1])
        await process_delete_service_admin(query, order_id, context)
    
    # ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ŸÖÿ¨ÿØÿØ
    elif data.startswith("admin_service_reactivate_"):
        order_id = int(data.split("_")[-1])
        await process_reactivate_service(query, order_id, context)
        # ================== ÿ®ÿßÿ≤⁄Øÿ¥ÿ™‚ÄåŸáÿß ==================
    elif data.startswith("admin_back_"):
        section = data.replace("admin_back_", "")
        if section == "panel":
            await show_admin_panel(query, context)
        elif section == "users":
            await show_admin_users_menu(query, context)
        elif section == "services":
                await show_admin_services_menu(query)
        elif section == "financial":
                await show_admin_financial_menu(query)
        elif section == "referral":
                await show_admin_referral_menu(query)
        elif section == "settings":
            await show_admin_settings_menu(query)
            
            

        # ================== ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ==================
    elif data == "admin_user_search":
        context.user_data['state'] = WAITING_USER_SEARCH
        await query.message.edit_text("üîç ŸÑÿ∑ŸÅÿßŸã ŸÜÿßŸÖ €åÿß ÿ¢€åÿØ€å ⁄©ÿßÿ±ÿ®ÿ± ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ:")

    elif data == "admin_user_list":
        users = get_all_users(limit=10)
        text = "üìã <b>ŸÑ€åÿ≥ÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿßÿÆ€åÿ±:</b>\n\n"
        keyboard = []
        for u in users:
            text += f"üë§ {u['first_name']} (@{u['username'] or 'ÿ®ÿØŸàŸÜ ŸÜÿßŸÖ'})\nüÜî {u['user_id']}\n\n"
            keyboard.append([InlineKeyboardButton(
                f"üë§ {u['first_name']} - {u['user_id']}",
                callback_data=f"admin_view_user_{u['user_id']}"
            )])
        keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_users")])
        await safe_edit_message(query, text, InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data.startswith("admin_view_user_"):
        user_id = int(data.split("_")[-1])
        user = get_user(user_id)
        if not user:
            await query.message.edit_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
            return
        text = f"üë§ <b>{user['first_name']}</b>\n"
        text += f"üÜî {user['user_id']}\n"
        text += f"üí∞ ŸÖŸàÿ¨ŸàÿØ€å: {format_price(user['balance'])}\n"
        text += f"üìÖ ÿ™ÿßÿ±€åÿÆ ÿπÿ∂Ÿà€åÿ™: {user['created_at']}\n"
        keyboard = [
            [InlineKeyboardButton("üí∞ ÿ™ÿ∫€å€åÿ± ŸÖŸàÿ¨ŸàÿØ€å", callback_data=f"admin_edit_balance_{user_id}")],
            [InlineKeyboardButton("üóë ÿ≠ÿ∞ŸÅ ⁄©ÿßÿ±ÿ®ÿ±", callback_data=f"admin_delete_user_{user_id}")],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_users")]
        ]
        await safe_edit_message(query, text, InlineKeyboardMarkup(keyboard), parse_mode='HTML')

        # ================== ÿ≥ÿß€åÿ± ==================
    elif data == "admin_broadcast":
        context.user_data['state'] = WAITING_BROADCAST_MESSAGE
        await query.message.edit_text("üì¢ ŸÑÿ∑ŸÅÿßŸã Ÿæ€åÿßŸÖ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ ÿ™ÿß ÿ®ÿ±ÿß€å ŸáŸÖŸá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ŸàÿØ:")
        # ==================== ADMIN USER TAGS & BULK BALANCE ====================
    
    elif data == "admin_bulk_balance":
        await show_admin_bulk_balance_menu(query, context)
    
    elif data.startswith("admin_bulkbal_tag_"):
        tag = data.replace("admin_bulkbal_tag_", "")
        context.user_data['bulk_balance_tag'] = tag
        context.user_data['state'] = WAITING_BULK_BALANCE_AMOUNT
        
        user_count = get_users_count(tag=tag if tag != 'all' else None)
        
        await query.message.edit_text(
            f"üí∞ <b>ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ⁄Øÿ±ŸàŸá€å</b>\n\n"
            f"üè∑ ÿ™⁄Ø: <code>{tag}</code>\n"
            f"üë• ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {user_count}\n\n"
            f"üíµ ŸÖÿ®ŸÑÿ∫ ÿßŸÅÿ≤ÿß€åÿ¥ ÿ±ÿß ÿ®Ÿá ÿ™ŸàŸÖÿßŸÜ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:",
            parse_mode='HTML'
        )
    
    elif data == "admin_user_tags":
        await show_admin_user_tags_stats(query)
    
    elif data == "admin_create_tag":
        await show_create_tag_menu(query, context)
    
    elif data == "admin_edit_tags":
        await show_edit_tags_menu(query)
    
    elif data.startswith("admin_edittag_"):
        tag = data.replace("admin_edittag_", "")
        await show_tag_edit_options(query, tag)
    
    elif data.startswith("admin_renametag_"):
        tag = data.replace("admin_renametag_", "")
        context.user_data['state'] = WAITING_USER_TAG
        context.user_data['renaming_tag'] = tag
        
        await query.message.edit_text(
            f"‚úèÔ∏è ŸÜÿßŸÖ ÿ¨ÿØ€åÿØ ÿ®ÿ±ÿß€å ÿ™⁄Ø <code>{tag}</code> ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:",
            parse_mode='HTML'
        )
    
    elif data.startswith("admin_deletetag_"):
        tag = data.replace("admin_deletetag_", "")
        keyboard = [
            [InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå ÿ≠ÿ∞ŸÅ ÿ¥ŸàÿØ", callback_data=f"admin_confirmdeltag_{tag}")],
            [InlineKeyboardButton("‚ùå ÿÆ€åÿ±", callback_data=f"admin_edittag_{tag}")]
        ]
        
        user_count = get_users_count(tag=tag)
        
        await safe_edit_message(
            query,
            f"‚ö†Ô∏è <b>Ÿáÿ¥ÿØÿßÿ±!</b>\n\n"
            f"ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿ™⁄Ø <code>{tag}</code> ÿ±ÿß ÿ≠ÿ∞ŸÅ ⁄©ŸÜ€åÿØÿü\n\n"
            f"üë• {user_count} ⁄©ÿßÿ±ÿ®ÿ± ÿ®Ÿá ÿ™⁄Ø <code>regular</code> ÿ™ÿ®ÿØ€åŸÑ ŸÖ€å‚Äåÿ¥ŸàŸÜÿØ.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    elif data.startswith("admin_confirmdeltag_"):
        tag = data.replace("admin_confirmdeltag_", "")
        await process_delete_tag(query, tag)



    # ÿØÿ± callback_query_handler ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ:

    elif data == "admin_search_coupon":
        await start_search_coupon(query, context)

    elif data == "admin_coupon_stats":
        await show_coupon_stats(query)

    elif data.startswith("admin_coupon_detail_"):
        coupon_id = int(data.split("_")[-1])
        await show_coupon_detail(query, coupon_id)

    elif data.startswith("admin_coupon_fullstats_"):
        coupon_id = int(data.split("_")[-1])
        await show_coupon_full_stats(query, coupon_id)

    elif data.startswith("admin_coupon_enable_"):
        coupon_id = int(data.split("_")[-1])
        await toggle_coupon_status(query, coupon_id, enable=True)

    elif data.startswith("admin_coupon_disable_"):
        coupon_id = int(data.split("_")[-1])
        await toggle_coupon_status(query, coupon_id, enable=False)

    elif data.startswith("admin_coupon_delete_"):
        coupon_id = int(data.split("_")[-1])
    
    # ÿ™ÿß€å€åÿØ ÿ≠ÿ∞ŸÅ
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå ÿ≠ÿ∞ŸÅ ÿ¥ŸàÿØ", callback_data=f"admin_coupon_delete_confirm_{coupon_id}"),
                InlineKeyboardButton("‚ùå ÿßŸÜÿµÿ±ÿßŸÅ", callback_data=f"admin_coupon_detail_{coupon_id}")
            ]
        ]

        await query.message.edit_text(
            "‚ö†Ô∏è <b>ÿ™ÿß€å€åÿØ ÿ≠ÿ∞ŸÅ ⁄©ŸàŸæŸÜ</b>\n\n"
            "ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØÿü ÿß€åŸÜ ÿπŸÖŸÑ€åÿßÿ™ ÿ∫€åÿ±ŸÇÿßÿ®ŸÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿßÿ≥ÿ™!",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    elif data.startswith("admin_coupon_delete_confirm_"):
        coupon_id = int(data.split("_")[-1])
        await delete_coupon(query, coupon_id)




    # ==================== ADMIN EDIT BALANCE ====================
    elif data.startswith("admin_edit_balance_"):
        target_user_id = int(data.split("_")[-1])
        target_user = get_user(target_user_id)
    
        if not target_user:
            await query.message.edit_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
            return
    
        context.user_data['state'] = WAITING_BALANCE_AMOUNT
        context.user_data['target_user_id'] = target_user_id
    
        text = f"üí∞ <b>ÿ™ÿ∫€å€åÿ± ŸÖŸàÿ¨ŸàÿØ€å</b>\n\n"
        text += f"üë§ ⁄©ÿßÿ±ÿ®ÿ±: {target_user['first_name']}\n"
        text += f"üíµ ŸÖŸàÿ¨ŸàÿØ€å ŸÅÿπŸÑ€å: {format_price(target_user['balance'])}\n\n"
        text += "ŸÑÿ∑ŸÅÿßŸã ŸÖÿ®ŸÑÿ∫ ÿ™ÿ∫€å€åÿ± ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n\n"
        text += "‚Ä¢ ÿπÿØÿØ ŸÖÿ´ÿ®ÿ™: ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å (ŸÖÿ´ÿßŸÑ: 50000)\n"
        text += "‚Ä¢ ÿπÿØÿØ ŸÖŸÜŸÅ€å: ⁄©ÿßŸáÿ¥ ŸÖŸàÿ¨ŸàÿØ€å (ŸÖÿ´ÿßŸÑ: -20000)"
    
        keyboard = [[InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data=f"admin_view_user_{target_user_id}")]]
    
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ==================== ADMIN DELETE USER ====================
    elif data.startswith("admin_delete_user_"):
        target_user_id = int(data.split("_")[-1])
        target_user = get_user(target_user_id)
    
        if not target_user:
            await query.message.edit_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
            return
    
    # ÿ¥ŸÖÿßÿ±ÿ¥ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ ⁄©ÿßÿ±ÿ®ÿ±
        active_orders = get_user_orders(target_user_id)
        active_count = len([o for o in active_orders if o['status'] == 'active'])
    
        text = f"‚ö†Ô∏è <b>ÿ≠ÿ∞ŸÅ ⁄©ÿßÿ±ÿ®ÿ±</b>\n\n"
        text += f"üë§ ŸÜÿßŸÖ: {target_user['first_name']}\n"
        text += f"üÜî ÿ¢€åÿØ€å: <code>{target_user_id}</code>\n"
        text += f"üí∞ ŸÖŸàÿ¨ŸàÿØ€å: {format_price(target_user['balance'])}\n"
        text += f"üìä ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ: {active_count}\n\n"
    
        if active_count > 0:
            text += "‚ö†Ô∏è <b>Ÿáÿ¥ÿØÿßÿ±:</b> ÿß€åŸÜ ⁄©ÿßÿ±ÿ®ÿ± ÿ≥ÿ±Ÿà€åÿ≥ ŸÅÿπÿßŸÑ ÿØÿßÿ±ÿØ!\n\n"
    
        text += "‚ùå <b>ÿß€åŸÜ ÿπŸÖŸÑ ŸÇÿßÿ®ŸÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ŸÜ€åÿ≥ÿ™!</b>\n\n"
        text += "ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØÿü"
    
        keyboard = [
            [InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå ÿ≠ÿ∞ŸÅ ÿ¥ŸàÿØ", callback_data=f"admin_confirm_delete_user_{target_user_id}")],
            [InlineKeyboardButton("‚ùå ÿÆ€åÿ±", callback_data=f"admin_view_user_{target_user_id}")]
        ]
    
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ==================== ADMIN CONFIRM DELETE USER ====================
    elif data.startswith("admin_confirm_delete_user_"):
        target_user_id = int(data.split("_")[-1])
        target_user = get_user(target_user_id)
    
        if not target_user:
            await query.message.edit_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
            return

        try:
        # ÿ≠ÿ∞ŸÅ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ⁄©ÿßÿ±ÿ®ÿ± ÿßÿ≤ Marzban
            orders = get_user_orders(target_user_id)
            deleted_services = 0
        
            for order in orders:
                if order['status'] == 'active':
                    marzban_username = order.get('marzban_username')
                    if marzban_username:
                        success = await marzban.delete_user(marzban_username)
                        if success:
                            deleted_services += 1
        
        # ÿ≠ÿ∞ŸÅ ÿßÿ≤ ÿØ€åÿ™ÿßÿ®€åÿ≥ (CASCADE ÿÆŸàÿØ⁄©ÿßÿ± orders Ÿà transactions ÿ±ÿß ÿ≠ÿ∞ŸÅ ŸÖ€å‚Äå⁄©ŸÜÿØ)
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM users WHERE user_id = %s", (target_user_id,))
            conn.commit()
            cursor.close()
            conn.close()
        
        # ÿ´ÿ®ÿ™ ŸÑÿß⁄Ø
            log_admin_action(
                query.from_user.id,
                'delete_user',
                target_user_id,
                f"ÿ≠ÿ∞ŸÅ ⁄©ÿßÿ±ÿ®ÿ± {target_user['first_name']} ÿ®ÿß {deleted_services} ÿ≥ÿ±Ÿà€åÿ≥ ŸÅÿπÿßŸÑ"
                )
        
            text = f"‚úÖ <b>⁄©ÿßÿ±ÿ®ÿ± ÿ≠ÿ∞ŸÅ ÿ¥ÿØ</b>\n\n"
            text += f"üë§ {target_user['first_name']}\n"
            text += f"üÜî {target_user_id}\n"
            text += f"üóë ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ÿ≠ÿ∞ŸÅ ÿ¥ÿØŸá: {deleted_services}"
        
            keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_users")]]
        
            await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        
        except Exception as e:
            logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ÿ≠ÿ∞ŸÅ ⁄©ÿßÿ±ÿ®ÿ± {target_user_id}: {e}")
            await query.message.edit_text(
                f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ≠ÿ∞ŸÅ ⁄©ÿßÿ±ÿ®ÿ±!\n\n"
                f"ŸÑÿ∑ŸÅÿßŸã ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.\n\n"
                f"ÿÆÿ∑ÿß: {str(e)[:100]}"
        )
        else:
            await query.message.reply_text(f"‚ùì ÿØ⁄©ŸÖŸá ŸÜÿßÿ¥ŸÜÿßÿÆÿ™Ÿá: {data}")
        # ==================== ADMIN TOP REFERRERS ====================
    elif data == "admin_top_referrers":
            conn = db.get_connection()
            cursor = conn.cursor(dictionary=True)
    
    # ÿ®ÿ±ÿ™ÿ±€åŸÜ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØ⁄ØÿßŸÜ
            cursor.execute("""
        SELECT 
            u.user_id,
            u.first_name,
            u.username,
            COUNT(r.user_id) as referral_count,
            u.total_purchased
        FROM users u
        LEFT JOIN users r ON r.referred_by = u.user_id
        GROUP BY u.user_id
        HAVING referral_count > 0
        ORDER BY referral_count DESC
        LIMIT 20
    """)
    
            top_referrers = cursor.fetchall()
            cursor.close()
            conn.close()
    
            if not top_referrers:
                text = "üìä ŸáŸÜŸàÿ≤ Ÿá€å⁄Ü ÿØÿπŸàÿ™€å ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™."
            else:
                text = "üèÜ <b>ÿ®ÿ±ÿ™ÿ±€åŸÜ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØ⁄ØÿßŸÜ</b>\n\n"
        
            inviter_reward = int(get_setting('referral_inviter_reward', '10000'))
        
            for idx, ref in enumerate(top_referrers[:10], 1):
                medal = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}Ô∏è‚É£"
                username_text = f"@{ref['username']}" if ref['username'] else "ÿ®ÿØŸàŸÜ ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å"
            
                text += f"{medal} <b>{ref['first_name']}</b> ({username_text})\n"
                text += f"   üë• ÿØÿπŸàÿ™‚ÄåŸáÿß: {ref['referral_count']} ŸÜŸÅÿ±\n"
                text += f"   üí∞ ÿØÿ±ÿ¢ŸÖÿØ ÿ±ŸÅÿ±ÿßŸÑ: {format_price(ref['referral_count'] * inviter_reward)}\n"
                text += f"   üí≥ ⁄©ŸÑ ÿÆÿ±€åÿØ: {format_price(ref['total_purchased'] or 0)}\n\n"
    
                keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_referral")]]
    
            await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ==================== ADMIN SET INVITER REWARD ====================
    elif data == "admin_set_inviter_reward":
        current = get_setting('referral_inviter_reward', '10000')
    
        context.user_data['state'] = WAITING_REFERRAL_REWARD_INVITER
    
        text = f"‚öôÔ∏è <b>ÿ™ŸÜÿ∏€åŸÖ ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá</b>\n\n"
        text += f"üí∞ ŸÖÿ®ŸÑÿ∫ ŸÅÿπŸÑ€å: {format_price(int(current))}\n\n"
        text += "ŸÖÿ®ŸÑÿ∫ ÿ¨ÿØ€åÿØ ÿ±ÿß ÿ®Ÿá ÿ™ŸàŸÖÿßŸÜ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:"
    
        keyboard = [[InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="admin_referral")]]
    
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ==================== ADMIN SET INVITED REWARD ====================
    elif data == "admin_set_invited_reward":
        current = get_setting('referral_invited_reward', '5000')
    
        context.user_data['state'] = WAITING_REFERRAL_REWARD_INVITED
    
        text = f"‚öôÔ∏è <b>ÿ™ŸÜÿ∏€åŸÖ ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äåÿ¥ÿØŸá</b>\n\n"
        text += f"üí∞ ŸÖÿ®ŸÑÿ∫ ŸÅÿπŸÑ€å: {format_price(int(current))}\n\n"
        text += "ŸÖÿ®ŸÑÿ∫ ÿ¨ÿØ€åÿØ ÿ±ÿß ÿ®Ÿá ÿ™ŸàŸÖÿßŸÜ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:"
    
        keyboard = [[InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="admin_referral")]]
    
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    
    # ÿØÿ± ÿ™ÿßÿ®ÿπ callback_query_handler ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ:

    elif data == "admin_financial":
        await show_admin_financial_menu(query)

    elif data == "admin_transactions":
        await show_admin_transactions(query)

    elif data.startswith("admin_transactions_page_"):
        page = int(data.split("_")[-1])
        await show_admin_transactions(query, page)

    elif data == "admin_payments":
        await show_admin_payments(query)

    elif data.startswith("admin_payments_page_"):
        page = int(data.split("_")[-1])
        await show_admin_payments(query, page)

    elif data == "admin_coupons":
        await show_admin_coupons_menu(query)

    elif data == "admin_create_coupon":
        await start_create_coupon(query, context)

    elif data == "admin_list_coupons":
        await show_admin_coupons_list(query)

    elif data.startswith("admin_coupons_filter_"):
        filter_type = data.split("_")[-1]
        await show_admin_coupons_list(query, page=1, filter_type=filter_type)

    elif data.startswith("admin_coupons_list_"):
        parts = data.split("_")
        filter_type = parts[3]
        page = int(parts[4])
        await show_admin_coupons_list(query, page, filter_type)

    elif data.startswith("coupon_type_"):
        coupon_type = data.split("_")[-1]
        context.user_data['coupon_data']['discount_type'] = coupon_type
    
        type_text = "ÿØÿ±ÿµÿØ ÿ™ÿÆŸÅ€åŸÅ" if coupon_type == "percent" else "ŸÖÿ®ŸÑÿ∫ ÿ™ÿÆŸÅ€åŸÅ"
        await query.message.edit_text(
            f"‚úÖ ŸÜŸàÿπ: {type_text}\n\n"
            f"ŸÖŸÇÿØÿßÿ± ÿ™ÿÆŸÅ€åŸÅ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n"
            f"{'(ÿπÿØÿØ ÿ®€åŸÜ 1 ÿ™ÿß 100)' if coupon_type == 'percent' else '(ÿ®Ÿá ÿ™ŸàŸÖÿßŸÜ)'}"
        )

    elif data == "admin_campaigns":
        await show_admin_campaigns_menu(query)

    elif data == "admin_export_excel":
        await export_financial_excel(query, context, 'all')

    elif data == "admin_export_transactions":
        await export_financial_excel(query, context, 'transactions')

    elif data == "admin_export_payments":
        await export_financial_excel(query, context, 'payments')

    elif data == "admin_export_coupon_stats":
        await export_coupon_stats_excel(query, context)

    elif data.startswith("admin_export_coupon_"):
        coupon_id = int(data.split("_")[-1])
        await export_coupon_stats_excel(query, context, coupon_id)
        # ==================== ADMIN SETTINGS HANDLERS ====================

    elif data == "admin_settings":
        await show_admin_settings_menu(query)

    elif data == "admin_marzban_settings":
        current_url = get_setting('marzban_url', MARZBAN_URL)
        current_username = get_setting('marzban_username', MARZBAN_USERNAME)
    
        text = "üîß <b>ÿ™ŸÜÿ∏€åŸÖÿßÿ™ Marzban</b>\n\n"
        text += f"üåê URL: <code>{current_url}</code>\n"
        text += f"üë§ Username: <code>{current_username}</code>\n"
        text += f"üîë Password: ‚óè‚óè‚óè‚óè‚óè‚óè\n\n"
        text += "ÿ®ÿ±ÿß€å ÿ™ÿ∫€å€åÿ± Ÿáÿ± ŸÖŸàÿ±ÿØÿå ÿßÿ≤ ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:"
    
        keyboard = [
            [InlineKeyboardButton("üåê ÿ™ÿ∫€å€åÿ± URL", callback_data="admin_change_marzban_url")],
            [InlineKeyboardButton("üë§ ÿ™ÿ∫€å€åÿ± Username", callback_data="admin_change_marzban_user")],
            [InlineKeyboardButton("üîë ÿ™ÿ∫€å€åÿ± Password", callback_data="admin_change_marzban_pass")],
            [InlineKeyboardButton("üîå ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ", callback_data="admin_test_marzban")],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_settings")]
        ]
    
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data == "admin_change_marzban_url":
        context.user_data['state'] = WAITING_MARZBAN_URL
    
        current = get_setting('marzban_url', MARZBAN_URL)
    
        await query.message.edit_text(
            f"üåê <b>ÿ™ÿ∫€å€åÿ± URL ŸÖÿ±ÿ≤ÿ®ÿßŸÜ</b>\n\n"
            f"URL ŸÅÿπŸÑ€å: <code>{current}</code>\n\n"
            f"URL ÿ¨ÿØ€åÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n"
            f"ŸÖÿ´ÿßŸÑ: <code>https://panel.example.com:8000</code>",
            parse_mode='HTML'
        )

    elif data == "admin_change_marzban_user":
        context.user_data['state'] = WAITING_MARZBAN_USER
    
        current = get_setting('marzban_username', MARZBAN_USERNAME)
    
        await query.message.edit_text(
            f"üë§ <b>ÿ™ÿ∫€å€åÿ± ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿ±ÿ≤ÿ®ÿßŸÜ</b>\n\n"
            f"ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÅÿπŸÑ€å: <code>{current}</code>\n\n"
            f"ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ÿ¨ÿØ€åÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:",
            parse_mode='HTML'
        )

    elif data == "admin_change_marzban_pass":
        context.user_data['state'] = WAITING_MARZBAN_PASS
    
        await query.message.edit_text(
            f"üîë <b>ÿ™ÿ∫€å€åÿ± ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ</b>\n\n"
            f"ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ÿ¨ÿØ€åÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n\n"
            f"‚ö†Ô∏è ÿ™Ÿàÿ¨Ÿá: ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿßŸÖŸÜ ÿ∞ÿÆ€åÿ±Ÿá ŸÖ€å‚Äåÿ¥ŸàÿØ.",
            parse_mode='HTML'
        )

    elif data == "admin_test_marzban":
        await query.message.edit_text("‚è≥ ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ŸÖÿ±ÿ≤ÿ®ÿßŸÜ...")
    
    # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ™ŸÜÿ∏€åŸÖÿßÿ™ marzban ÿßÿ≤ ÿØ€åÿ™ÿßÿ®€åÿ≥
        marzban_url = get_setting('marzban_url', MARZBAN_URL)
        marzban_username = get_setting('marzban_username', MARZBAN_USERNAME)
        marzban_password = get_setting('marzban_password', MARZBAN_PASSWORD)
    
    # ÿß€åÿ¨ÿßÿØ ŸÜŸÖŸàŸÜŸá ÿ¨ÿØ€åÿØ ÿ®ÿ±ÿß€å ÿ™ÿ≥ÿ™
        test_marzban = MarzbanAPI(marzban_url, marzban_username, marzban_password)
    
        success = await test_marzban.test_connection()
    
        if success:
            text = "‚úÖ <b>ÿßÿ™ÿµÿßŸÑ ŸÖŸàŸÅŸÇ!</b>\n\n"
            text += f"üåê URL: <code>{marzban_url}</code>\n"
            text += f"üë§ ⁄©ÿßÿ±ÿ®ÿ±: <code>{marzban_username}</code>\n"
            text += f"üîå Ÿàÿ∂ÿπ€åÿ™: ŸÖÿ™ÿµŸÑ\n\n"
            text += f"üïê ÿ≤ŸÖÿßŸÜ ÿ™ÿ≥ÿ™: {datetime.now().strftime('%Y/%m/%d %H:%M:%S')}"
        else:
            text = "‚ùå <b>ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ!</b>\n\n"
            text += f"üåê URL: <code>{marzban_url}</code>\n"
            text += f"üë§ ⁄©ÿßÿ±ÿ®ÿ±: <code>{marzban_username}</code>\n\n"
            text += "‚ö†Ô∏è ŸÑÿ∑ŸÅÿßŸã ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ."
    
        keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_marzban_settings")]]
    
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data == "admin_zarinpal_settings":
        current_merchant = get_setting('zarinpal_merchant', ZARINPAL_MERCHANT)
    
        text = "üí≥ <b>ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ</b>\n\n"
        text += f"üîë Merchant ID: <code>{current_merchant}</code>\n"
        text += f"üß™ ÿ≠ÿßŸÑÿ™ ÿ¢ÿ≤ŸÖÿß€åÿ¥€å: {'‚úÖ ŸÅÿπÿßŸÑ' if ZARINPAL_SANDBOX else '‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ'}\n\n"
        text += "ÿ®ÿ±ÿß€å ÿ™ÿ∫€å€åÿ± Merchant ID ÿßÿ≤ ÿØ⁄©ŸÖŸá ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:"
    
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è ÿ™ÿ∫€å€åÿ± Merchant ID", callback_data="admin_change_merchant")],
            [InlineKeyboardButton("üß™ ÿ™ÿ≥ÿ™ ÿØÿ±⁄ØÿßŸá", callback_data="admin_test_zarinpal")],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_settings")]
        ]
    
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data == "admin_change_merchant":
        context.user_data['state'] = WAITING_MERCHANT_ID
    
        current = get_setting('zarinpal_merchant', ZARINPAL_MERCHANT)
    
        await query.message.edit_text(
            f"üí≥ <b>ÿ™ÿ∫€å€åÿ± Merchant ID ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ</b>\n\n"
            f"Merchant ŸÅÿπŸÑ€å:\n<code>{current}</code>\n\n"
            f"Merchant ID ÿ¨ÿØ€åÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n"
            f"ŸÖÿ´ÿßŸÑ: <code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code>",
            parse_mode='HTML'
        )

    elif data == "admin_test_zarinpal":
        await query.message.edit_text("‚è≥ ÿØÿ± ÿ≠ÿßŸÑ ÿ™ÿ≥ÿ™ ÿØÿ±⁄ØÿßŸá ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ...")
    
        merchant_id = get_setting('zarinpal_merchant', ZARINPAL_MERCHANT)
        zp = ZarinPal(merchant_id, ZARINPAL_SANDBOX)
    
    # ÿ™ÿ≥ÿ™ ÿ®ÿß ŸÖÿ®ŸÑÿ∫ 1000 ÿ™ŸàŸÖÿßŸÜ
        result = zp.request_payment(
            amount=1000,
            description="ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ",
            callback_url="https://example.com/verify"
        )
    
        if result.get('data', {}).get('code') == 100:
            text = "‚úÖ <b>ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ ŸÖŸàŸÅŸÇ!</b>\n\n"
            text += f"üîë Merchant ID: <code>{merchant_id[:20]}...</code>\n"
            text += f"üß™ ÿ≠ÿßŸÑÿ™: {'Sandbox' if ZARINPAL_SANDBOX else 'Production'}\n"
            text += f"‚úÖ Ÿàÿ∂ÿπ€åÿ™: ŸÅÿπÿßŸÑ"
        else:
            text = "‚ùå <b>ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ!</b>\n\n"
            text += f"üîë Merchant ID: <code>{merchant_id[:20]}...</code>\n"
            text += f"‚ùå ⁄©ÿØ ÿÆÿ∑ÿß: {result.get('data', {}).get('code', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}\n\n"
            text += "‚ö†Ô∏è ŸÑÿ∑ŸÅÿßŸã Merchant ID ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ."
    
        keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_zarinpal_settings")]]
    
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data == "admin_welcome_message":
        context.user_data['state'] = WAITING_WELCOME_MESSAGE

    # Ÿæ€åÿßŸÖ ŸÅÿπŸÑ€å
        current = get_setting(
            'welcome_message', 
            'ÿ≥ŸÑÿßŸÖ {user_name} ÿπÿ≤€åÿ≤! üëã\nÿ®Ÿá ÿ±ÿ®ÿßÿ™ VPN ŸÖÿß ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ.\nŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {balance}\nüéÅ ŸáÿØ€åŸá {invited_reward} ÿßÿ≤ {referrer_name}'
        )

        text = "üìù <b>Ÿà€åÿ±ÿß€åÿ¥ Ÿæ€åÿßŸÖ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ⁄ØŸà€å€å</b>\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"<b>Ÿæ€åÿßŸÖ ŸÅÿπŸÑ€å:</b>\n{current}\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += "<b>üìå ŸÖÿ™ÿ∫€åÿ±Ÿáÿß€å Ÿæÿß€åŸá:</b>\n"
        text += "‚Ä¢ <code>{user_name}</code> ‚Üí ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ± ÿ¨ÿØ€åÿØ\n"
        text += "‚Ä¢ <code>{user_id}</code> ‚Üí ÿ¢€åÿØ€å ÿπÿØÿØ€å\n"
        text += "‚Ä¢ <code>{balance}</code> ‚Üí ŸÖŸàÿ¨ŸàÿØ€å ⁄©€åŸÅ ŸæŸàŸÑ\n\n"
        text += "<b>üéÅ ŸÖÿ™ÿ∫€åÿ±Ÿáÿß€å ÿ±ŸÅÿ±ÿßŸÑ:</b>\n"
        text += "‚Ä¢ <code>{referrer_name}</code> ‚Üí ŸÜÿßŸÖ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá\n"
        text += "‚Ä¢ <code>{referrer_username}</code> ‚Üí €åŸàÿ≤ÿ±ŸÜ€åŸÖ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá\n"
        text += "‚Ä¢ <code>{invited_reward}</code> ‚Üí ŸÖÿ®ŸÑÿ∫ ŸáÿØ€åŸá\n"
        text += "‚Ä¢ <code>{inviter_reward}</code> ‚Üí ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += "<b>üí° ŸÜ⁄©ÿ™Ÿá:</b> ŸÖÿ™ÿ∫€åÿ±Ÿáÿß€å ÿ±ŸÅÿ±ÿßŸÑ ŸÅŸÇÿ∑ ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ¨ÿØ€åÿØ ŸÜŸÖÿß€åÿ¥ ÿØÿßÿØŸá ŸÖ€å‚Äåÿ¥ŸàŸÜÿØ.\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += "<b>ŸÖÿ´ÿßŸÑ Ÿæ€åÿ¥‚ÄåŸÜŸÖÿß€åÿ¥:</b>\n"

    # ŸÜŸÖŸàŸÜŸá ⁄©ÿßÿ±ÿ®ÿ± Ÿà ÿ±ŸÅÿ±ÿßŸÑ ÿ®ÿ±ÿß€å Ÿæ€åÿ¥‚ÄåŸÜŸÖÿß€åÿ¥
        sample_user = {"first_name": "ŸÖÿ≠ŸÖÿØ", "id": 123456789}
        sample_referrer = {"first_name": "ÿπŸÑ€å", "username": "ali123"}
        sample_invited_reward = 5000
        sample_inviter_reward = 10000

        def safe_preview(text, user, db_user, referrer=None, invited_reward=0, inviter_reward=0):
            import re

            replacements = {
                'user_name': user.get('first_name', '⁄©ÿßÿ±ÿ®ÿ±'),
                'first_name': user.get('first_name', '⁄©ÿßÿ±ÿ®ÿ±'),
                'user_id': str(user.get('id', 0)),
                'balance': format_price(db_user.get('balance', 50000)),  # Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ŸÖŸàÿ¨ŸàÿØ€å
                'referrer_name': referrer.get('first_name', '€å⁄© ÿØŸàÿ≥ÿ™') if referrer else '',
                'referrer_username': f"@{referrer['username']}" if referrer and referrer.get('username') else '',
                'invited_reward': format_price(invited_reward) if referrer else '',
                'inviter_reward': format_price(inviter_reward) if referrer else ''
            }

            def replace_var(match):
                var_name = match.group(1)
                return str(replacements.get(var_name, match.group(0)))

            result = re.sub(r'\{(\w+)\}', replace_var, text)

        # ÿß⁄Øÿ± ÿ±ŸÅÿ±ÿßŸÑ ŸÜ€åÿ≥ÿ™ÿå ÿ®ÿÆÿ¥ ŸáÿØ€åŸá ÿ±ÿß Ÿæÿß⁄© ⁄©ŸÜ€åŸÖ
            if not referrer:
                result = re.sub(r'üéÅ ŸáÿØ€åŸá .*? ÿßÿ≤ .*?\n?', '', result)

            return result

        preview_with_referral = safe_preview(current, sample_user, {"balance": 50000},
                                         sample_referrer, sample_invited_reward, sample_inviter_reward)
        preview_without_referral = safe_preview(current, sample_user, {"balance": 50000})

        text += f"<code>üìå ÿ®ÿß ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™:</code>\n{preview_with_referral}\n\n"
        text += f"<code>üìå ÿ®ÿØŸàŸÜ ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™:</code>\n{preview_without_referral}\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += "‚úèÔ∏è Ÿæ€åÿßŸÖ ÿ¨ÿØ€åÿØ ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ:"

        keyboard = [[InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="admin_settings")]]

        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')



    elif data == "admin_logs":
        logs = get_admin_logs(limit=20)
    
        if not logs:
            text = "üìú <b>ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ≥€åÿ≥ÿ™ŸÖ</b>\n\n‚ùå Ÿá€å⁄Ü ŸÑÿß⁄Ø€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."
        else:
            text = "üìú <b>ÿ¢ÿÆÿ±€åŸÜ ŸÅÿπÿßŸÑ€åÿ™‚ÄåŸáÿß€å ÿßÿØŸÖ€åŸÜ</b>\n\n"
        
            for log in logs[:15]:
                admin_id = log.get('admin_id', 0)
                action = log.get('action', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
                details = log.get('details', '')[:50]
                created = format_date(log['created_at'])
            
                text += f"üîπ <b>{action}</b>\n"
                text += f"   üë§ ÿßÿØŸÖ€åŸÜ: <code>{admin_id}</code>\n"
                text += f"   üìù {details}\n"
                text += f"   üïê {created}\n\n"
    
        keyboard = [
            [InlineKeyboardButton("üóë Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ŸÑÿß⁄Ø‚ÄåŸáÿß", callback_data="admin_clear_logs")],
            [InlineKeyboardButton("üì• ÿØÿßŸÜŸÑŸàÿØ ŸÑÿß⁄Ø", callback_data="admin_export_logs")],
            [InlineKeyboardButton("üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å", callback_data="admin_logs")],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_settings")]
        ]
    
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    elif data == "admin_clear_logs":
        keyboard = [
        [InlineKeyboardButton("‚úÖ ÿ®ŸÑŸáÿå Ÿæÿß⁄© ÿ¥ŸàÿØ", callback_data="admin_confirm_clear_logs")],
        [InlineKeyboardButton("‚ùå ÿÆ€åÿ±", callback_data="admin_logs")]
    ]
    
        await safe_edit_message(
            query,
            "‚ö†Ô∏è <b>ÿ≠ÿ∞ŸÅ ŸÑÿß⁄Ø‚ÄåŸáÿß</b>\n\nÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿ™ŸÖÿßŸÖ ŸÑÿß⁄Ø‚ÄåŸáÿß ÿ±ÿß Ÿæÿß⁄© ⁄©ŸÜ€åÿØÿü",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    elif data == "admin_confirm_clear_logs":
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM admin_logs")
        deleted_count = cursor.rowcount
        conn.commit()
        cursor.close()
        conn.close()
    
        log_admin_action(query.from_user.id, 'clear_logs', None, f"{deleted_count} ŸÑÿß⁄Ø ÿ≠ÿ∞ŸÅ ÿ¥ÿØ")
    
        await query.answer(f"‚úÖ {deleted_count} ŸÑÿß⁄Ø ÿ≠ÿ∞ŸÅ ÿ¥ÿØ", show_alert=True)
        await show_admin_settings_menu(query)

    elif data == "admin_export_logs":
        try:
            logs = get_admin_logs(limit=1000)
        
            if not logs:
                await query.answer("‚ùå Ÿá€å⁄Ü ŸÑÿß⁄Ø€å ÿ®ÿ±ÿß€å ÿÆÿ±Ÿàÿ¨€å Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ", show_alert=True)
                return
        
        # ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ ŸÖÿ™ŸÜ€å
            text_content = "üìú ⁄Øÿ≤ÿßÿ±ÿ¥ ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ≥€åÿ≥ÿ™ŸÖ\n"
            text_content += f"üìÖ ÿ™ÿßÿ±€åÿÆ: {datetime.now().strftime('%Y/%m/%d %H:%M:%S')}\n"
            text_content += "="*50 + "\n\n"
        
            for log in logs:
                text_content += f"ID: {log['id']}\n"
                text_content += f"ÿßÿØŸÖ€åŸÜ: {log['admin_id']}\n"
                text_content += f"ÿπŸÖŸÑ€åÿßÿ™: {log['action']}\n"
                text_content += f"ÿ¨ÿ≤ÿ¶€åÿßÿ™: {log.get('details', 'ŸÜÿØÿßÿ±ÿØ')}\n"
                text_content += f"ÿ™ÿßÿ±€åÿÆ: {format_date(log['created_at'])}\n"
                text_content += "-"*50 + "\n"
        
        # ÿ™ÿ®ÿØ€åŸÑ ÿ®Ÿá ÿ®ÿß€åÿ™
            log_file = io.BytesIO(text_content.encode('utf-8'))
            log_file.name = f"admin_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=log_file,
                filename=log_file.name,
                caption="üìú ŸÅÿß€åŸÑ ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ≥€åÿ≥ÿ™ŸÖ"
            )
        
            await query.answer("‚úÖ ŸÅÿß€åŸÑ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ", show_alert=False)
        
        except Exception as e:
            logger.error(f"ÿÆÿ∑ÿß ÿØÿ± export logs: {e}")
            await query.answer("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ", show_alert=True)
    # ÿØÿ± ÿ™ÿßÿ®ÿπ button_handlerÿå ŸÇÿ®ŸÑ ÿßÿ≤ else ÿ¢ÿÆÿ± ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ:

    elif data == "insufficient_balance":
        await query.answer(
            "üí∞ ŸÖŸàÿ¨ŸàÿØ€å ⁄©€åŸÅ ŸæŸàŸÑ ÿ¥ŸÖÿß ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™!\n\n"
            "ŸÑÿ∑ŸÅÿßŸã ÿßÿ®ÿ™ÿØÿß ⁄©€åŸÅ ŸæŸàŸÑ ÿÆŸàÿØ ÿ±ÿß ÿ¥ÿßÿ±⁄ò ⁄©ŸÜ€åÿØ €åÿß ÿßÿ≤ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.",
            show_alert=True
        )
    
    elif data == "charge_online":
        amount = context.user_data.get('charge_amount')
    
        if not amount:
            await query.answer("‚ùå ÿÆÿ∑ÿß: ŸÖÿ®ŸÑÿ∫ ŸÖÿ¥ÿÆÿµ ŸÜÿ¥ÿØŸá", show_alert=True)
            return
    
        await query.message.edit_text("‚è≥ ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜÿ™ŸÇÿßŸÑ ÿ®Ÿá ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™...")
    
    # ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ Ÿæÿ±ÿØÿßÿÆÿ™
        merchant_id = get_setting('zarinpal_merchant', ZARINPAL_MERCHANT)
        zp = ZarinPal(merchant_id, ZARINPAL_SANDBOX)
    
        bot_username = context.bot.username
    
        result = zp.request_payment(
            amount=amount,
            description=f"ÿ¥ÿßÿ±⁄ò ⁄©€åŸÅ ŸæŸàŸÑ",
            callback_url=f"{NGROK_URL}/verify",  # ‚úÖ ÿ™ÿ∫€å€åÿ± ÿß€åŸÜ ÿÆÿ∑
            mobile=db_user.get('phone')
        )
    
        if result.get('data', {}).get('code') == 100:
            authority = result['data']['authority']
            payment_url = zp.get_payment_url(authority)
        
        # ÿ∞ÿÆ€åÿ±Ÿá ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿæÿ±ÿØÿßÿÆÿ™
            save_payment(
                user_id=user_id,
                amount=amount,
                authority=authority,
                package_id=None,
                payment_type='wallet'
            )   
        
            text = f"üí≥ <b>Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ</b>\n\n"
            text += f"üí∞ ŸÖÿ®ŸÑÿ∫ ÿ¥ÿßÿ±⁄ò: {format_price(amount)}\n\n"
            text += f"üîó ÿ®ÿ±ÿß€å Ÿæÿ±ÿØÿßÿÆÿ™ ÿ±Ÿà€å ÿØ⁄©ŸÖŸá ÿ≤€åÿ± ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ:\n\n"
            text += f"‚ö†Ô∏è Ÿæÿ≥ ÿßÿ≤ Ÿæÿ±ÿØÿßÿÆÿ™ ŸÖŸàŸÅŸÇÿå ÿØÿ≥ÿ™Ÿàÿ± /verify_{authority[:20]} ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ."
        
            keyboard = [
                [InlineKeyboardButton("üí≥ Ÿæÿ±ÿØÿßÿÆÿ™", url=payment_url)],
                [InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="wallet")]
            ]
        
            await query.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        
            context.user_data.pop('charge_amount', None)
        else:
            error_code = result.get('data', {}).get('code', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
            await query.message.edit_text(
                f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™!\n\n"
                f"⁄©ÿØ ÿÆÿ∑ÿß: {error_code}\n\n"
                f"ŸÑÿ∑ŸÅÿßŸã ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ."
            )



# ==================== ADMIN PANEL FUNCTIONS ====================

async def show_admin_panel(query, context):
    stats = get_stats()
    
    text = "‚öôÔ∏è <b>ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™</b>\n\n"
    text += f"üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {stats['total_users']} (ÿßŸÖÿ±Ÿàÿ≤: +{stats['new_users_today']})\n"
    text += f"üìä ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ: {stats['active_orders']}\n"
    text += f"üí∞ ÿØÿ±ÿ¢ŸÖÿØ ÿßŸÖÿ±Ÿàÿ≤: {format_price(stats['today_sales'])}\n"
    text += f"üíµ ÿØÿ±ÿ¢ŸÖÿØ ⁄©ŸÑ: {format_price(stats['total_income'])}\n"
    
    keyboard = [
        [InlineKeyboardButton("üìä ÿØÿßÿ¥ÿ®Ÿàÿ±ÿØ", callback_data="admin_dashboard")],
        [InlineKeyboardButton("üë• ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ", callback_data="admin_users"),
         InlineKeyboardButton("üì¶ ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß", callback_data="admin_services")],
        [InlineKeyboardButton("üí∞ ŸÖÿØ€åÿ±€åÿ™ ŸÖÿßŸÑ€å", callback_data="admin_financial"),
         InlineKeyboardButton("üéÅ ŸÖÿØ€åÿ±€åÿ™ ÿ±ŸÅÿ±ÿßŸÑ", callback_data="admin_referral")],
        [InlineKeyboardButton("üì¢ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ŸáŸÖ⁄ØÿßŸÜ€å", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖÿßÿ™", callback_data="admin_settings")],
        [InlineKeyboardButton("üè† ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_to_main")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def show_admin_dashboard(query):
    stats = get_stats()
    
    text = "üìä <b>ÿØÿßÿ¥ÿ®Ÿàÿ±ÿØ ŸÖÿØ€åÿ±€åÿ™</b>\n\n"
    text += "<b>üìà ÿ¢ŸÖÿßÿ± ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ:</b>\n"
    text += f"‚Ä¢ ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {stats['total_users']}\n"
    text += f"‚Ä¢ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ¨ÿØ€åÿØ ÿßŸÖÿ±Ÿàÿ≤: {stats['new_users_today']}\n\n"
    
    text += "<b>üí∞ ÿ¢ŸÖÿßÿ± ŸÖÿßŸÑ€å:</b>\n"
    text += f"‚Ä¢ ŸÅÿ±Ÿàÿ¥ ÿßŸÖÿ±Ÿàÿ≤: {format_price(stats['today_sales'])}\n"
    text += f"‚Ä¢ ŸÅÿ±Ÿàÿ¥ ÿß€åŸÜ ŸáŸÅÿ™Ÿá: {format_price(stats['week_sales'])}\n"
    text += f"‚Ä¢ ŸÅÿ±Ÿàÿ¥ ÿß€åŸÜ ŸÖÿßŸá: {format_price(stats['month_sales'])}\n"
    text += f"‚Ä¢ ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ: {format_price(stats['total_income'])}\n"
    text += f"‚Ä¢ ŸÖŸàÿ¨ŸàÿØ€å ⁄©ŸÑ ⁄©€åŸÅ ŸæŸàŸÑ‚ÄåŸáÿß: {format_price(stats['total_balance'])}\n\n"
    
    text += "<b>üìä ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß:</b>\n"
    text += f"‚Ä¢ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ: {stats['active_orders']}\n"
    
    keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_panel")]]
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def show_admin_users_menu(query, context):
    text = "üë• <b>ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ</b>\n\n⁄Øÿ≤€åŸÜŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:"
    
    keyboard = [
        [InlineKeyboardButton("üîç ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ⁄©ÿßÿ±ÿ®ÿ±", callback_data="admin_user_search")],
        [InlineKeyboardButton("üìã ŸÑ€åÿ≥ÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ", callback_data="admin_user_list")],
        [InlineKeyboardButton("üí∞ ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ⁄Øÿ±ŸàŸá€å", callback_data="admin_bulk_balance")],
        [InlineKeyboardButton("üìä ÿ¢ŸÖÿßÿ± ÿ™⁄Ø‚ÄåŸáÿß", callback_data="admin_user_tags")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_panel")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ==================== ADMIN SERVICES MANAGEMENT ====================

async def show_admin_services_menu(query):
    """ŸÖŸÜŸà€å ÿßÿµŸÑ€å ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß"""
    stats = get_stats()
    
    # ÿ¢ŸÖÿßÿ± ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß
    all_orders = get_all_orders()
    active = len([o for o in all_orders if o['status'] == 'active'])
    expired = len([o for o in all_orders if o['status'] == 'expired'])
    deleted = len([o for o in all_orders if o['status'] == 'deleted'])
    
    text = "üì¶ <b>ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß</b>\n\n"
    text += f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ: {active}\n"
    text += f"‚è∞ ŸÖŸÜŸÇÿ∂€å ÿ¥ÿØŸá: {expired}\n"
    text += f"üóë ÿ≠ÿ∞ŸÅ ÿ¥ÿØŸá: {deleted}\n"
    text += f"üìä ⁄©ŸÑ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß: {len(all_orders)}\n\n"
    text += "€å⁄© ⁄Øÿ≤€åŸÜŸá ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:"

    keyboard = [
        [InlineKeyboardButton("üìã ŸÑ€åÿ≥ÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ", callback_data="admin_services_active")],
        [InlineKeyboardButton("üîç ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ÿ≥ÿ±Ÿà€åÿ≥", callback_data="admin_services_search")],
        [InlineKeyboardButton("‚è∞ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÖŸÜŸÇÿ∂€å ÿ¥ÿØŸá", callback_data="admin_services_expired")],
        [InlineKeyboardButton("üìä ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ", callback_data="admin_services_stats")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_panel")]
    ]

    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_admin_services_list(query, status='active', page=0):
    """ŸÜŸÖÿß€åÿ¥ ŸÑ€åÿ≥ÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß ÿ®ÿß ÿµŸÅÿ≠Ÿá‚Äåÿ®ŸÜÿØ€å"""
    per_page = 8
    offset = page * per_page
    
    orders = get_all_orders(status=status, limit=per_page + 1)
    
    if not orders:
        text = f"‚ùå Ÿá€å⁄Ü ÿ≥ÿ±Ÿà€åÿ≥ {status} €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."
        keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_services")]]
        await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    
    has_more = len(orders) > per_page
    orders = orders[:per_page]
    
    status_emoji = {
        'active': '‚úÖ',
        'expired': '‚è∞',
        'deleted': 'üóë'
    }
    
    text = f"{status_emoji.get(status, 'üì¶')} <b>ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å {status}</b>\n\n"
    
    keyboard = []
    for order in orders:
        username = order.get('marzban_username', 'N/A')
        user_name = order.get('first_name', 'ŸÜÿßÿ¥ŸÜÿßÿ≥')
        
        # ÿØÿ±€åÿßŸÅÿ™ ŸÜÿßŸÖ Ÿæ⁄©€åÿ¨ ÿßÿ≤ package_id
        pkg = PACKAGES.get(order.get('package_id', ''), {})
        package_name = pkg.get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
        
        # ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ±Ÿàÿ≤Ÿáÿß€å ÿ®ÿßŸÇ€å‚ÄåŸÖÿßŸÜÿØŸá
        expire = order.get('expires_at')  # ŸÜÿßŸÖ ÿµÿ≠€åÿ≠ ŸÅ€åŸÑÿØ
        days_left = ""
        if expire:
            try:
                if isinstance(expire, str):
                    expire_dt = datetime.fromisoformat(expire)
                else:
                    expire_dt = expire
                days = (expire_dt - datetime.now()).days
                if days > 0:
                    days_left = f" ({days} ÿ±Ÿàÿ≤)"
                else:
                    days_left = " (ŸÖŸÜŸÇÿ∂€å)"
            except:
                pass
        
        button_text = f"üë§ {user_name} | {package_name}{days_left}"
        keyboard.append([InlineKeyboardButton(
            button_text,
            callback_data=f"admin_service_detail_{order['id']}"
        )])
    
    # ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿµŸÅÿ≠Ÿá‚Äåÿ®ŸÜÿØ€å
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è ŸÇÿ®ŸÑ€å", callback_data=f"admin_services_{status}_page_{page-1}"))
    if has_more:
        nav_buttons.append(InlineKeyboardButton("ÿ®ÿπÿØ€å ‚ñ∂Ô∏è", callback_data=f"admin_services_{status}_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_services")])
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')





async def show_admin_service_detail(query, order_id, context):
    """ŸÜŸÖÿß€åÿ¥ ÿ¨ÿ≤ÿ¶€åÿßÿ™ ⁄©ÿßŸÖŸÑ €å⁄© ÿ≥ÿ±Ÿà€åÿ≥"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥ŸÅÿßÿ±ÿ¥
    cursor.execute("""
        SELECT o.*, u.first_name, u.username as user_username, u.user_id
        FROM orders o
        JOIN users u ON o.user_id = u.user_id
        WHERE o.id = %s
    """, (order_id,))
    order = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if not order:
        await query.message.edit_text("‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    # ÿØÿ±€åÿßŸÅÿ™ ŸÜÿßŸÖ Ÿæ⁄©€åÿ¨
    pkg = PACKAGES.get(order.get('package_id', ''), {})
    package_name = pkg.get('name', 'ŸÜÿß ŸÖÿ¥ÿÆÿµ')
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿßÿ≤ ŸÖÿ±ÿ≤ÿ®ÿßŸÜ
    marzban_username = order.get('marzban_username')
    usage_info = None
    
    if marzban_username:
        usage_info = await marzban.get_user_usage(marzban_username)
    
    # ÿ≥ÿßÿÆÿ™ ŸÖÿ™ŸÜ
    text = "üì¶ <b>ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿ≥ÿ±Ÿà€åÿ≥</b>\n\n"
    text += f"üÜî ÿ¥ŸÜÿßÿ≥Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: <code>{order['id']}</code>\n"
    text += f"üë§ ⁄©ÿßÿ±ÿ®ÿ±: {order['first_name']} (@{order.get('user_username', 'ŸÜÿØÿßÿ±ÿØ')})\n"
    text += f"üî¢ ÿ¢€åÿØ€å ⁄©ÿßÿ±ÿ®ÿ±: <code>{order['user_id']}</code>\n"
    text += f"üì¶ Ÿæ⁄©€åÿ¨: {package_name}\n"
    text += f"üí∞ ŸÇ€åŸÖÿ™: {format_price(order['price'])}\n"
    text += f"üìÖ ÿ™ÿßÿ±€åÿÆ ÿÆÿ±€åÿØ: {format_date(order['created_at'])}\n"
    
    # ÿ®ÿ±ÿ±ÿ≥€å ŸÅ€åŸÑÿØ expires_at
    if order.get('expires_at'):
        text += f"‚è∞ ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß: {format_date(order['expires_at'])}\n"
        try:
            expire_dt = order['expires_at']
            if isinstance(expire_dt, str):
                expire_dt = datetime.fromisoformat(expire_dt)
            days_left = (expire_dt - datetime.now()).days
            if days_left > 0:
                text += f"‚è≥ ÿ±Ÿàÿ≤Ÿáÿß€å ÿ®ÿßŸÇ€åŸÖÿßŸÜÿØŸá: {days_left} ÿ±Ÿàÿ≤\n"
            else:
                text += f"‚ùå ŸÖŸÜŸÇÿ∂€å ÿ¥ÿØŸá: {abs(days_left)} ÿ±Ÿàÿ≤ Ÿæ€åÿ¥\n"
        except Exception as e:
            logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ±Ÿàÿ≤Ÿáÿß€å ÿ®ÿßŸÇ€åŸÖÿßŸÜÿØŸá: {e}")
    
    status_emoji = {
        'active': '‚úÖ ŸÅÿπÿßŸÑ',
        'expired': '‚è∞ ŸÖŸÜŸÇÿ∂€å ÿ¥ÿØŸá',
        'deleted': 'üóë ÿ≠ÿ∞ŸÅ ÿ¥ÿØŸá'
    }
    text += f"üìä Ÿàÿ∂ÿπ€åÿ™: {status_emoji.get(order['status'], order['status'])}\n"
    
    # ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÖÿ±ÿ≤ÿ®ÿßŸÜ
    if usage_info:
        text += f"\nüìà <b>ÿ¢ŸÖÿßÿ± ŸÖÿµÿ±ŸÅ:</b>\n"
        text += f"üíæ ŸÖÿµÿ±ŸÅ ÿ¥ÿØŸá: {usage_info['used_gb']} GB\n"
        text += f"üì¶ ⁄©ŸÑ ÿ≠ÿ¨ŸÖ: {usage_info['total_gb']} GB\n"
        text += f"‚úÖ ÿ®ÿßŸÇ€åŸÖÿßŸÜÿØŸá: {usage_info['remaining_gb']} GB\n"
        
        if usage_info['total'] > 0:
            usage_percent = (usage_info['used'] / usage_info['total']) * 100
            text += f"üìä ÿØÿ±ÿµÿØ ŸÖÿµÿ±ŸÅ: {usage_percent:.1f}%\n"
        
        if usage_info.get('subscription_url'):
            text += f"\nüîó <b>ŸÑ€åŸÜ⁄© ÿßÿ™ÿµÿßŸÑ:</b>\n<code>{usage_info['subscription_url']}</code>\n"
    
    # ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿπŸÖŸÑ€åÿßÿ™
    keyboard = []
    
    if order['status'] == 'active':
        keyboard.append([
            InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≠ÿ¨ŸÖ", callback_data=f"admin_service_addtraffic_{order_id}"),
            InlineKeyboardButton("‚è∞ ÿ™ŸÖÿØ€åÿØ", callback_data=f"admin_service_extend_{order_id}")
        ])
        keyboard.append([
            InlineKeyboardButton("‚è∏ ÿ∫€åÿ±ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ", callback_data=f"admin_service_disable_{order_id}"),
            InlineKeyboardButton("üóë ÿ≠ÿ∞ŸÅ", callback_data=f"admin_service_delete_{order_id}")
        ])
    elif order['status'] == 'expired':
        keyboard.append([
            InlineKeyboardButton("‚ôªÔ∏è ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ŸÖÿ¨ÿØÿØ", callback_data=f"admin_service_reactivate_{order_id}"),
            InlineKeyboardButton("üóë ÿ≠ÿ∞ŸÅ", callback_data=f"admin_service_delete_{order_id}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üë§ ŸÖÿ¥ÿßŸáÿØŸá ⁄©ÿßÿ±ÿ®ÿ±", callback_data=f"admin_view_user_{order['user_id']}"),
        InlineKeyboardButton("üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å", callback_data=f"admin_service_detail_{order_id}")
    ])
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_services_active")])
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')



async def show_admin_services_stats(query):
    """ŸÜŸÖÿß€åÿ¥ ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß"""
    all_orders = get_all_orders()
    
    total = len(all_orders)
    active = len([o for o in all_orders if o['status'] == 'active'])
    expired = len([o for o in all_orders if o['status'] == 'expired'])
    deleted = len([o for o in all_orders if o['status'] == 'deleted'])
    
    # ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿØÿ±ÿ¢ŸÖÿØ
    total_revenue = sum(o['price'] for o in all_orders if o['status'] in ['active', 'expired'])
    
    # ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ÿßŸÖÿ±Ÿàÿ≤
    today = datetime.now().date()
    today_orders = [o for o in all_orders if o.get('created_at') and o['created_at'].date() == today]
    
    # ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜŸÇÿ∂ÿß (⁄©ŸÖÿ™ÿ± ÿßÿ≤ 7 ÿ±Ÿàÿ≤)
    expiring_soon = []
    for order in all_orders:
        if order['status'] == 'active' and order.get('expires_at'):  # ÿßÿµŸÑÿßÿ≠ ŸÜÿßŸÖ ŸÅ€åŸÑÿØ
            try:
                expire_dt = order['expires_at']
                if isinstance(expire_dt, str):
                    expire_dt = datetime.fromisoformat(expire_dt)
                days = (expire_dt - datetime.now()).days
                if 0 < days <= 7:
                    expiring_soon.append(order)
            except Exception as e:
                logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿßŸÜŸÇÿ∂ÿß: {e}")
                continue
    
    # Ÿæÿ±ŸÅÿ±Ÿàÿ¥‚Äåÿ™ÿ±€åŸÜ Ÿæ⁄©€åÿ¨‚ÄåŸáÿß
    from collections import Counter
    package_ids = [o.get('package_id') for o in all_orders if o.get('package_id')]
    package_counter = Counter(package_ids)
    top_packages = []
    
    for pkg_id, count in package_counter.most_common(3):
        pkg = PACKAGES.get(pkg_id, {})
        pkg_name = pkg.get('name', pkg_id)
        top_packages.append((pkg_name, count))
    
    text = "üìä <b>ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß</b>\n\n"
    text += "<b>üìà Ÿàÿ∂ÿπ€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß:</b>\n"
    text += f"‚Ä¢ ⁄©ŸÑ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß: {total}\n"
    text += f"‚Ä¢ ‚úÖ ŸÅÿπÿßŸÑ: {active} ({(active/total*100 if total > 0 else 0):.1f}%)\n"
    text += f"‚Ä¢ ‚è∞ ŸÖŸÜŸÇÿ∂€å: {expired} ({(expired/total*100 if total > 0 else 0):.1f}%)\n"
    text += f"‚Ä¢ üóë ÿ≠ÿ∞ŸÅ ÿ¥ÿØŸá: {deleted}\n\n"
    
    text += f"<b>üí∞ ÿØÿ±ÿ¢ŸÖÿØ:</b>\n"
    text += f"‚Ä¢ ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ: {format_price(total_revenue)}\n"
    text += f"‚Ä¢ ŸÖ€åÿßŸÜ⁄Ø€åŸÜ ŸÅÿ±Ÿàÿ¥: {format_price(total_revenue // total if total > 0 else 0)}\n\n"
    
    text += f"<b>üìÖ ÿßŸÖÿ±Ÿàÿ≤:</b>\n"
    text += f"‚Ä¢ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ÿ¨ÿØ€åÿØ: {len(today_orders)}\n\n"
    
    text += f"<b>‚ö†Ô∏è ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜŸÇÿ∂ÿß:</b>\n"
    text += f"‚Ä¢ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ⁄©ŸÖÿ™ÿ± ÿßÿ≤ 7 ÿ±Ÿàÿ≤: {len(expiring_soon)}\n\n"
    
    if top_packages:
        text += "<b>üèÜ Ÿæÿ±ŸÅÿ±Ÿàÿ¥‚Äåÿ™ÿ±€åŸÜ Ÿæ⁄©€åÿ¨‚ÄåŸáÿß:</b>\n"
        for pkg, count in top_packages:
            text += f"‚Ä¢ {pkg}: {count} ÿπÿØÿØ\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ö†Ô∏è ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ÿØÿ± ÿ≠ÿßŸÑ ÿßŸÜŸÇÿ∂ÿß", callback_data="admin_services_expiring")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_services")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ==================== ADMIN USER MANAGEMENT - ADDITIONAL FEATURES ====================

async def show_admin_bulk_balance_menu(query, context):
    """ŸÖŸÜŸà€å ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ⁄Øÿ±ŸàŸá€å"""
    text = "üí∞ <b>ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ⁄Øÿ±ŸàŸá€å</b>\n\n"
    text += "ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿ®Ÿá ⁄Øÿ±ŸàŸá€å ÿßÿ≤ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ÿ™⁄Øÿå ŸÖŸàÿ¨ŸàÿØ€å ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ.\n\n"
    text += "ŸÖÿ±ÿßÿ≠ŸÑ:\n"
    text += "1Ô∏è‚É£ ÿßŸÜÿ™ÿÆÿßÿ® ÿ™⁄Ø ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ\n"
    text += "2Ô∏è‚É£ Ÿàÿßÿ±ÿØ ⁄©ÿ±ÿØŸÜ ŸÖÿ®ŸÑÿ∫\n"
    text += "3Ô∏è‚É£ ÿ™ÿß€å€åÿØ ŸÜŸáÿß€å€å"
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿ™⁄Ø‚ÄåŸáÿß€å ŸÖŸàÿ¨ŸàÿØ
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT user_tag FROM users WHERE user_tag IS NOT NULL AND user_tag != ''")
    tags = [row[0] for row in cursor.fetchall()]
    cursor.close()
    conn.close()
    
    keyboard = []
    
    if tags:
        for tag in tags:
            # ÿ¥ŸÖÿßÿ±ÿ¥ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ÿß ÿß€åŸÜ ÿ™⁄Ø
            user_count = get_users_count(tag=tag)
            keyboard.append([
                InlineKeyboardButton(
                    f"üè∑ {tag} ({user_count} ⁄©ÿßÿ±ÿ®ÿ±)",
                    callback_data=f"admin_bulkbal_tag_{tag}"
                )
            ])
    else:
        text += "\n\n‚ö†Ô∏è Ÿá€å⁄Ü ÿ™⁄Ø€å ÿ™ÿπÿ±€åŸÅ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™!"
    
    keyboard.append([InlineKeyboardButton("‚ûï ŸáŸÖŸá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ", callback_data="admin_bulkbal_tag_all")])
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_users")])
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_admin_user_tags_stats(query):
    """ŸÜŸÖÿß€åÿ¥ ÿ¢ŸÖÿßÿ± ÿ™⁄Ø‚ÄåŸáÿß€å ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿ¢ŸÖÿßÿ± Ÿáÿ± ÿ™⁄Ø
    cursor.execute("""
        SELECT 
            user_tag,
            COUNT(*) as user_count,
            SUM(balance) as total_balance,
            SUM(total_purchased) as total_purchased
        FROM users
        WHERE user_tag IS NOT NULL AND user_tag != ''
        GROUP BY user_tag
        ORDER BY user_count DESC
    """)
    
    tag_stats = cursor.fetchall()
    
    # ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ÿØŸàŸÜ ÿ™⁄Ø
    cursor.execute("""
        SELECT COUNT(*) as count, SUM(balance) as balance, SUM(total_purchased) as purchased
        FROM users 
        WHERE user_tag IS NULL OR user_tag = ''
    """)
    no_tag = cursor.fetchone()
    
    cursor.close()
    conn.close()
    
    text = "üè∑ <b>ÿ¢ŸÖÿßÿ± ÿ™⁄Ø‚ÄåŸáÿß€å ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ</b>\n\n"
    
    if tag_stats:
        for tag in tag_stats:
            text += f"<b>üè∑ {tag['user_tag']}</b>\n"
            text += f"  üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {tag['user_count']}\n"
            text += f"  üí∞ ŸÖŸàÿ¨ŸàÿØ€å ⁄©ŸÑ: {format_price(tag['total_balance'] or 0)}\n"
            text += f"  üí≥ ÿÆÿ±€åÿØ ⁄©ŸÑ: {format_price(tag['total_purchased'] or 0)}\n\n"
    
    if no_tag and no_tag['count'] > 0:
        text += f"<b>‚ùì ÿ®ÿØŸàŸÜ ÿ™⁄Ø</b>\n"
        text += f"  üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {no_tag['count']}\n"
        text += f"  üí∞ ŸÖŸàÿ¨ŸàÿØ€å ⁄©ŸÑ: {format_price(no_tag['balance'] or 0)}\n"
        text += f"  üí≥ ÿÆÿ±€åÿØ ⁄©ŸÑ: {format_price(no_tag['purchased'] or 0)}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï ÿß€åÿ¨ÿßÿØ ÿ™⁄Ø ÿ¨ÿØ€åÿØ", callback_data="admin_create_tag")],
        [InlineKeyboardButton("‚úèÔ∏è Ÿà€åÿ±ÿß€åÿ¥ ÿ™⁄Ø‚ÄåŸáÿß", callback_data="admin_edit_tags")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_users")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def process_bulk_balance_addition(query, tag, amount, reason, context):
    """ÿßÿπŸÖÿßŸÑ ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ⁄Øÿ±ŸàŸá€å"""
    # ÿØÿ±€åÿßŸÅÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ÿ™⁄Ø
    if tag == 'all':
        users = get_all_users(limit=10000)  # ŸáŸÖŸá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
    else:
        users = get_all_users(tag=tag, limit=10000)
    
    if not users:
        await query.message.edit_text("‚ùå Ÿá€å⁄Ü ⁄©ÿßÿ±ÿ®ÿ±€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    success_count = 0
    fail_count = 0
    
    conn = db.get_connection()
    cursor = conn.cursor()
    
    for user in users:
        try:
            # ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å
            cursor.execute(
                "UPDATE users SET balance = balance + %s WHERE user_id = %s",
                (amount, user['user_id'])
            )
            
            # ÿ´ÿ®ÿ™ ÿ™ÿ±ÿß⁄©ŸÜÿ¥
            cursor.execute(
                """INSERT INTO transactions 
                (user_id, amount, type, description, admin_id) 
                VALUES (%s, %s, %s, %s, %s)""",
                (user['user_id'], amount, 'admin_add', 
                 f"ÿßŸÅÿ≤ÿß€åÿ¥ ⁄Øÿ±ŸàŸá€å - {reason}", query.from_user.id)
            )
            
            conn.commit()
            success_count += 1
            
            # ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±
            try:
                await context.bot.send_message(
                    user['user_id'],
                    f"üéÅ <b>ÿ¥ÿßÿ±⁄ò ŸáÿØ€åŸá!</b>\n\n"
                    f"ÿ®Ÿá ÿ≠ÿ≥ÿßÿ® ÿ¥ŸÖÿß {format_price(amount)} ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ! üéâ\n\n"
                    f"üìù ÿØŸÑ€åŸÑ: {reason}\n"
                    f"üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {format_price(user['balance'] + amount)}",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®Ÿá {user['user_id']}: {e}")
        
        except Exception as e:
            logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å {user['user_id']}: {e}")
            fail_count += 1
            conn.rollback()
    
    cursor.close()
    conn.close()
    
    # ŸÑÿß⁄Ø ÿßÿØŸÖ€åŸÜ
    log_admin_action(
        query.from_user.id, 
        'bulk_balance',
        0,
        f"ÿßŸÅÿ≤ÿß€åÿ¥ {format_price(amount)} ÿ®Ÿá {success_count} ⁄©ÿßÿ±ÿ®ÿ± ÿ®ÿß ÿ™⁄Ø {tag}"
    )
    
    text = f"‚úÖ <b>ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ⁄Øÿ±ŸàŸá€å ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ!</b>\n\n"
    text += f"üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ŸÖŸàŸÅŸÇ: {success_count}\n"
    text += f"‚ùå ÿÆÿ∑ÿß: {fail_count}\n"
    text += f"üí∞ ŸÖÿ®ŸÑÿ∫ Ÿáÿ± ⁄©ÿßÿ±ÿ®ÿ±: {format_price(amount)}\n"
    text += f"üíµ ŸÖÿ¨ŸÖŸàÿπ: {format_price(amount * success_count)}\n"
    text += f"üìù ÿØŸÑ€åŸÑ: {reason}"
    
    keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_users")]]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_create_tag_menu(query, context):
    """ŸÖŸÜŸà€å ÿß€åÿ¨ÿßÿØ ÿ™⁄Ø ÿ¨ÿØ€åÿØ"""
    text = "‚ûï <b>ÿß€åÿ¨ÿßÿØ ÿ™⁄Ø ÿ¨ÿØ€åÿØ</b>\n\n"
    text += "ÿ™⁄Ø‚ÄåŸáÿß€å Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂:\n"
    text += "‚Ä¢ <code>regular</code> - ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿπÿßÿØ€å\n"
    text += "‚Ä¢ <code>vip</code> - ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ Ÿà€å⁄òŸá\n"
    text += "‚Ä¢ <code>premium</code> - ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ Ÿæÿ±ŸÖ€åŸàŸÖ\n"
    text += "‚Ä¢ <code>bronze</code> - ÿ®ÿ±ŸÜÿ≤€å\n"
    text += "‚Ä¢ <code>silver</code> - ŸÜŸÇÿ±Ÿá‚Äåÿß€å\n"
    text += "‚Ä¢ <code>gold</code> - ÿ∑ŸÑÿß€å€å\n\n"
    text += "€åÿß ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿ™⁄Ø ÿØŸÑÿÆŸàÿßŸá ÿÆŸàÿØ ÿ±ÿß ÿ®ÿ≥ÿßÿ≤€åÿØ.\n\n"
    text += "üè∑ ŸÜÿßŸÖ ÿ™⁄Ø ÿ¨ÿØ€åÿØ ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ:"
    
    context.user_data['state'] = WAITING_USER_TAG
    context.user_data['creating_new_tag'] = True
    
    keyboard = [[InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="admin_user_tags")]]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_edit_tags_menu(query):
    """ŸÖŸÜŸà€å Ÿà€åÿ±ÿß€åÿ¥ ÿ™⁄Ø‚ÄåŸáÿß"""
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT DISTINCT user_tag, COUNT(*) as count 
        FROM users 
        WHERE user_tag IS NOT NULL AND user_tag != ''
        GROUP BY user_tag
    """)
    tags = cursor.fetchall()
    cursor.close()
    conn.close()
    
    text = "‚úèÔ∏è <b>Ÿà€åÿ±ÿß€åÿ¥ ÿ™⁄Ø‚ÄåŸáÿß</b>\n\n"
    text += "€å⁄© ÿ™⁄Ø ÿ±ÿß ÿ®ÿ±ÿß€å ÿ™ÿ∫€å€åÿ± ŸÜÿßŸÖ €åÿß ÿ≠ÿ∞ŸÅ ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:\n\n"
    
    keyboard = []
    
    for tag, count in tags:
        text += f"‚Ä¢ {tag} ({count} ⁄©ÿßÿ±ÿ®ÿ±)\n"
        keyboard.append([
            InlineKeyboardButton(
                f"üè∑ {tag}",
                callback_data=f"admin_edittag_{tag}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_user_tags")])
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_tag_edit_options(query, tag):
    """ŸÜŸÖÿß€åÿ¥ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å Ÿà€åÿ±ÿß€åÿ¥ €å⁄© ÿ™⁄Ø"""
    user_count = get_users_count(tag=tag)
    
    text = f"‚úèÔ∏è <b>Ÿà€åÿ±ÿß€åÿ¥ ÿ™⁄Ø: {tag}</b>\n\n"
    text += f"üë• ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {user_count}\n\n"
    text += "⁄ÜŸá ⁄©ÿßÿ±€å ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿßŸÜÿ¨ÿßŸÖ ÿØŸá€åÿØÿü"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è ÿ™ÿ∫€å€åÿ± ŸÜÿßŸÖ", callback_data=f"admin_renametag_{tag}")],
        [InlineKeyboardButton("üóë ÿ≠ÿ∞ŸÅ ÿ™⁄Ø", callback_data=f"admin_deletetag_{tag}")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_edit_tags")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def process_delete_tag(query, tag):
    """ÿ≠ÿ∞ŸÅ €å⁄© ÿ™⁄Ø (ÿ™ÿ®ÿØ€åŸÑ ÿ®Ÿá regular)"""
    conn = db.get_connection()
    cursor = conn.cursor()
    
    # ÿ™ÿ®ÿØ€åŸÑ ŸáŸÖŸá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿß€åŸÜ ÿ™⁄Ø ÿ®Ÿá regular
    cursor.execute(
        "UPDATE users SET user_tag = 'regular' WHERE user_tag = %s",
        (tag,)
    )
    affected = cursor.rowcount
    conn.commit()
    cursor.close()
    conn.close()
    
    log_admin_action(query.from_user.id, 'delete_tag', 0, f"ÿ≠ÿ∞ŸÅ ÿ™⁄Ø {tag} - {affected} ⁄©ÿßÿ±ÿ®ÿ±")
    
    text = f"‚úÖ ÿ™⁄Ø <code>{tag}</code> ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.\n\n"
    text += f"üë• {affected} ⁄©ÿßÿ±ÿ®ÿ± ÿ®Ÿá ÿ™⁄Ø <code>regular</code> ÿ™ÿ®ÿØ€åŸÑ ÿ¥ÿØŸÜÿØ."
    
    keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_user_tags")]]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ==================== HELPER FUNCTIONS (FIXED) ====================

async def process_add_traffic(query, order_id, gb_amount, context):
    """ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≠ÿ¨ŸÖ ÿ≥ÿ±Ÿà€åÿ≥"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    order = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if not order:
        await query.message.edit_text("‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    marzban_username = order.get('marzban_username')
    if not marzban_username:
        await query.message.edit_text("‚ùå ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿ±ÿ≤ÿ®ÿßŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÅÿπŸÑ€å
    user_data = await marzban.get_user(marzban_username)
    if not user_data:
        await query.message.edit_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± ÿØÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    current_limit = user_data.get('data_limit', 0)
    new_limit = current_limit + (gb_amount * 1024**3)  # ÿ™ÿ®ÿØ€åŸÑ ÿ®Ÿá ÿ®ÿß€åÿ™
    
    # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿØÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ
    success = await marzban.modify_user(
        username=marzban_username,
        data_limit=new_limit
    )
    
    if success:
        # ÿØÿ±€åÿßŸÅÿ™ ŸÜÿßŸÖ Ÿæ⁄©€åÿ¨
        pkg = PACKAGES.get(order.get('package_id', ''), {})
        package_name = pkg.get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
        
        await query.message.edit_text(
            f"‚úÖ <b>ÿ≠ÿ¨ŸÖ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ!</b>\n\n"
            f"‚Ä¢ ÿ≠ÿ¨ŸÖ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØŸá: {gb_amount} GB\n"
            f"‚Ä¢ ÿ≠ÿ¨ŸÖ ŸÇÿ®ŸÑ€å: {current_limit / 1024**3:.2f} GB\n"
            f"‚Ä¢ ÿ≠ÿ¨ŸÖ ÿ¨ÿØ€åÿØ: {new_limit / 1024**3:.2f} GB",
            parse_mode='HTML'
        )
        
        # ŸÑÿß⁄Ø ÿßÿØŸÖ€åŸÜ
        log_admin_action(query.from_user.id, 'add_traffic', order['user_id'], 
                        f"ÿßŸÅÿ≤ÿß€åÿ¥ {gb_amount}GB ÿ®Ÿá ÿ≥ÿ±Ÿà€åÿ≥ {marzban_username}")
        
        # ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±
        try:
            await context.bot.send_message(
                order['user_id'],
                f"‚ú® <b>ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≠ÿ¨ŸÖ ÿ≥ÿ±Ÿà€åÿ≥</b>\n\n"
                f"ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß {gb_amount} GB ÿ≠ÿ¨ŸÖ ÿßÿ∂ÿßŸÅŸá ÿØÿ±€åÿßŸÅÿ™ ⁄©ÿ±ÿØ! üéâ\n\n"
                f"üì¶ Ÿæ⁄©€åÿ¨: {package_name}\n"
                f"üíæ ÿ≠ÿ¨ŸÖ ÿ¨ÿØ€åÿØ: {new_limit / 1024**3:.2f} GB",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá: {e}")
    else:
        await query.message.edit_text("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≠ÿ¨ŸÖ.")




# ==================== HELPER FUNCTIONS ====================

async def process_add_traffic(query, order_id, gb_amount, context):
    """ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≠ÿ¨ŸÖ ÿ≥ÿ±Ÿà€åÿ≥"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    order = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if not order:
        await query.message.edit_text("‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    marzban_username = order.get('marzban_username')
    if not marzban_username:
        await query.message.edit_text("‚ùå ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿ±ÿ≤ÿ®ÿßŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÅÿπŸÑ€å
    user_data = await marzban.get_user(marzban_username)
    if not user_data:
        await query.message.edit_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± ÿØÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    current_limit = user_data.get('data_limit', 0)
    new_limit = current_limit + (gb_amount * 1024**3)  # ÿ™ÿ®ÿØ€åŸÑ ÿ®Ÿá ÿ®ÿß€åÿ™
    
    # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿØÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ
    success = await marzban.modify_user(
        username=marzban_username,
        data_limit=new_limit
    )
    
    if success:
        await query.message.edit_text(
            f"‚úÖ <b>ÿ≠ÿ¨ŸÖ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ!</b>\n\n"
            f"‚Ä¢ ÿ≠ÿ¨ŸÖ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØŸá: {gb_amount} GB\n"
            f"‚Ä¢ ÿ≠ÿ¨ŸÖ ŸÇÿ®ŸÑ€å: {current_limit / 1024**3:.2f} GB\n"
            f"‚Ä¢ ÿ≠ÿ¨ŸÖ ÿ¨ÿØ€åÿØ: {new_limit / 1024**3:.2f} GB",
            parse_mode='HTML'
        )
        
        # ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±
        try:
            await context.bot.send_message(
                order['user_id'],
                f"‚ú® <b>ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≠ÿ¨ŸÖ ÿ≥ÿ±Ÿà€åÿ≥</b>\n\n"
                f"ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß {gb_amount} GB ÿ≠ÿ¨ŸÖ ÿßÿ∂ÿßŸÅŸá ÿØÿ±€åÿßŸÅÿ™ ⁄©ÿ±ÿØ! üéâ\n\n"
                f"üì¶ Ÿæ⁄©€åÿ¨: {order['package_name']}\n"
                f"üíæ ÿ≠ÿ¨ŸÖ ÿ¨ÿØ€åÿØ: {new_limit / 1024**3:.2f} GB",
                parse_mode='HTML'
            )
        except:
            pass
    else:
        await query.message.edit_text("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßŸÅÿ≤ÿß€åÿ¥ ÿ≠ÿ¨ŸÖ.")


async def process_extend_service(query, order_id, days, context):
    """ÿ™ŸÖÿØ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥ - ÿ®ÿß ŸÖÿ™ÿØ PATCH"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    order = cursor.fetchone()

    if not order:
        cursor.close()
        conn.close()
        await query.message.edit_text("‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return

    marzban_username = order.get('marzban_username')
    if not marzban_username:
        cursor.close()
        conn.close()
        await query.message.edit_text("‚ùå ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿ±ÿ≤ÿ®ÿßŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return

    # ‚úÖ ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÅÿπŸÑ€å ÿßÿ≤ Marzban
    user_data = await marzban.get_user(marzban_username)
    if not user_data:
        cursor.close()
        conn.close()
        await query.message.edit_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± ÿØÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return

    # ‚úÖ ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß€å ÿ¨ÿØ€åÿØ
    current_expire_timestamp = user_data.get('expire', 0)
    
    # ÿ™ÿ®ÿØ€åŸÑ timestamp
    if current_expire_timestamp:
        if current_expire_timestamp > 10000000000:  # ŸÖ€åŸÑ€å‚Äåÿ´ÿßŸÜ€åŸá
            current_expire = datetime.fromtimestamp(current_expire_timestamp / 1000)
        else:  # ÿ´ÿßŸÜ€åŸá
            current_expire = datetime.fromtimestamp(current_expire_timestamp)
    else:
        current_expire = datetime.now()
    
    # ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ™ÿßÿ±€åÿÆ ÿ¨ÿØ€åÿØ
    if current_expire < datetime.now():
        new_expire = datetime.now() + timedelta(days=days)
    else:
        new_expire = current_expire + timedelta(days=days)
    
    # ÿ™ÿ®ÿØ€åŸÑ ÿ®Ÿá timestamp ÿ´ÿßŸÜ€åŸá (ŸÜŸá ŸÖ€åŸÑ€å‚Äåÿ´ÿßŸÜ€åŸá)
    new_expire_timestamp = int(new_expire.timestamp())

    # ‚úÖ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ™Ÿà⁄©ŸÜ
    if not marzban.token:
        await marzban.get_token()

    try:
        headers = {
            "Authorization": f"Bearer {marzban.token}",
            "Content-Type": "application/json"
        }
        
        # ‚úÖ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ PATCH ÿ®Ÿá ÿ¨ÿß€å PUT (ŸÅŸÇÿ∑ ŸÅ€åŸÑÿØŸáÿß€å ÿ™ÿ∫€å€åÿ±€åÿßŸÅÿ™Ÿá)
        update_data = {
            "expire": new_expire_timestamp,
            "status": "active"
        }
        
        logger.info(f"üîÑ ÿ™ŸÖÿØ€åÿØ {marzban_username}: expire={new_expire_timestamp}, date={new_expire}")
        
        # ÿßÿ±ÿ≥ÿßŸÑ ÿ®ÿß PATCH
        async with aiohttp.ClientSession() as session:
            async with session.put(  # ‚úÖ ÿ®ÿπÿ∂€å ŸÜÿ≥ÿÆŸá‚ÄåŸáÿß€å ŸÖÿ±ÿ≤ÿ®ÿßŸÜ PUT ŸÖ€å‚ÄåÿÆŸàÿßŸáŸÜÿØ
                f"{marzban.url}/api/user/{marzban_username}",
                json={
                    "username": marzban_username,
                    "expire": new_expire_timestamp,
                    "status": "active",
                    "data_limit": user_data.get('data_limit'),
                    "data_limit_reset_strategy": user_data.get('data_limit_reset_strategy', 'no_reset'),
                    "proxies": user_data.get('proxies', {}),
                    "inbounds": user_data.get('inbounds', {})
                },
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=15)
            ) as resp:
                response_text = await resp.text()
                
                if resp.status == 200:
                    # ‚úÖ ŸÖŸàŸÅŸÇ€åÿ™
                    cursor.execute(
                        "UPDATE orders SET expires_at = %s, status = 'active' WHERE id = %s",
                        (new_expire, order_id)
                    )
                    conn.commit()

                    pkg = PACKAGES.get(order.get('package_id', ''), {})
                    package_name = pkg.get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')

                    await query.message.edit_text(
                        f"‚úÖ <b>ÿ≥ÿ±Ÿà€åÿ≥ ÿ™ŸÖÿØ€åÿØ ÿ¥ÿØ!</b>\n\n"
                        f"üì¶ Ÿæ⁄©€åÿ¨: {package_name}\n"
                        f"‚è∞ ÿ™ÿπÿØÿßÿØ ÿ±Ÿàÿ≤: {days} ÿ±Ÿàÿ≤\n"
                        f"üìÖ ÿ™ÿßÿ±€åÿÆ ŸÇÿ®ŸÑ€å: {format_date(current_expire)}\n"
                        f"üìÖ ÿ™ÿßÿ±€åÿÆ ÿ¨ÿØ€åÿØ: {format_date(new_expire)}\n"
                        f"üë§ Username: <code>{marzban_username}</code>",
                        parse_mode='HTML'
                    )

                    log_admin_action(
                        query.from_user.id, 
                        'extend_service', 
                        order['user_id'],
                        f"ÿ™ŸÖÿØ€åÿØ {days} ÿ±Ÿàÿ≤Ÿá {marzban_username}"
                    )

                    try:
                        await context.bot.send_message(
                            order['user_id'],
                            f"‚ú® <b>ÿ™ŸÖÿØ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥</b>\n\n"
                            f"ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß {days} ÿ±Ÿàÿ≤ ÿ™ŸÖÿØ€åÿØ ÿ¥ÿØ! üéâ\n\n"
                            f"üì¶ Ÿæ⁄©€åÿ¨: {package_name}\n"
                            f"‚è∞ ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß: {format_date(new_expire)}\n"
                            f"üë§ Username: <code>{marzban_username}</code>",
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá: {e}")
                        
                else:
                    logger.error(f"‚ùå ÿÆÿ∑ÿß€å Marzban {resp.status}: {response_text}")
                    await query.message.edit_text(
                        f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ™ŸÖÿØ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥\n\n"
                        f"⁄©ÿØ ÿÆÿ∑ÿß: {resp.status}\n"
                        f"Ÿæ€åÿßŸÖ: {response_text[:300]}\n\n"
                        f"ŸÑÿ∑ŸÅÿßŸã ŸÑÿß⁄Ø ÿ≥ÿ±Ÿàÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ."
                    )
    
    except Exception as e:
        logger.error(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± process_extend_service: {e}", exc_info=True)
        await query.message.edit_text(
            f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá Marzban\n\n{str(e)}"
        )
    finally:
        cursor.close()
        conn.close()



async def process_disable_service(query, order_id, context):
    """ÿ∫€åÿ±ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ ÿ≥ÿ±Ÿà€åÿ≥"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    order = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if not order:
        await query.message.edit_text("‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    marzban_username = order.get('marzban_username')
    if not marzban_username:
        await query.message.edit_text("‚ùå ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿ±ÿ≤ÿ®ÿßŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    # ÿØÿ±€åÿßŸÅÿ™ ŸÜÿßŸÖ Ÿæ⁄©€åÿ¨
    pkg = PACKAGES.get(order.get('package_id', ''), {})
    package_name = pkg.get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
    
    # ÿ®ÿ±ÿ±ÿ≥€å ÿ™Ÿà⁄©ŸÜ ŸÖÿ±ÿ≤ÿ®ÿßŸÜ
    if not marzban.token:
        await marzban.get_token()
    
    try:
        headers = {
            "Authorization": f"Bearer {marzban.token}",
            "Content-Type": "application/json"
        }
        
        # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÅÿπŸÑ€å ⁄©ÿßÿ±ÿ®ÿ± ÿßÿ≤ ŸÖÿ±ÿ≤ÿ®ÿßŸÜ
        user_data = await marzban.get_user(marzban_username)
        if not user_data:
            await query.message.edit_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± ÿØÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
            return
        
        # ‚úÖ ÿ≥ÿßÿÆÿ™ ÿØÿßÿØŸá ⁄©ÿßŸÖŸÑ ÿ®ÿ±ÿß€å ÿ∫€åÿ±ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å
        update_data = {
            "username": marzban_username,
            "status": "disabled",  # ÿ™ÿ∫€å€åÿ± Ÿàÿ∂ÿπ€åÿ™ ÿ®Ÿá disabled
            "proxies": user_data.get('proxies', {}),
            "inbounds": user_data.get('inbounds', {}),
            "expire": user_data.get('expire'),
            "data_limit": user_data.get('data_limit'),
            "data_limit_reset_strategy": user_data.get('data_limit_reset_strategy', 'no_reset'),
            "note": user_data.get('note', ''),
            "on_hold_timeout": user_data.get('on_hold_timeout'),
            "on_hold_expire_duration": user_data.get('on_hold_expire_duration')
        }
        
        # ÿßÿ±ÿ≥ÿßŸÑ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿ®Ÿá Marzban
        async with aiohttp.ClientSession() as session:
            async with session.put(
                f"{marzban.url}/api/user/{marzban_username}",
                json=update_data,
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=15)
            ) as resp:
                if resp.status == 200:
                    # ŸÖŸàŸÅŸÇ€åÿ™‚Äåÿ¢ŸÖ€åÿ≤ ÿ®ŸàÿØ
                    conn = db.get_connection()
                    cursor = conn.cursor()
                    cursor.execute(
                        "UPDATE orders SET status = %s WHERE id = %s",
                        ('expired', order_id)
                    )
                    conn.commit()
                    cursor.close()
                    conn.close()
                    
                    await query.message.edit_text(
                        f"‚úÖ <b>ÿ≥ÿ±Ÿà€åÿ≥ ÿ∫€åÿ±ŸÅÿπÿßŸÑ ÿ¥ÿØ</b>\n\n"
                        f"üì¶ Ÿæ⁄©€åÿ¨: {package_name}\n"
                        f"üë§ ⁄©ÿßÿ±ÿ®ÿ±: {order['user_id']}\n"
                        f"üîå Ÿàÿ∂ÿπ€åÿ™ Marzban: ÿ∫€åÿ±ŸÅÿπÿßŸÑ\n"
                        f"üë§ Username: <code>{marzban_username}</code>",
                        parse_mode='HTML'
                    )
                    
                    # ŸÑÿß⁄Ø ÿßÿØŸÖ€åŸÜ
                    log_admin_action(
                        query.from_user.id, 
                        'disable_service', 
                        order['user_id'], 
                        f"ÿ∫€åÿ±ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å {marzban_username}"
                    )
                    
                    # ÿßÿ∑ŸÑÿßÿπ€åŸá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±
                    try:
                        await context.bot.send_message(
                            order['user_id'],
                            f"‚ö†Ô∏è <b>ÿ∫€åÿ±ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ÿ≥ÿ±Ÿà€åÿ≥</b>\n\n"
                            f"ÿ≥ÿ±Ÿà€åÿ≥ {package_name} ÿ¥ŸÖÿß ÿ™Ÿàÿ≥ÿ∑ ÿßÿØŸÖ€åŸÜ ÿ∫€åÿ±ŸÅÿπÿßŸÑ ÿ¥ÿØ.\n\n"
                            f"üë§ Username: <code>{marzban_username}</code>\n\n"
                            f"ÿ®ÿ±ÿß€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åÿ¥ÿ™ÿ± ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.",
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá: {e}")
                        
                else:
                    error_text = await resp.text()
                    logger.error(f"ÿÆÿ∑ÿß€å Marzban: {resp.status} - {error_text}")
                    await query.message.edit_text(
                        f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ∫€åÿ±ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ÿØÿ± Marzban\n\n"
                        f"⁄©ÿØ ÿÆÿ∑ÿß: {resp.status}\n"
                        f"Ÿæ€åÿßŸÖ: {error_text[:200]}"
                    )
    
    except Exception as e:
        logger.error(f"ÿÆÿ∑ÿß ÿØÿ± process_disable_service: {e}")
        await query.message.edit_text(
            f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá Marzban\n\n{str(e)}"
        )





async def process_delete_service_admin(query, order_id, context):
    """ÿ≠ÿ∞ŸÅ ⁄©ÿßŸÖŸÑ ÿ≥ÿ±Ÿà€åÿ≥"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
    order = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if not order:
        await query.message.edit_text("‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    
    marzban_username = order.get('marzban_username')
    
    # ÿ≠ÿ∞ŸÅ ÿßÿ≤ ŸÖÿ±ÿ≤ÿ®ÿßŸÜ
    success = await marzban.delete_user(marzban_username)
    
    # ÿØÿ±€åÿßŸÅÿ™ ŸÜÿßŸÖ Ÿæ⁄©€åÿ¨
    pkg = PACKAGES.get(order.get('package_id', ''), {})
    package_name = pkg.get('name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
    
    if success:
        update_order_status(order_id, 'deleted')
        
        await query.message.edit_text(
            f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.\n\n"
            f"üì¶ Ÿæ⁄©€åÿ¨: {package_name}\n"
            f"üë§ ⁄©ÿßÿ±ÿ®ÿ±: {order['user_id']}"
        )
        
        # ŸÑÿß⁄Ø ÿßÿØŸÖ€åŸÜ
        log_admin_action(query.from_user.id, 'delete_service', order['user_id'], 
                        f"ÿ≠ÿ∞ŸÅ ÿ≥ÿ±Ÿà€åÿ≥ {marzban_username}")
    else:
        await query.message.edit_text("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ≠ÿ∞ŸÅ ÿ≥ÿ±Ÿà€åÿ≥ ÿßÿ≤ ŸÖÿ±ÿ≤ÿ®ÿßŸÜ.")




async def process_reactivate_service(query, order_id, context):
    """ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ŸÖÿ¨ÿØÿØ ÿ≥ÿ±Ÿà€åÿ≥ ŸÖŸÜŸÇÿ∂€å"""
    keyboard = [
        [InlineKeyboardButton("‚è∞ ÿ™ŸÖÿØ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data=f"admin_service_extend_{order_id}")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data=f"admin_service_detail_{order_id}")]
    ]
    
    await safe_edit_message(
        query,
        "‚è∞ ÿ®ÿ±ÿß€å ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ŸÖÿ¨ÿØÿØÿå ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿ≥ÿ±Ÿà€åÿ≥ ÿ±ÿß ÿ™ŸÖÿØ€åÿØ ⁄©ŸÜ€åÿØ.\n\n"
        "ÿßÿ≤ ÿØ⁄©ŸÖŸá ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_admin_financial_menu(query):
    """ŸÖŸÜŸà€å ŸÖÿØ€åÿ±€åÿ™ ŸÖÿßŸÑ€å ÿ®ÿß ÿ¢ŸÖÿßÿ±"""
    # ÿØÿ±€åÿßŸÅÿ™ ÿ¢ŸÖÿßÿ± ŸÖÿßŸÑ€å
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    # ⁄©ŸÑ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß
    cursor.execute("SELECT COUNT(*) as count, SUM(amount) as total FROM transactions")
    trans_stats = cursor.fetchone()
    
    # Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß€å ŸÖŸàŸÅŸÇ
    cursor.execute("""
        SELECT COUNT(*) as count, SUM(amount) as total 
        FROM payments 
        WHERE status = 'success'
    """)
    payment_stats = cursor.fetchone()
    
    # ⁄©ŸàŸæŸÜ‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ
    cursor.execute("""
        SELECT COUNT(*) as count 
        FROM coupons 
        WHERE is_active = 1 AND (expires_at IS NULL OR expires_at > NOW())
    """)
    coupon_count = cursor.fetchone()
    
    cursor.close()
    conn.close()
    
    text = "üí∞ <b>ŸÖÿØ€åÿ±€åÿ™ ŸÖÿßŸÑ€å</b>\n\n"
    text += f"üìä ⁄©ŸÑ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß: {trans_stats['count'] or 0}\n"
    text += f"üíµ ŸÖÿ®ŸÑÿ∫ ⁄©ŸÑ: {format_price(trans_stats['total'] or 0)}\n\n"
    text += f"‚úÖ Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß€å ŸÖŸàŸÅŸÇ: {payment_stats['count'] or 0}\n"
    text += f"üí≥ ÿØÿ±ÿ¢ŸÖÿØ Ÿæÿ±ÿØÿßÿÆÿ™: {format_price(payment_stats['total'] or 0)}\n\n"
    text += f"üéü ⁄©ŸàŸæŸÜ‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ: {coupon_count['count'] or 0}\n\n"
    text += "⁄Øÿ≤€åŸÜŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:"
    
    keyboard = [
        [InlineKeyboardButton("üìä ⁄Øÿ≤ÿßÿ±ÿ¥ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß", callback_data="admin_transactions")],
        [InlineKeyboardButton("üí≥ ⁄Øÿ≤ÿßÿ±ÿ¥ Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß", callback_data="admin_payments")],
        [InlineKeyboardButton("üéü ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß", callback_data="admin_coupons")],
        [InlineKeyboardButton("üéâ ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸÖŸæ€åŸÜ‚ÄåŸáÿß", callback_data="admin_campaigns")],
        [InlineKeyboardButton("üì• ÿØÿßŸÜŸÑŸàÿØ ⁄Øÿ≤ÿßÿ±ÿ¥ Excel", callback_data="admin_export_excel")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_panel")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def show_admin_transactions(query, page=1):
    """ŸÜŸÖÿß€åÿ¥ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß€å ŸÖÿßŸÑ€å"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    per_page = 10
    offset = (page - 1) * per_page
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß
    cursor.execute("""
        SELECT t.*, u.first_name, u.username 
        FROM transactions t
        LEFT JOIN users u ON t.user_id = u.user_id
        ORDER BY t.created_at DESC
        LIMIT %s OFFSET %s
    """, (per_page, offset))
    transactions = cursor.fetchall()
    
    # ÿ™ÿπÿØÿßÿØ ⁄©ŸÑ
    cursor.execute("SELECT COUNT(*) as total FROM transactions")
    total = cursor.fetchone()['total']
    
    cursor.close()
    conn.close()
    
    total_pages = (total + per_page - 1) // per_page
    
    if not transactions:
        text = "üìä <b>⁄Øÿ≤ÿßÿ±ÿ¥ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß</b>\n\n‚ùå ÿ™ÿ±ÿß⁄©ŸÜÿ¥€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."
    else:
        text = f"üìä <b>⁄Øÿ≤ÿßÿ±ÿ¥ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß</b>\n\n"
        text += f"üìÑ ÿµŸÅÿ≠Ÿá {page} ÿßÿ≤ {total_pages}\n"
        text += f"üìà ⁄©ŸÑ ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß: {total}\n\n"
        
        for trans in transactions:
            trans_type = {
                'charge': '‚ûï ÿ¥ÿßÿ±⁄ò',
                'purchase': 'üõí ÿÆÿ±€åÿØ',
                'refund': '‚Ü©Ô∏è ÿ®ÿßÿ≤⁄Øÿ¥ÿ™',
                'referral': 'üéÅ ÿ±ŸÅÿ±ÿßŸÑ',
                'admin_add': '‚öôÔ∏è ÿßÿØŸÖ€åŸÜ',
                'admin_deduct': '‚ö†Ô∏è ⁄©ÿ≥ÿ±'
            }.get(trans['type'], trans['type'])
            
            name = trans.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
            username = f"@{trans['username']}" if trans.get('username') else 'ÿ®ÿØŸàŸÜ €åŸàÿ≤ÿ±'
            
            text += f"üîπ <b>{trans_type}</b>\n"
            text += f"   üë§ {name} ({username})\n"
            text += f"   üí∞ {format_price(trans['amount'])}\n"
            text += f"   üìÖ {format_date(trans['created_at'])}\n"
            if trans.get('description'):
                text += f"   üìù {trans['description'][:50]}\n"
            text += "\n"
    
    # ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿµŸÅÿ≠Ÿá‚Äåÿ®ŸÜÿØ€å
    keyboard = []
    nav_buttons = []
    
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è ŸÇÿ®ŸÑ€å", callback_data=f"admin_transactions_page_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"üìÑ {page}/{total_pages}", callback_data="noop"))
    
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("ÿ®ÿπÿØ€å ‚ñ∂Ô∏è", callback_data=f"admin_transactions_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([
        InlineKeyboardButton("üì• Excel", callback_data="admin_export_transactions"),
        InlineKeyboardButton("üîç ÿ¨ÿ≥ÿ™ÿ¨Ÿà", callback_data="admin_search_transaction")
    ])
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_financial")])
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_admin_payments(query, page=1):
    """ŸÜŸÖÿß€åÿ¥ ⁄Øÿ≤ÿßÿ±ÿ¥ Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß€å ÿ¢ŸÜŸÑÿß€åŸÜ"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    per_page = 10
    offset = (page - 1) * per_page
    
    cursor.execute("""
        SELECT p.*, u.first_name, u.username
        FROM payments p
        LEFT JOIN users u ON p.user_id = u.user_id
        ORDER BY p.created_at DESC
        LIMIT %s OFFSET %s
    """, (per_page, offset))
    payments = cursor.fetchall()
    
    cursor.execute("SELECT COUNT(*) as total FROM payments")
    total = cursor.fetchone()['total']
    
    # ÿ¢ŸÖÿßÿ± Ÿàÿ∂ÿπ€åÿ™‚ÄåŸáÿß
    cursor.execute("""
        SELECT 
            status,
            COUNT(*) as count,
            SUM(amount) as total
        FROM payments
        GROUP BY status
    """)
    status_stats = cursor.fetchall()
    
    cursor.close()
    conn.close()
    
    total_pages = (total + per_page - 1) // per_page
    
    text = f"üí≥ <b>⁄Øÿ≤ÿßÿ±ÿ¥ Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß</b>\n\n"
    
    # ÿ¢ŸÖÿßÿ±
    for stat in status_stats:
        status_emoji = {
            'pending': '‚è≥',
            'success': '‚úÖ',
            'failed': '‚ùå',
            'cancelled': 'üö´'
        }.get(stat['status'], '‚ùì')
        
        text += f"{status_emoji} {stat['status']}: {stat['count']} ({format_price(stat['total'] or 0)})\n"
    
    text += f"\nüìÑ ÿµŸÅÿ≠Ÿá {page} ÿßÿ≤ {total_pages}\n\n"
    
    if payments:
        for payment in payments:
            status_emoji = {
                'pending': '‚è≥',
                'success': '‚úÖ',
                'failed': '‚ùå',
                'cancelled': 'üö´'
            }.get(payment['status'], '‚ùì')
            
            name = payment.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
            username = f"@{payment['username']}" if payment.get('username') else ''
            
            text += f"{status_emoji} <b>{payment['status']}</b>\n"
            text += f"   üë§ {name} {username}\n"
            text += f"   üí∞ {format_price(payment['amount'])}\n"
            text += f"   üî¢ Authority: <code>{payment.get('authority', 'N/A')[:20]}</code>\n"
            text += f"   üìÖ {format_date(payment['created_at'])}\n\n"
    else:
        text += "‚ùå Ÿæÿ±ÿØÿßÿÆÿ™€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."
    
    # ÿØ⁄©ŸÖŸá‚ÄåŸáÿß
    keyboard = []
    nav_buttons = []
    
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"admin_payments_page_{page-1}"))
    nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"admin_payments_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([
        InlineKeyboardButton("üì• Excel", callback_data="admin_export_payments"),
        InlineKeyboardButton("üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å", callback_data="admin_payments")
    ])
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_financial")])
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_admin_coupons_menu(query):
    """ŸÖŸÜŸà€å ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    # ÿ¢ŸÖÿßÿ± ⁄©ŸàŸæŸÜ‚ÄåŸáÿß
    cursor.execute("""
        SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active,
            SUM(used_count) as total_used
        FROM coupons
    """)
    stats = cursor.fetchone()
    
    # ⁄©ŸàŸæŸÜ‚ÄåŸáÿß€å ÿßÿÆ€åÿ±
    cursor.execute("""
        SELECT * FROM coupons 
        ORDER BY created_at DESC 
        LIMIT 5
    """)
    recent_coupons = cursor.fetchall()
    
    cursor.close()
    conn.close()
    
    text = "üéü <b>ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß€å ÿ™ÿÆŸÅ€åŸÅ</b>\n\n"
    text += f"üìä ⁄©ŸÑ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß: {stats['total'] or 0}\n"
    text += f"‚úÖ ŸÅÿπÿßŸÑ: {stats['active'] or 0}\n"
    text += f"üìà ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ¥ÿØŸá: {stats['total_used'] or 0}\n\n"
    
    if recent_coupons:
        text += "<b>üïê ÿ¢ÿÆÿ±€åŸÜ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß:</b>\n"
        for coupon in recent_coupons:
            status = "‚úÖ" if coupon['is_active'] else "‚ùå"
            discount_type = f"{coupon['discount_percent']}%" if coupon.get('discount_percent') else f"{format_price(coupon.get('discount_amount', 0))}"
            
            text += f"{status} <code>{coupon['code']}</code> - {discount_type}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï ÿß€åÿ¨ÿßÿØ ⁄©ŸàŸæŸÜ ÿ¨ÿØ€åÿØ", callback_data="admin_create_coupon")],
        [InlineKeyboardButton("üìã ŸÑ€åÿ≥ÿ™ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß", callback_data="admin_list_coupons")],
        [InlineKeyboardButton("üîç ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ⁄©ŸàŸæŸÜ", callback_data="admin_search_coupon")],
        [InlineKeyboardButton("üìä ÿ¢ŸÖÿßÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá", callback_data="admin_coupon_stats")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_financial")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def start_create_coupon(query, context):
    """ÿ¥ÿ±Ÿàÿπ ŸÅÿ±ÿ¢€åŸÜÿØ ÿß€åÿ¨ÿßÿØ ⁄©ŸàŸæŸÜ"""
    context.user_data['state'] = WAITING_COUPON_DATA
    context.user_data['coupon_data'] = {}
    
    text = "‚ûï <b>ÿß€åÿ¨ÿßÿØ ⁄©ŸàŸæŸÜ ÿ™ÿÆŸÅ€åŸÅ</b>\n\n"
    text += "ŸÑÿ∑ŸÅÿßŸã ⁄©ÿØ ⁄©ŸàŸæŸÜ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n"
    text += "(ŸÅŸÇÿ∑ ÿ≠ÿ±ŸàŸÅ ÿßŸÜ⁄ØŸÑ€åÿ≥€åÿå ÿßÿπÿØÿßÿØ Ÿà ÿÆÿ∑ ÿ™€åÿ±Ÿá)\n\n"
    text += "ŸÖÿ´ÿßŸÑ: <code>SUMMER2025</code>"
    
    keyboard = [[InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="admin_coupons")]]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def process_coupon_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ÿæÿ±ÿØÿßÿ≤ÿ¥ ŸÖÿ±ÿßÿ≠ŸÑ ÿß€åÿ¨ÿßÿØ ⁄©ŸàŸæŸÜ ÿ∑ÿ®ŸÇ ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿ¨ÿØ€åÿØ"""
    text = update.message.text.strip()
    coupon_data = context.user_data.get('coupon_data', {})

    if 'code' not in coupon_data:
        # ŸÖÿ±ÿ≠ŸÑŸá 1: ⁄©ÿØ ⁄©ŸàŸæŸÜ
        if not re.match(r'^[A-Za-z0-9\-_]+$', text):
            await update.message.reply_text("‚ùå ⁄©ÿØ ⁄©ŸàŸæŸÜ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±! ŸÅŸÇÿ∑ ÿ≠ÿ±ŸàŸÅÿå ÿßÿπÿØÿßÿØ Ÿà ÿÆÿ∑ ÿ™€åÿ±Ÿá.")
            return

        # ⁄Ü⁄© ÿ™⁄©ÿ±ÿßÿ±€å ŸÜÿ®ŸàÿØŸÜ
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM coupons WHERE code = %s", (text,))
        if cursor.fetchone():
            cursor.close()
            conn.close()
            await update.message.reply_text("‚ùå ÿß€åŸÜ ⁄©ÿØ ŸÇÿ®ŸÑÿßŸã ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ¥ÿØŸá!")
            return
        cursor.close()
        conn.close()

        coupon_data['code'] = text
        context.user_data['coupon_data'] = coupon_data

        keyboard = [
            [InlineKeyboardButton("üìä ÿØÿ±ÿµÿØ", callback_data="coupon_type_percent")],
            [InlineKeyboardButton("üí∞ ŸÖÿ®ŸÑÿ∫ ÿ´ÿßÿ®ÿ™", callback_data="coupon_type_amount")],
            [InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="admin_coupons")]
        ]

        await update.message.reply_text(
            f"‚úÖ ⁄©ÿØ: <code>{text}</code>\n\nŸÜŸàÿπ ÿ™ÿÆŸÅ€åŸÅ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    elif 'discount_value' not in coupon_data:
        # ŸÖÿ±ÿ≠ŸÑŸá 2: ŸÖŸÇÿØÿßÿ± ÿ™ÿÆŸÅ€åŸÅ
        try:
            value = int(text.replace(',', ''))
            coupon_data['discount_value'] = value
            context.user_data['coupon_data'] = coupon_data

            await update.message.reply_text(
                "‚úÖ ÿ™ÿÆŸÅ€åŸÅ ÿ´ÿ®ÿ™ ÿ¥ÿØ.\n\nÿ≠ÿØÿß⁄©ÿ´ÿ± ÿ™ÿπÿØÿßÿØ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\nÿ®ÿ±ÿß€å ŸÜÿßŸÖÿ≠ÿØŸàÿØ 0 Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ."
            )
        except ValueError:
            await update.message.reply_text("‚ùå ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ!")

    elif 'max_uses' not in coupon_data:
        # ŸÖÿ±ÿ≠ŸÑŸá 3: ÿ≠ÿØÿß⁄©ÿ´ÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá
        try:
            value = int(text)
            coupon_data['max_uses'] = value if value > 0 else None
            context.user_data['coupon_data'] = coupon_data

            await update.message.reply_text(
                "ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ÿ±Ÿàÿ≤):\nŸÖÿ´ÿßŸÑ: 30 (ÿ®ÿ±ÿß€å 30 ÿ±Ÿàÿ≤)\nÿ®ÿ±ÿß€å ÿ®ÿØŸàŸÜ ÿßŸÜŸÇÿ∂ÿß 0 Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ."
            )
        except ValueError:
            await update.message.reply_text("‚ùå ÿπÿØÿØ ŸÜÿßŸÖÿπÿ™ÿ®ÿ±!")

    elif 'expires_days' not in coupon_data:
        # ŸÖÿ±ÿ≠ŸÑŸá 4: ÿ™ÿßÿ±€åÿÆ ÿßŸÜŸÇÿ∂ÿß
        try:
            days = int(text)
            expires_at = None
            if days > 0:
                expires_at = datetime.now() + timedelta(days=days)

            conn = db.get_connection()
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO coupons
                (code, type, value, usage_limit, used_count, expires_at, is_active, created_at)
                VALUES (%s, %s, %s, %s, 0, %s, 1, NOW())
            """, (
                coupon_data['code'],
                coupon_data.get('discount_type', 'amount'),  # 'percent' €åÿß 'amount'
                coupon_data['discount_value'],
                coupon_data.get('max_uses'),
                expires_at
            ))

            conn.commit()
            cursor.close()
            conn.close()

            await update.message.reply_text(
                f"‚úÖ ⁄©ŸàŸæŸÜ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ!\n"
                f"üéü ⁄©ÿØ: <code>{coupon_data['code']}</code>\n"
                f"üí∞ ŸÜŸàÿπ: {coupon_data.get('discount_type', 'ŸÖÿ®ŸÑÿ∫ ÿ´ÿßÿ®ÿ™')}\n"
                f"üìä ÿ≠ÿØÿß⁄©ÿ´ÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá: {coupon_data.get('max_uses') or '‚àû'}\n"
                f"‚è∞ ÿßŸÜŸÇÿ∂ÿß: {format_date(expires_at) if expires_at else 'ÿ®ÿØŸàŸÜ ŸÖÿ≠ÿØŸàÿØ€åÿ™'}",
                parse_mode='HTML'
            )

            context.user_data.pop('state', None)
            context.user_data.pop('coupon_data', None)

        except Exception as e:
            await update.message.reply_text(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ⁄©ŸàŸæŸÜ: {e}")




async def start_search_coupon(query, context):
    """ÿ¥ÿ±Ÿàÿπ ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ⁄©ŸàŸæŸÜ"""
    context.user_data['state'] = WAITING_COUPON_SEARCH
    
    text = "üîç <b>ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ⁄©ŸàŸæŸÜ</b>\n\n"
    text += "⁄©ÿØ ⁄©ŸàŸæŸÜ €åÿß ÿ®ÿÆÿ¥€å ÿßÿ≤ ÿ¢ŸÜ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n"
    text += "ŸÖÿ´ÿßŸÑ: <code>SUMMER</code>"
    
    keyboard = [[InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="admin_coupons")]]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def process_coupon_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ⁄©ŸàŸæŸÜ"""
    search_term = update.message.text.strip().upper()
    
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    # ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿØÿ± ⁄©ÿØŸáÿß€å ⁄©ŸàŸæŸÜ
    cursor.execute("""
        SELECT * FROM coupons 
        WHERE UPPER(code) LIKE %s 
        ORDER BY created_at DESC
        LIMIT 20
    """, (f'%{search_term}%',))
    
    coupons = cursor.fetchall()
    cursor.close()
    conn.close()
    
    if not coupons:
        await update.message.reply_text(
            f"‚ùå Ÿá€å⁄Ü ⁄©ŸàŸæŸÜ€å ÿ®ÿß ÿπÿ®ÿßÿ±ÿ™ '<code>{search_term}</code>' €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.",
            parse_mode='HTML'
        )
        context.user_data.pop('state', None)
        return
    
    text = f"üîç <b>ŸÜÿ™ÿß€åÿ¨ ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿ®ÿ±ÿß€å:</b> <code>{search_term}</code>\n\n"
    text += f"üìä {len(coupons)} ⁄©ŸàŸæŸÜ €åÿßŸÅÿ™ ÿ¥ÿØ:\n\n"
    
    keyboard = []
    
    for coupon in coupons:
        # Ÿàÿ∂ÿπ€åÿ™
        if not coupon['is_active']:
            status = "‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ"
        elif coupon.get('expires_at') and coupon['expires_at'] < datetime.now():
            status = "‚è∞ ŸÖŸÜŸÇÿ∂€å"
        elif coupon.get('max_uses') and coupon.get('used_count', 0) >= coupon['max_uses']:
            status = "üö´ ÿ™ŸÖÿßŸÖ ÿ¥ÿØŸá"
        else:
            status = "‚úÖ ŸÅÿπÿßŸÑ"
        
        # ÿ™ÿÆŸÅ€åŸÅ
        if coupon.get('discount_percent'):
            discount = f"{coupon['discount_percent']}%"
        else:
            discount = format_price(coupon.get('discount_amount', 0))
        
        # ÿßÿ≥ÿ™ŸÅÿßÿØŸá
        used = coupon.get('used_count', 0)
        max_uses = coupon.get('max_uses') or '‚àû'
        
        text += f"{status} <code>{coupon['code']}</code>\n"
        text += f"   üí∞ ÿ™ÿÆŸÅ€åŸÅ: {discount}\n"
        text += f"   üìä ÿßÿ≥ÿ™ŸÅÿßÿØŸá: {used}/{max_uses}\n"
        
        if coupon.get('expires_at'):
            text += f"   ‚è∞ ÿßŸÜŸÇÿ∂ÿß: {format_date(coupon['expires_at'])}\n"
        
        if coupon.get('min_purchase_amount'):
            text += f"   üõí ÿ≠ÿØÿßŸÇŸÑ ÿÆÿ±€åÿØ: {format_price(coupon['min_purchase_amount'])}\n"
        
        text += "\n"
        
        # ÿØ⁄©ŸÖŸá ÿ®ÿ±ÿß€å Ÿáÿ± ⁄©ŸàŸæŸÜ
        keyboard.append([
            InlineKeyboardButton(
                f"üéü {coupon['code']} - ÿ¨ÿ≤ÿ¶€åÿßÿ™",
                callback_data=f"admin_coupon_detail_{coupon['id']}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_coupons")])
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    
    context.user_data.pop('state', None)


async def show_coupon_full_stats(query, coupon_id):
    """ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ €å⁄© ⁄©ŸàŸæŸÜ ÿ®ÿß ÿ¨ÿØŸàŸÑ ÿ¨ÿØ€åÿØ"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)

    # ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ŸàŸæŸÜ
    cursor.execute("SELECT * FROM coupons WHERE id = %s", (coupon_id,))
    coupon = cursor.fetchone()
    if not coupon:
        cursor.close()
        conn.close()
        await query.message.edit_text("‚ùå ⁄©ŸàŸæŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return

    # ÿ¢ŸÖÿßÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ±Ÿàÿ≤ÿßŸÜŸá (7 ÿ±Ÿàÿ≤ ÿßÿÆ€åÿ±)
    cursor.execute("""
        SELECT DATE(used_at) as date, COUNT(*) as uses, COUNT(DISTINCT user_id) as unique_users
        FROM coupon_usage
        WHERE coupon_id = %s AND used_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        GROUP BY DATE(used_at)
        ORDER BY date DESC
    """, (coupon_id,))
    daily_usage = cursor.fetchall()

    # ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®ÿ±ÿ™ÿ±
    cursor.execute("""
        SELECT u.first_name, u.username, COUNT(cu.id) as use_count
        FROM coupon_usage cu
        LEFT JOIN users u ON cu.user_id = u.user_id
        WHERE cu.coupon_id = %s
        GROUP BY cu.user_id
        ORDER BY use_count DESC
        LIMIT 10
    """, (coupon_id,))
    top_users = cursor.fetchall()

    cursor.close()
    conn.close()

    discount_text = f"{coupon['value']}%" if coupon['type'] == 'percent' else format_price(coupon['value'])

    text = f"üìä <b>ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ ⁄©ŸàŸæŸÜ</b>\n\n"
    text += f"üéü ⁄©ÿØ: <code>{coupon['code']}</code>\n"
    text += f"üí∞ ÿ™ÿÆŸÅ€åŸÅ: {discount_text}\n\n"

    if daily_usage:
        text += "<b>üìÖ ÿ±ŸàŸÜÿØ 7 ÿ±Ÿàÿ≤ ÿßÿÆ€åÿ±:</b>\n"
        for stat in daily_usage:
            jalali = gregorian_to_jalali(stat['date'])
            text += f"‚Ä¢ {jalali}: {stat['uses']} ÿßÿ≥ÿ™ŸÅÿßÿØŸá ({stat['unique_users']} ⁄©ÿßÿ±ÿ®ÿ±)\n"
        text += "\n"

    if top_users:
        text += "<b>üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ Ÿæÿ±ŸÖÿµÿ±ŸÅ:</b>\n"
        for idx, user in enumerate(top_users[:5], 1):
            name = user.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
            username = f"@{user['username']}" if user.get('username') else ''
            text += f"{idx}. {name} {username} | üìä {user['use_count']} ÿßÿ≥ÿ™ŸÅÿßÿØŸá\n"
        text += "\n"

    keyboard = [
        [InlineKeyboardButton("üì• Excel ÿß€åŸÜ ⁄©ŸàŸæŸÜ", callback_data=f"admin_export_coupon_{coupon_id}")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data=f"admin_coupon_detail_{coupon_id}")]
    ]

    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')




async def show_coupon_detail(query, coupon_id):
    """ŸÜŸÖÿß€åÿ¥ ÿ¨ÿ≤ÿ¶€åÿßÿ™ ⁄©ÿßŸÖŸÑ ⁄©ŸàŸæŸÜ ÿ∑ÿ®ŸÇ ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿ¨ÿØ€åÿØ"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)

    # ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ŸàŸæŸÜ
    cursor.execute("SELECT * FROM coupons WHERE id = %s", (coupon_id,))
    coupon = cursor.fetchone()

    if not coupon:
        cursor.close()
        conn.close()
        await query.message.edit_text("‚ùå ⁄©ŸàŸæŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return

    # ÿ¢ÿÆÿ±€åŸÜ ÿßÿ≥ÿ™ŸÅÿßÿØŸá‚Äå⁄©ŸÜŸÜÿØ⁄ØÿßŸÜ
    cursor.execute("""
        SELECT cu.*, u.first_name, u.username
        FROM coupon_usage cu
        LEFT JOIN users u ON cu.user_id = u.user_id
        WHERE cu.coupon_id = %s
        ORDER BY cu.used_at DESC
        LIMIT 10
    """, (coupon_id,))
    usage_list = cursor.fetchall()

    # ÿ¢ŸÖÿßÿ± ⁄©ŸÑ€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá
    cursor.execute("""
        SELECT 
            COUNT(*) as total_uses,
            COUNT(DISTINCT user_id) as unique_users
        FROM coupon_usage
        WHERE coupon_id = %s
    """, (coupon_id,))
    stats = cursor.fetchone()

    cursor.close()
    conn.close()

    # Ÿàÿ∂ÿπ€åÿ™
    if not coupon['is_active']:
        status = "‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ"
        status_emoji = "‚ùå"
    elif coupon.get('expires_at') and coupon['expires_at'] < datetime.now():
        status = "‚è∞ ŸÖŸÜŸÇÿ∂€å ÿ¥ÿØŸá"
        status_emoji = "‚è∞"
    elif coupon.get('usage_limit') and coupon.get('used_count', 0) >= coupon.get('usage_limit'):
        status = "üö´ ÿ∏ÿ±ŸÅ€åÿ™ ÿ™⁄©ŸÖ€åŸÑ"
        status_emoji = "üö´"
    else:
        status = "‚úÖ ŸÅÿπÿßŸÑ"
        status_emoji = "‚úÖ"

    discount_text = f"{coupon['value']}%" if coupon['type'] == 'percent' else format_price(coupon['value'])

    text = f"üéü <b>ÿ¨ÿ≤ÿ¶€åÿßÿ™ ⁄©ŸàŸæŸÜ</b>\n\n"
    text += f"{status_emoji} <b>⁄©ÿØ:</b> <code>{coupon['code']}</code>\n"
    text += f"üìä <b>Ÿàÿ∂ÿπ€åÿ™:</b> {status}\n"
    text += f"üí∞ <b>ÿ™ÿÆŸÅ€åŸÅ:</b> {discount_text}\n"
    text += f"üìà <b>ÿßÿ≥ÿ™ŸÅÿßÿØŸá:</b> {coupon['used_count']}/{coupon['usage_limit'] or '‚àû'}\n"
    text += f"‚è∞ <b>ÿßŸÜŸÇÿ∂ÿß:</b> {format_date(coupon['expires_at']) if coupon.get('expires_at') else 'ÿ®ÿØŸàŸÜ ŸÖÿ≠ÿØŸàÿØ€åÿ™'}\n"
    text += f"üìÖ <b>ÿß€åÿ¨ÿßÿØ:</b> {format_date(coupon['created_at'])}\n\n"

    text += f"<b>üìä ÿ¢ŸÖÿßÿ± ⁄©ŸÑ€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá:</b>\n"
    text += f"‚Ä¢ ⁄©ŸÑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá: {stats['total_uses'] or 0}\n"
    text += f"‚Ä¢ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ŸÖŸÜÿ≠ÿµÿ±: {stats['unique_users'] or 0}\n\n"

    if usage_list:
        text += f"<b>üë• ÿ¢ÿÆÿ±€åŸÜ ÿßÿ≥ÿ™ŸÅÿßÿØŸá‚Äå⁄©ŸÜŸÜÿØ⁄ØÿßŸÜ:</b>\n"
        for usage in usage_list[:5]:
            name = usage.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
            username = f"@{usage['username']}" if usage.get('username') else ''
            used_at = format_date(usage['used_at'])
            text += f"‚Ä¢ {name} {username} | {used_at}\n"

    keyboard = []
    if coupon['is_active']:
        keyboard.append([
            InlineKeyboardButton("‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ", callback_data=f"admin_coupon_disable_{coupon_id}"),
            InlineKeyboardButton("‚úèÔ∏è Ÿà€åÿ±ÿß€åÿ¥", callback_data=f"admin_coupon_edit_{coupon_id}")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("‚úÖ ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ", callback_data=f"admin_coupon_enable_{coupon_id}"),
            InlineKeyboardButton("‚úèÔ∏è Ÿà€åÿ±ÿß€åÿ¥", callback_data=f"admin_coupon_edit_{coupon_id}")
        ])
    keyboard.append([
        InlineKeyboardButton("üìä ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ", callback_data=f"admin_coupon_fullstats_{coupon_id}"),
        InlineKeyboardButton("üóë ÿ≠ÿ∞ŸÅ", callback_data=f"admin_coupon_delete_{coupon_id}")
    ])
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_coupons")])

    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_coupon_stats(query):
    """ŸÜŸÖÿß€åÿ¥ ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß ÿ∑ÿ®ŸÇ ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿ¨ÿØ€åÿØ"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)

    # ÿ¢ŸÖÿßÿ± ⁄©ŸÑ€å
    cursor.execute("""
        SELECT 
            COUNT(*) as total_coupons,
            SUM(used_count) as total_uses,
            COUNT(DISTINCT cu.user_id) as unique_users
        FROM coupons c
        LEFT JOIN coupon_usage cu ON c.id = cu.coupon_id
    """)
    overall_stats = cursor.fetchone()

    # Ÿæÿ±⁄©ÿßÿ±ÿ®ÿ±ÿØÿ™ÿ±€åŸÜ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß
    cursor.execute("""
        SELECT 
            c.code,
            c.type,
            c.value,
            COUNT(cu.id) as use_count,
            COUNT(DISTINCT cu.user_id) as unique_users
        FROM coupons c
        LEFT JOIN coupon_usage cu ON c.id = cu.coupon_id
        GROUP BY c.id
        ORDER BY use_count DESC
        LIMIT 10
    """)
    top_coupons = cursor.fetchall()

    # ⁄©ŸàŸæŸÜ‚ÄåŸáÿß€å ŸÜÿ≤ÿØ€å⁄© ÿ®Ÿá ÿßÿ™ŸÖÿßŸÖ ÿ∏ÿ±ŸÅ€åÿ™
    cursor.execute("""
        SELECT code, used_count, usage_limit, (usage_limit - used_count) as remaining
        FROM coupons
        WHERE usage_limit IS NOT NULL 
        AND used_count >= (usage_limit * 0.8)
        AND is_active = 1
        ORDER BY remaining ASC
        LIMIT 5
    """)
    near_limit = cursor.fetchall()

    cursor.close()
    conn.close()

    # ÿ≥ÿßÿÆÿ™ ŸÖÿ™ŸÜ Ÿæ€åÿßŸÖ
    text = "üìä <b>ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß€å ÿ™ÿÆŸÅ€åŸÅ</b>\n\n"
    text += "<b>üìà ÿ¢ŸÖÿßÿ± ⁄©ŸÑ€å:</b>\n"
    text += f"‚Ä¢ ÿ™ÿπÿØÿßÿØ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß: {overall_stats['total_coupons'] or 0}\n"
    text += f"‚Ä¢ ⁄©ŸÑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá‚ÄåŸáÿß: {overall_stats['total_uses'] or 0}\n"
    text += f"‚Ä¢ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ŸÖŸÜÿ≠ÿµÿ±: {overall_stats['unique_users'] or 0}\n\n"

    # Ÿæÿ±⁄©ÿßÿ±ÿ®ÿ±ÿØÿ™ÿ±€åŸÜ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß
    if top_coupons:
        text += "<b>üèÜ Ÿæÿ±⁄©ÿßÿ±ÿ®ÿ±ÿØÿ™ÿ±€åŸÜ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß:</b>\n"
        for idx, coupon in enumerate(top_coupons[:5], 1):
            medal = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
            discount = f"{coupon['value']}%" if coupon['type'] == 'percent' else format_price(coupon['value'])
            text += f"{medal} <code>{coupon['code']}</code> ({discount}) | üìä {coupon['use_count']} ÿßÿ≥ÿ™ŸÅÿßÿØŸá | üë• {coupon['unique_users']} ⁄©ÿßÿ±ÿ®ÿ±\n"
        text += "\n"

    # ŸÜÿ≤ÿØ€å⁄© ÿ®Ÿá ÿßÿ™ŸÖÿßŸÖ ÿ∏ÿ±ŸÅ€åÿ™
    if near_limit:
        text += "<b>‚ö†Ô∏è ŸÜÿ≤ÿØ€å⁄© ÿ®Ÿá ÿßÿ™ŸÖÿßŸÖ ÿ∏ÿ±ŸÅ€åÿ™:</b>\n"
        for c in near_limit:
            text += f"‚Ä¢ <code>{c['code']}</code>: {c['used_count']}/{c['usage_limit']} (ÿ®ÿßŸÇ€åŸÖÿßŸÜÿØŸá: {c['remaining']})\n"
        text += "\n"

    keyboard = [
        [InlineKeyboardButton("üì• ÿØÿßŸÜŸÑŸàÿØ Excel", callback_data="admin_export_coupon_stats")],
        [InlineKeyboardButton("üìä ŸÜŸÖŸàÿØÿßÿ±", callback_data="admin_coupon_chart")],
        [InlineKeyboardButton("üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å", callback_data="admin_coupon_stats")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_coupons")]
    ]

    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')



async def export_coupon_stats_excel(query, context, coupon_id=None):
    """ÿÆÿ±Ÿàÿ¨€å Excel ÿ¢ŸÖÿßÿ± ⁄©ŸàŸæŸÜ‚ÄåŸáÿß"""
    try:
        import openpyxl
        from openpyxl.styles import Font, PatternFill, Alignment
        from openpyxl.chart import BarChart, Reference
        from io import BytesIO
        
        conn = db.get_connection()
        cursor = conn.cursor(dictionary=True)
        
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "ÿ¢ŸÖÿßÿ± ⁄©ŸàŸæŸÜ‚ÄåŸáÿß"
        
        # ŸáÿØÿ±Ÿáÿß
        headers = ['ÿ±ÿØ€åŸÅ', '⁄©ÿØ ⁄©ŸàŸæŸÜ', 'ÿ™ÿÆŸÅ€åŸÅ', 'ÿ™ÿπÿØÿßÿØ ÿßÿ≥ÿ™ŸÅÿßÿØŸá', '⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ŸÖŸÜÿ≠ÿµÿ±', '⁄©ŸÑ ÿ™ÿÆŸÅ€åŸÅ', 'Ÿàÿ∂ÿπ€åÿ™']
        ws.append(headers)
        
        # ÿßÿ≥ÿ™ÿß€åŸÑ ŸáÿØÿ±
        for cell in ws[1]:
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            cell.alignment = Alignment(horizontal='center')
        
        # ÿØÿßÿØŸá‚ÄåŸáÿß
        if coupon_id:
            # €å⁄© ⁄©ŸàŸæŸÜ ÿÆÿßÿµ
            cursor.execute("""
                SELECT 
                    c.*,
                    COUNT(o.id) as use_count,
                    COUNT(DISTINCT o.user_id) as unique_users,
                    SUM(o.discount_amount) as total_discount
                FROM coupons c
                LEFT JOIN orders o ON c.code = o.coupon_code
                WHERE c.id = %s
                GROUP BY c.id
            """, (coupon_id,))
        else:
            # ŸáŸÖŸá ⁄©ŸàŸæŸÜ‚ÄåŸáÿß
            cursor.execute("""
                SELECT 
                    c.*,
                    COUNT(o.id) as use_count,
                    COUNT(DISTINCT o.user_id) as unique_users,
                    SUM(o.discount_amount) as total_discount
                FROM coupons c
                LEFT JOIN orders o ON c.code = o.coupon_code
                GROUP BY c.id
                ORDER BY use_count DESC
            """)
        
        coupons = cursor.fetchall()
        
        for idx, coupon in enumerate(coupons, 1):
            if coupon.get('discount_percent'):
                discount = f"{coupon['discount_percent']}%"
            else:
                discount = f"{coupon.get('discount_amount', 0):,} ÿ™ŸàŸÖÿßŸÜ"
            
            status = "ŸÅÿπÿßŸÑ" if coupon['is_active'] else "ÿ∫€åÿ±ŸÅÿπÿßŸÑ"
            
            ws.append([
                idx,
                coupon['code'],
                discount,
                coupon['use_count'] or 0,
                coupon['unique_users'] or 0,
                coupon['total_discount'] or 0,
                status
            ])
        
        # ÿ™ŸÜÿ∏€åŸÖ ÿπÿ±ÿ∂ ÿ≥ÿ™ŸàŸÜ‚ÄåŸáÿß
        ws.column_dimensions['A'].width = 8
        ws.column_dimensions['B'].width = 15
        ws.column_dimensions['C'].width = 15
        ws.column_dimensions['D'].width = 12
        ws.column_dimensions['E'].width = 15
        ws.column_dimensions['F'].width = 15
        ws.column_dimensions['G'].width = 12
        
        cursor.close()
        conn.close()
        
        # ÿ∞ÿÆ€åÿ±Ÿá
        excel_file = BytesIO()
        wb.save(excel_file)
        excel_file.seek(0)
        
        filename = f"coupon_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=excel_file,
            filename=filename,
            caption=f"üìä ÿ¢ŸÖÿßÿ± ⁄©ŸàŸæŸÜ‚ÄåŸáÿß\nüìÖ {datetime.now().strftime('%Y/%m/%d %H:%M')}"
        )
        
        await query.answer("‚úÖ ŸÅÿß€åŸÑ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ", show_alert=False)
        
    except ImportError:
        await query.answer("‚ùå ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá openpyxl ŸÜÿµÿ® ŸÜ€åÿ≥ÿ™", show_alert=True)
    except Exception as e:
        logger.error(f"ÿÆÿ∑ÿß ÿØÿ± export Excel: {e}")
        await query.answer("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ", show_alert=True)






async def show_admin_coupons_list(query, page=1, filter_type='all'):
    """ŸÜŸÖÿß€åÿ¥ ŸÑ€åÿ≥ÿ™ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß ÿ®ÿß ÿ¨ÿØŸàŸÑ ÿ¨ÿØ€åÿØ"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)

    per_page = 10
    offset = (page - 1) * per_page

    where_clause = ""
    if filter_type == 'active':
        where_clause = "WHERE is_active = 1 AND (expires_at IS NULL OR expires_at > NOW())"
    elif filter_type == 'expired':
        where_clause = "WHERE expires_at < NOW()"
    elif filter_type == 'disabled':
        where_clause = "WHERE is_active = 0"

    cursor.execute(f"""
        SELECT * FROM coupons
        {where_clause}
        ORDER BY created_at DESC
        LIMIT %s OFFSET %s
    """, (per_page, offset))
    coupons = cursor.fetchall()

    cursor.execute(f"SELECT COUNT(*) as total FROM coupons {where_clause}")
    total = cursor.fetchone()['total']

    cursor.close()
    conn.close()

    total_pages = (total + per_page - 1) // per_page
    filter_names = {'all': 'ŸáŸÖŸá', 'active': 'ŸÅÿπÿßŸÑ', 'expired': 'ŸÖŸÜŸÇÿ∂€å', 'disabled': 'ÿ∫€åÿ±ŸÅÿπÿßŸÑ'}

    text = f"üéü <b>ŸÑ€åÿ≥ÿ™ ⁄©ŸàŸæŸÜ‚ÄåŸáÿß ({filter_names[filter_type]})</b>\n\n"
    text += f"üìÑ ÿµŸÅÿ≠Ÿá {page} ÿßÿ≤ {total_pages}\n\n"

    if coupons:
        for coupon in coupons:
            status = "‚úÖ" if coupon['is_active'] else "‚ùå"
            if coupon.get('expires_at') and coupon['expires_at'] < datetime.now():
                status = "‚è∞"

            discount = f"{coupon['value']}%" if coupon['type'] == 'percent' else format_price(coupon['value'])
            text += f"{status} <code>{coupon['code']}</code> | üí∞ {discount} | üìä {coupon['used_count']}/{coupon['usage_limit'] or '‚àû'}\n"
    else:
        text += "‚ùå ⁄©ŸàŸæŸÜ€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."

    keyboard = [
        [
            InlineKeyboardButton("ŸáŸÖŸá", callback_data="admin_coupons_filter_all"),
            InlineKeyboardButton("‚úÖ ŸÅÿπÿßŸÑ", callback_data="admin_coupons_filter_active"),
            InlineKeyboardButton("‚è∞ ŸÖŸÜŸÇÿ∂€å", callback_data="admin_coupons_filter_expired"),
            InlineKeyboardButton("‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ", callback_data="admin_coupons_filter_disabled")
        ]
    ]
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"admin_coupons_list_{filter_type}_{page-1}"))
    nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"admin_coupons_list_{filter_type}_{page+1}"))
    keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_coupons")])

    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def show_admin_campaigns_menu(query):
    """ŸÖŸÜŸà€å ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸÖŸæ€åŸÜ‚ÄåŸáÿß€å ÿ™ÿ®ŸÑ€åÿ∫ÿßÿ™€å"""
    text = "üéâ <b>ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸÖŸæ€åŸÜ‚ÄåŸáÿß€å ÿ™ÿ®ŸÑ€åÿ∫ÿßÿ™€å</b>\n\n"
    text += "‚ö†Ô∏è ÿß€åŸÜ ÿ®ÿÆÿ¥ ÿØÿ± ÿ≠ÿßŸÑ ÿ™Ÿàÿ≥ÿπŸá ÿßÿ≥ÿ™.\n\n"
    text += "⁄©ŸÖŸæ€åŸÜ‚ÄåŸáÿß€å ÿ¢€åŸÜÿØŸá:\n"
    text += "‚Ä¢ üéÅ ÿ¨ÿ¥ŸÜŸàÿßÿ±Ÿá ÿ™ÿÆŸÅ€åŸÅ\n"
    text += "‚Ä¢ üéØ ÿ™ÿ®ŸÑ€åÿ∫ÿßÿ™ ŸáÿØŸÅŸÖŸÜÿØ\n"
    text += "‚Ä¢ üìß ÿß€åŸÖ€åŸÑ ŸÖÿßÿ±⁄©ÿ™€åŸÜ⁄Ø\n"
    text += "‚Ä¢ üì± ŸÜŸàÿ™€åŸÅ€å⁄©€åÿ¥ŸÜ ŸáŸàÿ¥ŸÖŸÜÿØ"
    
    keyboard = [
        [InlineKeyboardButton("üîú ÿ®Ÿá ÿ≤ŸàÿØ€å", callback_data="noop")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_financial")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')



async def toggle_coupon_status(query, coupon_id, enable=True):
    """ŸÅÿπÿßŸÑ €åÿß ÿ∫€åÿ±ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ ⁄©ŸàŸæŸÜ"""
    conn = db.get_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE coupons SET is_active = %s WHERE id = %s",
        (1 if enable else 0, coupon_id)
    )
    
    conn.commit()
    
    # ÿØÿ±€åÿßŸÅÿ™ ⁄©ÿØ ⁄©ŸàŸæŸÜ
    cursor.execute("SELECT code FROM coupons WHERE id = %s", (coupon_id,))
    result = cursor.fetchone()
    coupon_code = result[0] if result else "ŸÜÿßŸÖÿ¥ÿÆÿµ"
    
    cursor.close()
    conn.close()
    
    status_text = "ŸÅÿπÿßŸÑ" if enable else "ÿ∫€åÿ±ŸÅÿπÿßŸÑ"
    
    await query.answer(f"‚úÖ ⁄©ŸàŸæŸÜ {coupon_code} {status_text} ÿ¥ÿØ", show_alert=True)
    
    log_admin_action(
        query.from_user.id,
        'toggle_coupon',
        None,
        f"{status_text} ⁄©ÿ±ÿØŸÜ ⁄©ŸàŸæŸÜ {coupon_code}"
    )
    
    # ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ÿ¨ÿ≤ÿ¶€åÿßÿ™
    await show_coupon_detail(query, coupon_id)

async def delete_coupon(query, coupon_id):
    """ÿ≠ÿ∞ŸÅ ⁄©ŸàŸæŸÜ"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ŸàŸæŸÜ
    cursor.execute("SELECT code FROM coupons WHERE id = %s", (coupon_id,))
    coupon = cursor.fetchone()
    
    if not coupon:
        cursor.close()
        conn.close()
        await query.answer("‚ùå ⁄©ŸàŸæŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ", show_alert=True)
        return
    
    # ÿ≠ÿ∞ŸÅ
    cursor.execute("DELETE FROM coupons WHERE id = %s", (coupon_id,))
    conn.commit()
    cursor.close()
    conn.close()
    
    await query.answer(f"‚úÖ ⁄©ŸàŸæŸÜ {coupon['code']} ÿ≠ÿ∞ŸÅ ÿ¥ÿØ", show_alert=True)
    
    log_admin_action(
        query.from_user.id,
        'delete_coupon',
        None,
        f"ÿ≠ÿ∞ŸÅ ⁄©ŸàŸæŸÜ {coupon['code']}"
    )
    
    # ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÑ€åÿ≥ÿ™
    await show_admin_coupons_menu(query)

async def toggle_coupon_status(query, coupon_id, enable=True):
    """ŸÅÿπÿßŸÑ €åÿß ÿ∫€åÿ±ŸÅÿπÿßŸÑ ⁄©ÿ±ÿØŸÜ ⁄©ŸàŸæŸÜ"""
    conn = db.get_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE coupons SET is_active = %s WHERE id = %s",
        (1 if enable else 0, coupon_id)
    )
    
    conn.commit()
    
    # ÿØÿ±€åÿßŸÅÿ™ ⁄©ÿØ ⁄©ŸàŸæŸÜ
    cursor.execute("SELECT code FROM coupons WHERE id = %s", (coupon_id,))
    result = cursor.fetchone()
    coupon_code = result[0] if result else "ŸÜÿßŸÖÿ¥ÿÆÿµ"
    
    cursor.close()
    conn.close()
    
    status_text = "ŸÅÿπÿßŸÑ" if enable else "ÿ∫€åÿ±ŸÅÿπÿßŸÑ"
    
    await query.answer(f"‚úÖ ⁄©ŸàŸæŸÜ {coupon_code} {status_text} ÿ¥ÿØ", show_alert=True)
    
    log_admin_action(
        query.from_user.id,
        'toggle_coupon',
        None,
        f"{status_text} ⁄©ÿ±ÿØŸÜ ⁄©ŸàŸæŸÜ {coupon_code}"
    )
    
    # ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ÿ¨ÿ≤ÿ¶€åÿßÿ™
    await show_coupon_detail(query, coupon_id)

async def delete_coupon(query, coupon_id):
    """ÿ≠ÿ∞ŸÅ ⁄©ŸàŸæŸÜ"""
    conn = db.get_connection()
    cursor = conn.cursor(dictionary=True)
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ŸàŸæŸÜ
    cursor.execute("SELECT code FROM coupons WHERE id = %s", (coupon_id,))
    coupon = cursor.fetchone()
    
    if not coupon:
        cursor.close()
        conn.close()
        await query.answer("‚ùå ⁄©ŸàŸæŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ", show_alert=True)
        return
    
    # ÿ≠ÿ∞ŸÅ
    cursor.execute("DELETE FROM coupons WHERE id = %s", (coupon_id,))
    conn.commit()
    cursor.close()
    conn.close()
    
    await query.answer(f"‚úÖ ⁄©ŸàŸæŸÜ {coupon['code']} ÿ≠ÿ∞ŸÅ ÿ¥ÿØ", show_alert=True)
    
    log_admin_action(
        query.from_user.id,
        'delete_coupon',
        None,
        f"ÿ≠ÿ∞ŸÅ ⁄©ŸàŸæŸÜ {coupon['code']}"
    )
    
    # ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÑ€åÿ≥ÿ™
    await show_admin_coupons_menu(query)



async def export_financial_excel(query, context, export_type='all'):
    """ÿÆÿ±Ÿàÿ¨€å Excel ⁄Øÿ≤ÿßÿ±ÿ¥ÿßÿ™ ŸÖÿßŸÑ€å"""
    try:
        import openpyxl
        from openpyxl.styles import Font, Alignment, PatternFill
        from io import BytesIO
        
        conn = db.get_connection()
        cursor = conn.cursor(dictionary=True)
        
        # ÿß€åÿ¨ÿßÿØ Workbook
        wb = openpyxl.Workbook()
        
        if export_type in ['all', 'transactions']:
            ws_trans = wb.active
            ws_trans.title = "ÿ™ÿ±ÿß⁄©ŸÜÿ¥‚ÄåŸáÿß"
            
            # ŸáÿØÿ±Ÿáÿß
            headers = ['ÿ±ÿØ€åŸÅ', '⁄©ÿßÿ±ÿ®ÿ±', 'ŸÜŸàÿπ', 'ŸÖÿ®ŸÑÿ∫', 'ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™', 'ÿ™ÿßÿ±€åÿÆ']
            ws_trans.append(headers)
            
            # ÿßÿ≥ÿ™ÿß€åŸÑ ŸáÿØÿ±
            for cell in ws_trans[1]:
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.font = Font(color="FFFFFF", bold=True)
            
            # ÿØÿßÿØŸá‚ÄåŸáÿß
            cursor.execute("""
                SELECT t.*, u.first_name, u.username 
                FROM transactions t
                LEFT JOIN users u ON t.user_id = u.user_id
                ORDER BY t.created_at DESC
                LIMIT 1000
            """)
            transactions = cursor.fetchall()
            
            for idx, trans in enumerate(transactions, 1):
                ws_trans.append([
                    idx,
                    f"{trans.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')} (@{trans.get('username', 'ÿ®ÿØŸàŸÜ €åŸàÿ≤ÿ±')})",
                    trans['type'],
                    trans['amount'],
                    trans.get('description', ''),
                    trans['created_at'].strftime('%Y-%m-%d %H:%M')
                ])
        
        if export_type in ['all', 'payments']:
            ws_pay = wb.create_sheet("Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß")
            
            headers = ['ÿ±ÿØ€åŸÅ', '⁄©ÿßÿ±ÿ®ÿ±', 'ŸÖÿ®ŸÑÿ∫', 'Ÿàÿ∂ÿπ€åÿ™', 'Authority', 'ÿ™ÿßÿ±€åÿÆ']
            ws_pay.append(headers)
            
            for cell in ws_pay[1]:
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.font = Font(color="FFFFFF", bold=True)
            
            cursor.execute("""
                SELECT p.*, u.first_name, u.username
                FROM payments p
                LEFT JOIN users u ON p.user_id = u.user_id
                ORDER BY p.created_at DESC
                LIMIT 1000
            """)
            payments = cursor.fetchall()
            
            for idx, pay in enumerate(payments, 1):
                ws_pay.append([
                    idx,
                    f"{pay.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}",
                    pay['amount'],
                    pay['status'],
                    pay.get('authority', 'N/A'),
                    pay['created_at'].strftime('%Y-%m-%d %H:%M')
                ])
        
        cursor.close()
        conn.close()
        
        # ÿ∞ÿÆ€åÿ±Ÿá ÿØÿ± BytesIO
        excel_file = BytesIO()
        wb.save(excel_file)
        excel_file.seek(0)
        
        # ÿßÿ±ÿ≥ÿßŸÑ ŸÅÿß€åŸÑ
        filename = f"financial_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=excel_file,
            filename=filename,
            caption=f"üì• ⁄Øÿ≤ÿßÿ±ÿ¥ ŸÖÿßŸÑ€å\nüìÖ {datetime.now().strftime('%Y/%m/%d %H:%M')}"
        )
        
        await query.answer("‚úÖ ŸÅÿß€åŸÑ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ", show_alert=False)
        
    except ImportError:
        await query.answer("‚ùå ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá openpyxl ŸÜÿµÿ® ŸÜ€åÿ≥ÿ™", show_alert=True)
    except Exception as e:
        logger.error(f"ÿÆÿ∑ÿß ÿØÿ± export Excel: {e}")
        await query.answer("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ", show_alert=True)




async def show_admin_referral_menu(query):
    text = "üéÅ <b>ŸÖÿØ€åÿ±€åÿ™ ÿ±ŸÅÿ±ÿßŸÑ</b>\n\n⁄Øÿ≤€åŸÜŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:"
    
    inviter_reward = get_setting('referral_inviter_reward', '10000')
    invited_reward = get_setting('referral_invited_reward', '5000')
    
    text += f"\nüí∞ ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá: {format_price(int(inviter_reward))}\n"
    text += f"üí∞ ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äåÿ¥ÿØŸá: {format_price(int(invited_reward))}\n"
    
    keyboard = [
        [InlineKeyboardButton("üèÜ ÿ®ÿ±ÿ™ÿ±€åŸÜ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØ⁄ØÿßŸÜ", callback_data="admin_top_referrers")],
        [InlineKeyboardButton("‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖ ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá", callback_data="admin_set_inviter_reward")],
        [InlineKeyboardButton("‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖ ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äåÿ¥ÿØŸá", callback_data="admin_set_invited_reward")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_panel")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

async def show_admin_settings_menu(query):
    text = "‚öôÔ∏è <b>ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≥€åÿ≥ÿ™ŸÖ</b>\n\n⁄Øÿ≤€åŸÜŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:"
    
    keyboard = [
        [InlineKeyboardButton("üîß ÿ™ŸÜÿ∏€åŸÖÿßÿ™ Marzban", callback_data="admin_marzban_settings")],
        [InlineKeyboardButton("üí≥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ", callback_data="admin_zarinpal_settings")],
        [InlineKeyboardButton("üìù Ÿà€åÿ±ÿß€åÿ¥ Ÿæ€åÿßŸÖ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ", callback_data="admin_welcome_message")],
        [InlineKeyboardButton("üîå ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ Marzban", callback_data="admin_test_marzban")],
        [InlineKeyboardButton("üìú ŸÖÿ¥ÿßŸáÿØŸá ŸÑÿß⁄Ø‚ÄåŸáÿß", callback_data="admin_logs")],
        [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_panel")]
    ]
    
    await safe_edit_message(query, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

# ==================== MESSAGE HANDLERS ====================

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    state = context.user_data.get('state')
    
    if state == WAITING_WALLET_CHARGE_AMOUNT:
        try:
            amount = int(update.message.text.replace(',', ''))
            if amount < 10000:
                await update.message.reply_text("‚ùå ÿ≠ÿØÿßŸÇŸÑ ŸÖÿ®ŸÑÿ∫ ÿ¥ÿßÿ±⁄ò 10,000 ÿ™ŸàŸÖÿßŸÜ ÿßÿ≥ÿ™.")
                return
            
            # TODO: Ÿæ€åÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™
            await update.message.reply_text(f"‚úÖ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿ¥ÿßÿ±⁄ò {format_price(amount)} ÿ´ÿ®ÿ™ ÿ¥ÿØ.\n\n‚ö†Ô∏è ÿß€åŸÜ ŸÇÿßÿ®ŸÑ€åÿ™ ÿØÿ± ÿ≠ÿßŸÑ ÿ™Ÿàÿ≥ÿπŸá ÿßÿ≥ÿ™.")
            context.user_data.pop('state', None)
            
        except ValueError:
            await update.message.reply_text("‚ùå ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")
    
    elif state == WAITING_BROADCAST_MESSAGE:
        if user_id not in ADMIN_IDS:
            return
        
        message_text = update.message.text
        all_users = get_all_users()
        
        await update.message.reply_text(f"üì§ ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®Ÿá {len(all_users)} ⁄©ÿßÿ±ÿ®ÿ±...")
        
        success = 0
        failed = 0
        
        for user in all_users:
            try:
                await context.bot.send_message(chat_id=user['user_id'], text=message_text)
                success += 1
                await asyncio.sleep(0.05)  # ÿ¨ŸÑŸà⁄Ø€åÿ±€å ÿßÿ≤ rate limit
            except:
                failed += 1
        
        await update.message.reply_text(f"‚úÖ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ.\n\n‚úÖ ŸÖŸàŸÅŸÇ: {success}\n‚ùå ŸÜÿßŸÖŸàŸÅŸÇ: {failed}")
        log_admin_action(user_id, 'broadcast', None, f"ÿßÿ±ÿ≥ÿßŸÑ ÿ®Ÿá {success} ⁄©ÿßÿ±ÿ®ÿ±")
        context.user_data.pop('state', None)
    elif state == WAITING_BULK_BALANCE_AMOUNT:
        try:
            amount = int(update.message.text.replace(',', ''))
            
            if amount < 1000:
                await update.message.reply_text("‚ùå ÿ≠ÿØÿßŸÇŸÑ ŸÖÿ®ŸÑÿ∫ 1,000 ÿ™ŸàŸÖÿßŸÜ ÿßÿ≥ÿ™.")
                return
            
            tag = context.user_data.get('bulk_balance_tag')
            user_count = get_users_count(tag=tag if tag != 'all' else None)
            total_amount = amount * user_count
            
            context.user_data['bulk_balance_amount'] = amount
            context.user_data['state'] = WAITING_BULK_BALANCE_REASON
            
            await update.message.reply_text(
                f"üí∞ <b>ÿ™ÿß€å€åÿØ ÿßŸÅÿ≤ÿß€åÿ¥ ŸÖŸàÿ¨ŸàÿØ€å ⁄Øÿ±ŸàŸá€å</b>\n\n"
                f"üè∑ ÿ™⁄Ø: <code>{tag}</code>\n"
                f"üë• ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {user_count}\n"
                f"üíµ ŸÖÿ®ŸÑÿ∫ Ÿáÿ± ⁄©ÿßÿ±ÿ®ÿ±: {format_price(amount)}\n"
                f"üí∞ ŸÖÿ¨ŸÖŸàÿπ ⁄©ŸÑ: {format_price(total_amount)}\n\n"
                f"üìù ÿØŸÑ€åŸÑ ÿß€åŸÜ ÿßŸÅÿ≤ÿß€åÿ¥ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:",
                parse_mode='HTML'
            )
        
        except ValueError:
            await update.message.reply_text("‚ùå ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")
    
    # ==================== BULK BALANCE REASON ====================
    elif state == WAITING_BULK_BALANCE_REASON:
        reason = update.message.text.strip()
        
        if len(reason) < 3:
            await update.message.reply_text("‚ùå ÿØŸÑ€åŸÑ ÿ®ÿß€åÿØ ÿ≠ÿØÿßŸÇŸÑ 3 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± ÿ®ÿßÿ¥ÿØ.")
            return
        
        tag = context.user_data.get('bulk_balance_tag')
        amount = context.user_data.get('bulk_balance_amount')
        user_count = get_users_count(tag=tag if tag != 'all' else None)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ ÿ™ÿß€å€åÿØ Ÿà ÿßÿ¨ÿ±ÿß", callback_data="admin_confirm_bulk_balance")],
            [InlineKeyboardButton("‚ùå ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="admin_users")]
        ]
        
        context.user_data['bulk_balance_reason'] = reason
        
        await update.message.reply_text(
            f"‚ö†Ô∏è <b>ÿ™ÿß€å€åÿØ ŸÜŸáÿß€å€å</b>\n\n"
            f"üè∑ ÿ™⁄Ø: <code>{tag}</code>\n"
            f"üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {user_count}\n"
            f"üíµ ŸÖÿ®ŸÑÿ∫: {format_price(amount)}\n"
            f"üí∞ ÿ¨ŸÖÿπ: {format_price(amount * user_count)}\n"
            f"üìù ÿØŸÑ€åŸÑ: {reason}\n\n"
            f"‚ö†Ô∏è ÿß€åŸÜ ÿπŸÖŸÑ ŸÇÿßÿ®ŸÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ŸÜ€åÿ≥ÿ™!",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    # ==================== USER TAG (CREATE/RENAME) ====================
    elif state == WAITING_USER_TAG:
        tag_name = update.message.text.strip().lower()
        
        # ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å
        if not tag_name.isalnum():
            await update.message.reply_text("‚ùå ŸÜÿßŸÖ ÿ™⁄Ø ŸÅŸÇÿ∑ ÿ®ÿß€åÿØ ÿ¥ÿßŸÖŸÑ ÿ≠ÿ±ŸàŸÅ Ÿà ÿßÿπÿØÿßÿØ ÿßŸÜ⁄ØŸÑ€åÿ≥€å ÿ®ÿßÿ¥ÿØ.")
            return
        
        if len(tag_name) < 2 or len(tag_name) > 20:
            await update.message.reply_text("‚ùå ÿ∑ŸàŸÑ ŸÜÿßŸÖ ÿ™⁄Ø ÿ®ÿß€åÿØ ÿ®€åŸÜ 2 ÿ™ÿß 20 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± ÿ®ÿßÿ¥ÿØ.")
            return
        
        # ÿ®ÿ±ÿ±ÿ≥€å ÿß€åÿ¨ÿßÿØ ÿ™⁄Ø ÿ¨ÿØ€åÿØ €åÿß ÿ™ÿ∫€å€åÿ± ŸÜÿßŸÖ
        if context.user_data.get('creating_new_tag'):
            # ÿ∞ÿÆ€åÿ±Ÿá ÿ™⁄Ø ÿ¨ÿØ€åÿØ (ŸÅÿπŸÑÿßŸã ŸÅŸÇÿ∑ ÿßÿπŸÑÿßŸÖ ŸÖŸàŸÅŸÇ€åÿ™)
            await update.message.reply_text(
                f"‚úÖ ÿ™⁄Ø <code>{tag_name}</code> ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ!\n\n"
                f"ÿ≠ÿßŸÑÿß ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿßÿ≤ ÿ®ÿÆÿ¥ ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜÿå ÿß€åŸÜ ÿ™⁄Ø ÿ±ÿß ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿßÿÆÿ™ÿµÿßÿµ ÿØŸá€åÿØ.",
                parse_mode='HTML'
            )
            context.user_data.pop('creating_new_tag', None)
        
        elif context.user_data.get('renaming_tag'):
            old_tag = context.user_data.get('renaming_tag')
            
            # ÿ™ÿ∫€å€åÿ± ŸÜÿßŸÖ ÿ™⁄Ø
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE users SET user_tag = %s WHERE user_tag = %s",
                (tag_name, old_tag)
            )
            affected = cursor.rowcount
            conn.commit()
            cursor.close()
            conn.close()
            
            log_admin_action(user_id, 'rename_tag', 0, f"ÿ™ÿ∫€å€åÿ± ŸÜÿßŸÖ {old_tag} ÿ®Ÿá {tag_name}")
            
            await update.message.reply_text(
                f"‚úÖ ŸÜÿßŸÖ ÿ™⁄Ø ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!\n\n"
                f"üè∑ ÿßÿ≤ <code>{old_tag}</code> ÿ®Ÿá <code>{tag_name}</code>\n"
                f"üë• {affected} ⁄©ÿßÿ±ÿ®ÿ± ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØ.",
                parse_mode='HTML'
            )
            context.user_data.pop('renaming_tag', None)
        
        context.user_data.pop('state', None)

    elif state == WAITING_USER_SEARCH:
        if user_id not in ADMIN_IDS:
            return
        
        search = update.message.text.strip()
        users = get_all_users(limit=10, search=search)
        
        if not users:
            await update.message.reply_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ±€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
            context.user_data.pop('state', None)
            return
        
        text = f"üîç <b>ŸÜÿ™ÿß€åÿ¨ ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿ®ÿ±ÿß€å ¬´{search}¬ª:</b>\n\n"
        keyboard = []
        
        for u in users:
            text += f"üë§ {u['first_name']} (@{u['username'] or 'ÿ®ÿØŸàŸÜ ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å'})\n"
            text += f"   üÜî {u['user_id']}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"üë§ {u['first_name']} - {u['user_id']}",
                callback_data=f"admin_view_user_{u['user_id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_users")])
        
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
        context.user_data.pop('state', None)
        # ==================== WAITING BALANCE AMOUNT (ADMIN) ====================
    elif state == WAITING_BALANCE_AMOUNT:
        if user_id not in ADMIN_IDS:
            return
    
        try:
            amount = int(update.message.text.replace(',', '').replace('+', ''))
            target_user_id = context.user_data.get('target_user_id')
        
            if not target_user_id:
                await update.message.reply_text("‚ùå ÿÆÿ∑ÿß: ⁄©ÿßÿ±ÿ®ÿ± ŸáÿØŸÅ ŸÖÿ¥ÿÆÿµ ŸÜÿ¥ÿØŸá.")
                context.user_data.pop('state', None)
                return
        
            target_user = get_user(target_user_id)
        
            if not target_user:
                await update.message.reply_text("‚ùå ⁄©ÿßÿ±ÿ®ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
                context.user_data.pop('state', None)
                return
        
        # ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ
            new_balance = target_user['balance'] + amount
        
            if new_balance < 0:
                await update.message.reply_text(
                    f"‚ùå ÿÆÿ∑ÿß: ŸÖŸàÿ¨ŸàÿØ€å ŸÜŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ŸÖŸÜŸÅ€å ÿ¥ŸàÿØ!\n\n"
                    f"üíµ ŸÖŸàÿ¨ŸàÿØ€å ŸÅÿπŸÑ€å: {format_price(target_user['balance'])}\n"
                    f"üîª ⁄©ÿßŸáÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™€å: {format_price(abs(amount))}\n"
                    f"‚ö†Ô∏è ÿ≠ÿØÿß⁄©ÿ´ÿ± ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ {format_price(target_user['balance'])} ⁄©ÿßŸáÿ¥ ÿØŸá€åÿØ."
                )
                return
        
            context.user_data['balance_amount'] = amount
            context.user_data['state'] = WAITING_BALANCE_REASON
        
            sign = "+" if amount >= 0 else ""
            action = "ÿßŸÅÿ≤ÿß€åÿ¥" if amount >= 0 else "⁄©ÿßŸáÿ¥"
        
            text = f"üí∞ <b>ÿ™ÿß€å€åÿØ ÿ™ÿ∫€å€åÿ± ŸÖŸàÿ¨ŸàÿØ€å</b>\n\n"
            text += f"üë§ ⁄©ÿßÿ±ÿ®ÿ±: {target_user['first_name']}\n"
            text += f"üíµ ŸÖŸàÿ¨ŸàÿØ€å ŸÅÿπŸÑ€å: {format_price(target_user['balance'])}\n"
            text += f"üìä {action}: {sign}{format_price(amount)}\n"
            text += f"üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {format_price(new_balance)}\n\n"
            text += "üìù ÿØŸÑ€åŸÑ ÿß€åŸÜ ÿ™ÿ∫€å€åÿ± ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:"
        
            await update.message.reply_text(text, parse_mode='HTML')
        
        except ValueError:
            await update.message.reply_text("‚ùå ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")

# ==================== WAITING BALANCE REASON (ADMIN) ====================
    elif state == WAITING_BALANCE_REASON:
        if user_id not in ADMIN_IDS:
            return
    
        reason = update.message.text.strip()
    
        if len(reason) < 3:
            await update.message.reply_text("‚ùå ÿØŸÑ€åŸÑ ÿ®ÿß€åÿØ ÿ≠ÿØÿßŸÇŸÑ 3 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± ÿ®ÿßÿ¥ÿØ.")
            return
    
        target_user_id = context.user_data.get('target_user_id')
        amount = context.user_data.get('balance_amount')
    
        target_user = get_user(target_user_id)
    
    # ÿßÿπŸÖÿßŸÑ ÿ™ÿ∫€å€åÿ±ÿßÿ™
        update_user_balance(target_user_id, amount, reason, admin_id=user_id)
    
    # ÿ´ÿ®ÿ™ ŸÑÿß⁄Ø
        log_admin_action(
            user_id,
            'edit_balance',
            target_user_id,
            f"ÿ™ÿ∫€å€åÿ± ŸÖŸàÿ¨ŸàÿØ€å: {'+' if amount >= 0 else ''}{format_price(amount)} - {reason}"
        )
    
        sign = "+" if amount >= 0 else ""
    
        await update.message.reply_text(
            f"‚úÖ <b>ŸÖŸàÿ¨ŸàÿØ€å ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!</b>\n\n"
            f"üë§ ⁄©ÿßÿ±ÿ®ÿ±: {target_user['first_name']}\n"
            f"üìä ÿ™ÿ∫€å€åÿ±: {sign}{format_price(amount)}\n"
            f"üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {format_price(target_user['balance'] + amount)}\n"
            f"üìù ÿØŸÑ€åŸÑ: {reason}",
            parse_mode='HTML'
        )
    
    # ÿßÿ∑ŸÑÿßÿπ€åŸá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±
        try:
            emoji = "üéâ" if amount > 0 else "‚ö†Ô∏è"
            action = "ÿßŸÅÿ≤ÿß€åÿ¥ €åÿßŸÅÿ™" if amount > 0 else "⁄©ÿßŸáÿ¥ €åÿßŸÅÿ™"
        
            await context.bot.send_message(
                target_user_id,
                f"{emoji} <b>ÿ™ÿ∫€å€åÿ± ŸÖŸàÿ¨ŸàÿØ€å</b>\n\n"
                f"ŸÖŸàÿ¨ŸàÿØ€å ÿ≠ÿ≥ÿßÿ® ÿ¥ŸÖÿß {sign}{format_price(amount)} {action}.\n\n"
                f"üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {format_price(target_user['balance'] + amount)}\n"
                f"üìù ÿØŸÑ€åŸÑ: {reason}",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ ÿßÿ∑ŸÑÿßÿπ€åŸá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ± {target_user_id}: {e}")
    
    # Ÿæÿß⁄©ÿ≥ÿßÿ≤€å
        context.user_data.pop('state', None)
        context.user_data.pop('target_user_id', None)
        context.user_data.pop('balance_amount', None)
        


    elif state == WAITING_REFERRAL_REWARD_INVITER:
        if user_id not in ADMIN_IDS:
            return
    
        try:
            amount = int(update.message.text.replace(',', ''))
        
            if amount < 0:
                await update.message.reply_text("‚ùå ŸÖÿ®ŸÑÿ∫ ŸÜŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ŸÖŸÜŸÅ€å ÿ®ÿßÿ¥ÿØ.")
                return
        
            set_setting('referral_inviter_reward', str(amount))
        
            log_admin_action(user_id, 'change_setting', 0, f"ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá ‚Üí {format_price(amount)}")
        
            await update.message.reply_text(
                f"‚úÖ ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äå⁄©ŸÜŸÜÿØŸá ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!\n\n"
                f"üí∞ ŸÖÿ®ŸÑÿ∫ ÿ¨ÿØ€åÿØ: {format_price(amount)}"
            )
        
            context.user_data.pop('state', None)
        
        except ValueError:
            await update.message.reply_text("‚ùå ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")

# ==================== WAITING REFERRAL REWARD INVITED ====================
    elif state == WAITING_REFERRAL_REWARD_INVITED:
        if user_id not in ADMIN_IDS:
            return
    
        try:
            amount = int(update.message.text.replace(',', ''))
        
            if amount < 0:
                await update.message.reply_text("‚ùå ŸÖÿ®ŸÑÿ∫ ŸÜŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ŸÖŸÜŸÅ€å ÿ®ÿßÿ¥ÿØ.")
                return
        
            set_setting('referral_invited_reward', str(amount))
        
            log_admin_action(user_id, 'change_setting', 0, f"ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äåÿ¥ÿØŸá ‚Üí {format_price(amount)}")
        
            await update.message.reply_text(
                f"‚úÖ ŸæÿßÿØÿßÿ¥ ÿØÿπŸàÿ™‚Äåÿ¥ÿØŸá ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!\n\n"
                f"üí∞ ŸÖÿ®ŸÑÿ∫ ÿ¨ÿØ€åÿØ: {format_price(amount)}"
            )
        
            context.user_data.pop('state', None)
        
        except ValueError:
            await update.message.reply_text("‚ùå ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")

    # ÿØÿ± message_handler:
    elif state == WAITING_COUPON_DATA:
        await process_coupon_creation(update, context)


    elif state == WAITING_COUPON_SEARCH:
        await process_coupon_search(update, context)

    # ==================== WAITING MARZBAN URL ====================
    elif state == WAITING_MARZBAN_URL:
        if user_id not in ADMIN_IDS:
            return
    
        url = update.message.text.strip()
    
    # ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å URL
        if not url.startswith(('http://', 'https://')):
            await update.message.reply_text("‚ùå URL ÿ®ÿß€åÿØ ÿ®ÿß http:// €åÿß https:// ÿ¥ÿ±Ÿàÿπ ÿ¥ŸàÿØ.")
            return
    
    # ÿ≠ÿ∞ŸÅ slash ÿßŸÜÿ™Ÿáÿß€å€å
        url = url.rstrip('/')
    
    # ÿ∞ÿÆ€åÿ±Ÿá
        set_setting('marzban_url', url)
    
    # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å global marzban
        global marzban
        marzban = MarzbanAPI(
            url=url,
            username=get_setting('marzban_username', MARZBAN_USERNAME),
            password=get_setting('marzban_password', MARZBAN_PASSWORD)
        )
    
        log_admin_action(user_id, 'change_marzban_url', None, f"URL ÿ¨ÿØ€åÿØ: {url}")
    
        await update.message.reply_text(
            f"‚úÖ URL ŸÖÿ±ÿ≤ÿ®ÿßŸÜ ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!\n\n"
            f"üåê URL ÿ¨ÿØ€åÿØ: <code>{url}</code>\n\n"
            f"üí° ÿ™Ÿàÿµ€åŸá: ÿ≠ÿßŸÑÿß ÿßÿ™ÿµÿßŸÑ ÿ±ÿß ÿ™ÿ≥ÿ™ ⁄©ŸÜ€åÿØ.",
            parse_mode='HTML'
            )   
    
        context.user_data.pop('state', None)

# ==================== WAITING MARZBAN USER ====================
    elif state == WAITING_MARZBAN_USER:
        
        if user_id not in ADMIN_IDS:
            return
    
        
        username = update.message.text.strip()
    
        if len(username) < 3:
            await update.message.reply_text("‚ùå ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ÿ®ÿß€åÿØ ÿ≠ÿØÿßŸÇŸÑ 3 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± ÿ®ÿßÿ¥ÿØ.")
            return
    
        set_setting('marzban_username', username)
    
    # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å global marzban
        
        marzban = MarzbanAPI(
            url=get_setting('marzban_url', MARZBAN_URL),
            username=username,
            password=get_setting('marzban_password', MARZBAN_PASSWORD)
        )
    
        log_admin_action(user_id, 'change_marzban_user', None, f"⁄©ÿßÿ±ÿ®ÿ± ÿ¨ÿØ€åÿØ: {username}")
    
        await update.message.reply_text(
            f"‚úÖ ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿ±ÿ≤ÿ®ÿßŸÜ ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!\n\n"
            f"üë§ ⁄©ÿßÿ±ÿ®ÿ± ÿ¨ÿØ€åÿØ: <code>{username}</code>",
            parse_mode='HTML'
        )
    
        context.user_data.pop('state', None)

# ==================== WAITING MARZBAN PASS ====================
    elif state == WAITING_MARZBAN_PASS:
        if user_id not in ADMIN_IDS:    
            return
    
        password = update.message.text.strip()
    
        if len(password) < 4:
            await update.message.reply_text("‚ùå ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ÿ®ÿß€åÿØ ÿ≠ÿØÿßŸÇŸÑ 4 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± ÿ®ÿßÿ¥ÿØ.")
            return
    
        set_setting('marzban_password', password)
    
    # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å global marzban
        
        marzban = MarzbanAPI(
            url=get_setting('marzban_url', MARZBAN_URL),
            username=get_setting('marzban_username', MARZBAN_USERNAME),
            password=password
        )
    
    # ÿ≠ÿ∞ŸÅ Ÿæ€åÿßŸÖ ÿ≠ÿßŸà€å ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±
        try:
            await update.message.delete()
        except:
            pass
    
        log_admin_action(user_id, 'change_marzban_pass', None, "ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™")
    
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ŸÖÿ±ÿ≤ÿ®ÿßŸÜ ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!\n\nüîí ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿßŸÖŸÜ ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØ."
        )
    
        context.user_data.pop('state', None)

# ==================== WAITING MERCHANT ID ====================
    elif state == WAITING_MERCHANT_ID:
        if user_id not in ADMIN_IDS:
            return
    
        merchant_id = update.message.text.strip()
    
    # ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å ŸÅÿ±ŸÖÿ™ UUID
        if len(merchant_id) != 36 or merchant_id.count('-') != 4:
            await update.message.reply_text(
                "‚ùå ŸÅÿ±ŸÖÿ™ Merchant ID ŸÜÿßŸÖÿπÿ™ÿ®ÿ±!\n\n"
                "ŸÅÿ±ŸÖÿ™ ÿµÿ≠€åÿ≠: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            )
            return
    
        set_setting('zarinpal_merchant', merchant_id)
    
        log_admin_action(user_id, 'change_zarinpal_merchant', None, "Merchant ID ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™")
    
        await update.message.reply_text(
            f"‚úÖ Merchant ID ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!\n\n"
            f"üîë ID ÿ¨ÿØ€åÿØ: <code>{merchant_id}</code>\n\n"
            f"üí° ÿ™Ÿàÿµ€åŸá: ÿØÿ±⁄ØÿßŸá ÿ±ÿß ÿ™ÿ≥ÿ™ ⁄©ŸÜ€åÿØ.",
            parse_mode='HTML'
        )
    
        context.user_data.pop('state', None)

# ==================== WAITING WELCOME MESSAGE ====================
    # ==================== WAITING WELCOME MESSAGE ====================
    elif state == WAITING_WELCOME_MESSAGE:
        if user_id not in ADMIN_IDS:
            return

        new_message = update.message.text.strip()

        if len(new_message) < 10:
            await update.message.reply_text("‚ùå Ÿæ€åÿßŸÖ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ⁄ØŸà€å€å ÿ®ÿß€åÿØ ÿ≠ÿØÿßŸÇŸÑ 10 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± ÿ®ÿßÿ¥ÿØ.")
            return

        set_setting('welcome_message', new_message)
        log_admin_action(user_id, 'change_welcome_message', None, "Ÿæ€åÿßŸÖ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™")

    # Ÿæ€åÿ¥‚ÄåŸÜŸÖÿß€åÿ¥ ÿßŸÖŸÜ
    # import re

        def safe_preview(text, sample_user, sample_db_user, sample_referrer=None, invited_reward=0, inviter_reward=0):
            replacements = {
                'user_name': sample_user.get('first_name', '⁄©ÿßÿ±ÿ®ÿ±'),
                'first_name': sample_user.get('first_name', '⁄©ÿßÿ±ÿ®ÿ±'),
                'user_id': str(sample_user.get('id', 0)),
                'balance': format_price(sample_db_user.get('balance', 50000)),
                'referrer_name': sample_referrer.get('first_name', '€å⁄© ÿØŸàÿ≥ÿ™') if sample_referrer else '',
                'referrer_username': f"@{sample_referrer['username']}" if sample_referrer and sample_referrer.get('username') else '',
                'invited_reward': format_price(invited_reward) if sample_referrer else '',
                'inviter_reward': format_price(inviter_reward) if sample_referrer else ''
            }

            def replace_var(match):
                var_name = match.group(1)
                return str(replacements.get(var_name, match.group(0)))

            result = re.sub(r'\{(\w+)\}', replace_var, text)

        # ÿ≠ÿ∞ŸÅ ÿ®ÿÆÿ¥ ŸáÿØ€åŸá ÿØÿ± ÿµŸàÿ±ÿ™ ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ ÿ±ŸÅÿ±ÿßŸÑ
            if not sample_referrer:
                result = re.sub(r'üéÅ ŸáÿØ€åŸá .*? ÿßÿ≤ .*?\n?', '', result)

            return result

    # ŸÜŸÖŸàŸÜŸá Ÿæ€åÿ¥‚ÄåŸÜŸÖÿß€åÿ¥ ÿ®ÿß Ÿà ÿ®ÿØŸàŸÜ ÿ±ŸÅÿ±ÿßŸÑ
        sample_user = {"first_name": "ŸÖÿ≠ŸÖÿØ", "id": 123456789}
        sample_db_user = {"balance": 50000}
        sample_referrer = {"first_name": "ÿπŸÑ€å", "username": "ali123"}
        sample_invited_reward = 5000
        sample_inviter_reward = 10000

        preview_with_referral = safe_preview(
            new_message, sample_user, sample_db_user,
            sample_referrer, sample_invited_reward, sample_inviter_reward
        )
        preview_without_referral = safe_preview(
            new_message, sample_user, sample_db_user
        )

        await update.message.reply_text(
            f"‚úÖ Ÿæ€åÿßŸÖ ÿÆŸàÿ¥‚Äåÿ¢ŸÖÿØ⁄ØŸà€å€å ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!\n\n"
            f"<b>üìå Ÿæ€åÿ¥‚ÄåŸÜŸÖÿß€åÿ¥ ÿ®ÿß ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™:</b>\n{preview_with_referral}\n\n"
            f"<b>üìå Ÿæ€åÿ¥‚ÄåŸÜŸÖÿß€åÿ¥ ÿ®ÿØŸàŸÜ ŸÑ€åŸÜ⁄© ÿØÿπŸàÿ™:</b>\n{preview_without_referral}",
            parse_mode='HTML'
        )

        context.user_data.pop('state', None)
    

    if state == WAITING_WALLET_CHARGE_AMOUNT:
        try:
            amount = int(update.message.text.replace(',', ''))
            if amount < 10000:
                await update.message.reply_text("‚ùå ÿ≠ÿØÿßŸÇŸÑ ŸÖÿ®ŸÑÿ∫ ÿ¥ÿßÿ±⁄ò 10,000 ÿ™ŸàŸÖÿßŸÜ ÿßÿ≥ÿ™.")
                return
        
        # ÿ∞ÿÆ€åÿ±Ÿá ŸÖÿ®ŸÑÿ∫ ÿØÿ± context
            context.user_data['charge_amount'] = amount
        
            text = f"üí∞ <b>ÿ¥ÿßÿ±⁄ò ⁄©€åŸÅ ŸæŸàŸÑ</b>\n\n"
            text += f"üíµ ŸÖÿ®ŸÑÿ∫: {format_price(amount)}\n\n"
            text += "ÿ±Ÿàÿ¥ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:"
        
            keyboard = [
                [InlineKeyboardButton("üí≥ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ", callback_data="charge_online")],
                [InlineKeyboardButton("üîô ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="wallet")]
            ]
        
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        
            context.user_data.pop('state', None)
        
        except ValueError:
            await update.message.reply_text("‚ùå ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")


# ==================== MAIN ====================

def main():
    """ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ±ÿ®ÿßÿ™"""
    
    # ÿß€åÿ¨ÿßÿØ Application
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ handlers
    application.add_handler(CommandHandler("start", start))
    # application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    # ÿ™ŸÜÿ∏€åŸÖ webhook (ÿßÿÆÿ™€åÿßÿ±€å - ÿß⁄Øÿ± ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿßÿ≤ polling ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ ÿß€åŸÜ ÿ±ÿß ÿ≠ÿ∞ŸÅ ⁄©ŸÜ€åÿØ)
    # application.run_webhook(
    #     listen="127.0.0.1",
    #     port=8443,
    #     url_path=TELEGRAM_TOKEN,
    #     webhook_url=f"https://bot.boleyla.com/{TELEGRAM_TOKEN}"
    # )
    
    # ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ polling (ÿ≥ÿßÿØŸá‚Äåÿ™ÿ± - ÿ™Ÿàÿµ€åŸá ŸÖ€å‚Äåÿ¥ŸàÿØ)
    logger.info("‚úÖ ÿ±ÿ®ÿßÿ™ ÿ®ÿß polling ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ¥ÿØ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

